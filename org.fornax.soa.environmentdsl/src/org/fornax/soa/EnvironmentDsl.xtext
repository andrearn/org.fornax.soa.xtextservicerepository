grammar org.fornax.soa.EnvironmentDsl with org.eclipse.xtext.common.Terminals

generate environmentDsl "http://www.fornax.org/soa/EnvironmentDsl"

import "platform:/resource/org.fornax.soa.semanticsdsl/src-gen/org/fornax/soa/SemanticsDsl.ecore" as  semanticsDsl

EnvModel  hidden(WS):
	(imports+=EnvImport)*
	(users+=User)*
	(environments+=Environment)*;
	
EnvImport : EnvNsImport | EnvFileImport; 

EnvNsImport  hidden (WS):
	'import' importedNamespace=QualifiedNameWithWildCard ";"; 
	
EnvFileImport hidden (WS):
	'import' importURI=STRING ';';
	
Environment :
	'environment' name=ID 'of type' (type=EnvironmentType) '{'
		(hosts+=Host)*
		(servers+=Server)*
		('default' 'ESB' defaultESB=[ESB])? 
		('default' 'Registry' defaultRegistry=[Registry])? 
		('default' 'AppServer' defaultAppServer=[AppServer])? 
		('default' 'Broker' defaultBroker=[Broker])? 
	'}';
	
enum EnvironmentType : Prod = "Production-Environment" | PreProd="Pre-Production-Environment" | Test="Test-Environment" | Dev="Development-Environment" | Other="Other-Environment";

Server  hidden (WS): ESB | Registry | ProcessServer | AppServer | Broker | Database | SAP;

ESB hidden (WS): 
	'esb' name=ID '{'
		('identifier' dslCode=STRING ";")?
		('admins' admins+=[User|QualifiedName] ";")? 
		'host' host=[Host|QualifiedName] ";"
		('dir' home=STRING ";")?
		('deployDir' deployDir=STRING ";")?
		('baseUrl' baseUrl=STRING ";")?
		('soapUrl' soapUrl=STRING ";")?
		('adminUrl' adminUrl=STRING ";")?
		('server-type' serverType=STRING ';')?
		('server-version' serverVersion=STRING ';')?
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';

Registry  hidden (WS):
	'registry' name=ID '{'
		('identifier' dslCode=STRING ";")?
		('admins' admins+=[User|QualifiedName] ";")? 
		'host' host=[Host|QualifiedName] ";"
		('dir' home=STRING ";")?
		('deployDir' deployDir=STRING ";")?
		('baseUrl' baseUrl=STRING ";")?
		('adminUrl' adminUrl=STRING ";")?
		('server-type' serverType=STRING ';')?
		('server-version' serverVersion=STRING ';')?
		('kind' kind=RegistryKind ";")?
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';
	
enum RegistryKind : UDDI | HTTP | File | Native;

	
AppServer  hidden (WS): 
	'appserver' name=ID '{'
		('identifier' dslCode=STRING ";")?
		('admins' (admins+=[User|QualifiedName])+ ";")? 
		'host' host=[Host|QualifiedName] ";"
		('dir' home=STRING ";")?
		('deployDir' deployDir=STRING  ";")?
		('baseUrl' baseUrl=STRING  ";")?
		('adminUrl' adminUrl=STRING  ";")?
		(jndi=JNDI)?
		(dataSources+=DataSource)*
		('server-type' serverType=STRING ';')?
		('server-version' serverVersion=STRING ';')?
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';
	
JNDI  hidden (WS): 
	(clustered?='clustered')? 'jndi' name=ID '{'
		'jndi-url' url=STRING ';'
	'}';
	
ProcessServer  hidden (WS):
	'processserver'  name=ID '{'
		('identifier' dslCode=STRING ";")?
		('admins' (admins+=[User|QualifiedName])+ ";")? 
		'host' host=[Host|QualifiedName] ";"
		('dir' home=STRING ";")?
		('deployDir' deployDir=STRING  ";")?
		('deployUser' deployUser=[User] ";")?
		('baseUrl' baseUrl=STRING  ";")?
		('adminUrl' adminUrl=STRING  ";")?
		('server-type' serverType=STRING ';')?
		('server-version' serverVersion=STRING ';')?
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';

Broker  hidden (WS): 
	'broker' name=ID '{'
		('identifier' dslCode=STRING ";")? 
		('admins' (admins+=[User|QualifiedName])+ ";")? 
		'host' host=[Host|QualifiedName] 'dir' home=STRING ";"
		('deployDir' deployDir=STRING ";")?
		('baseUrl' baseUrl=STRING ";")? 
		('adminUrl' adminUrl=STRING ";")?
		('server-type' serverType=STRING ';')?
		('server-version' serverVersion=STRING ';')?
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}'; 

Database  hidden (WS):  
	'database' name=ID '{'
		('identifier' dslCode=STRING ";")?
		('admins' (admins+=[User|QualifiedName])+ ";")? 
		'host' host=[Host|QualifiedName] ";" 
		('dir' home=STRING ";")? 
		('dataDir' dataDir=STRING ";")? 
		('adminUrl' adminUrl=STRING ";" )?
		('jdbcUrl' jdbcUrl=STRING ";")?
		('database-type' serverType=STRING ';')?
		('database-version' serverVersion=STRING ';')?
		('{' (schema+=DatabaseSchema)+ '}')? 
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';

SAP  hidden (WS):  
	'sap' name=ID '{'
		('identifier' dslCode=STRING ";")?
		('admins' (admins+=[User|QualifiedName])+ ";")? 
		'host' host=[Host|QualifiedName] ";" 
		('dir' home=STRING ";")?
		('dataDir' dataDir=STRING ";")?
		('adminUrl' adminUrl=STRING ";")? 
		('{' (client+=SapClient)+ '}')? 
		('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';
	
SapClient  hidden (WS): 
	'client' name=ID '{'
		'client-ID' client=INT ';'
		'owner' owner=STRING ';'
		('accountingArea' accountingArea=STRING)?
	'}';
	
DataSource  hidden (WS):
	'data-source' name=ID '{'
		'jndi-name' jndiName=STRING ';'
		'schema' schema=[DatabaseSchema|QualifiedName] ';'
	'}';
	
enum DatabaseKind : Oracle | DB2 | MSSQL | MySQL | Postgres | Sybase | HyperSonic | Ingres | Adabas | Other;

DatabaseSchema: 
	'schema' name=ID 'owner' owner=STRING;
	
Host  hidden (WS):
	'host' name=ID '{'
		'full-qualified-name' fqn=STRING 
		('ip-address' ip=STRING)? 
		('identifier' dshCode=STRING )?
		('admins' admins+=[User|QualifiedName])?";"
	'}';
	
User  hidden (WS): 
	'user' name=ID '{'
		('firstname' firstname=STRING 'lastname' lastname=STRING ";")? 
		'email' email=STRING ";"
		('phone' phone=STRING ";")?
	'}';
	
QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;
