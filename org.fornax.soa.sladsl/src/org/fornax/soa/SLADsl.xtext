grammar org.fornax.soa.SLADsl with org.eclipse.xtext.common.Terminals

generate sLADsl "http://www.fornax.org/soa/SLADsl"

import "platform:/resource/org.fornax.soa.semanticsdsl/src-gen/org/fornax/soa/SemanticsDsl.ecore" as semanticsDsl

SlaModel hidden(WS):
	agreements+=SLA*;
	
SLA:
	'SLA' name=QualifiedName '{'
			'owner' owner=STRING ';'
			'scope' scope = STRING ';'
			'effective-date' effectiveDate = STRING ';'
			('effective-until' effectiveUntil = STRING ';')?
			(serviceQualityProperties += ServiceQualityProperty)*
			('preample' preaple = STRING ';')?
			('description' description = STRING ';')?
			('data-security-and-protection' dataSecProtClause = STRING ';')?
			('restrictions' restrictions=STRING ';')?
			(priorities+=PriorityDeclaration)*
			(escalationProcedure=Escalation ';')?
			('additional-services' additionalServices = STRING ';')?
			(parties+=Party)*
			('cancellation' cancellation = STRING ';')?
			('extraordinary-cancellation' extraordinaryCancellation = STRING ';')?
			('costs' costs = STRING ';')?
			('effort-accounting' effortAccounting = STRING ';')?
			(reports+=Report)*
			('tags' (tags+=[semanticsDsl::Tag])+ ';')*
	'}';
	
Import hidden(WS): NsImport /*| FileImport*/;
	
NsImport:
	'import' importedNamespace=QualifiedNameWithWildCard ';';
	
ServiceQualityProperty : Availability | Throughput | Latency | Maintenance | MaxDownTime;

Availability : 
	'service-availablity' '{'
		'availability' definition = STRING ';'
		(escalation = Escalation)?
		('penalty' penalty = STRING ';')?
	'}';
	
Throughput:
	'service-throughput' '{'
		'throughput' definition = STRING ';'
		'score-to-be-kept' score = STRING ';'
		(escalation = Escalation)?
		('penalty' penalty = STRING ';')?
	'}';

Latency:
	'service-call-latency' '{'
		'latency' definition = STRING ';'
		'score-to-be-kept' score = STRING ';'
		(escalation = Escalation)?
		('penalty' penalty = STRING ';')?
	'}';
	
Maintenance:
	'regular-maintenance' '{'
		'maintenance-times' definition = STRING ';'
		(escalation = Escalation)?
		('penalty' penalty = STRING ';')?
	'}';
	
MaxDownTime:
	'max-downtime' '{'
		'duration' definition = STRING ';'
		(escalation = Escalation)?
		('penalty' penalty = STRING ';')?
	'}';

PriorityDeclaration: 'priority' name=ID 'description' description=STRING ';';

Escalation : 
	'escalation' '{'
		('cause' cause=STRING ';')?
		'escalate-to' '{'
			(escalationTargets+=Contact)+
		'}'
		('procedure' procedure=STRING ';')?
	'}';
		
Contact :
	'contact' '{'
		'name' fullname=STRING ';'
		'phone' phone=STRING ';'
		'email' email=STRING ';'
	'}';
		
Party: CustomerParty | ProviderParty | ThirdParty;

CustomerParty:
	'customer-party' name=QualifiedName '{'
		(representatives+=Repesentative)+
		(responsibilities+=Responsibility)+
	'}'; 
	
ProviderParty:
	'provider-party' name=QualifiedName '{'
		(representatives+=Repesentative)+
		(responsibilities+=Responsibility)+
	'}';
	
ThirdParty:
	'provider-party' name=QualifiedName '{'
		'participation-role' role=STRING ';'
		(representatives+=Repesentative)+
		(responsibilities+=Responsibility)+
	'}';
	

Repesentative:
	'representative' '{'
		'name' fullname=STRING ';'
		'phone' phone=STRING ';'
		'email' email=STRING ';'
	'}';

Responsibility: SimpleResponsibility | ReportingResponsibility;

SimpleResponsibility:
	'responsibility' name=QualifiedName '{'
		description=STRING ';'
		(escalations+=Escalation)+
		(penalty=STRING) ';'
	'}';
	

Report:
	'report' name=ID '{'
		'report-to' 
		'contents' content=STRING
	'}';
	
ReportingResponsibility:
	'reporting-responsibility' name=ID '{'
		'report-to' 
		'contents' content=STRING
		(escalations+=Escalation)+
		(penalty=STRING) ';'
	'}';
	
QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;
	