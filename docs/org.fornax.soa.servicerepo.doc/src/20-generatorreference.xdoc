chapter:GeneratorReference[Generator Reference]

section[Generating technical contracts for services and types for an environment]

In general, all code generators use Xtend2 and can be called executed MWE2, the new Modeling Workflow Engine, 
that comes with Xtext. Code generation is usually done in three steps that should be defined in your workflow:
ol[
	item[A model reader. Use the read that comes with Xtext]
	item[Optionally, but recommended a DirectoryCleaner (comes with MWE)]
	item[A GeneratorComponent having the generator setup of the respective generator registered]
]


section2[Configuration of the model reader]

The reader must be configured with the DSL setups, to be able to parse and build the models. The is put into a
so called "slot". As a prototype to your reader configuration you can use this:

Example:
code[MWE2][
	component = org.eclipse.xtext.mwe.Reader {
		path = modelPath
		register = org.fornax.soa.ServiceDslStandaloneSetup {}
		register = org.fornax.soa.SemanticsDslStandaloneSetup {}
		register = org.fornax.soa.BusinessDslStandaloneSetup {}
		register = org.fornax.soa.BindingDslStandaloneSetup {}
		register = org.fornax.soa.EnvironmentDslStandaloneSetup {}
		register = org.fornax.soa.SLADslStandaloneSetup {}
		register = org.fornax.soa.basedsl.SOABaseDslStandaloneSetup {}
		register = org.fornax.soa.profiledsl.SOAProfileDslStandaloneSetup {}
		register = org.fornax.soa.moduledsl.ModuleDslStandaloneSetup {}
		loadResource = {
			slot = 'model'
		}
	}
]

section2[Generate WSDLs and XSDs]

You can generate WSDLs and XSDs from service and type definitions for Binding. This binding also references 
a target environment to generate the contracts for. The generator can be configured to generate for ModuleBindings, 
DomainBinding, DomainNamespaces, InternalNamespaces or any SubNamespace by providing a list of names of the 
bindings or namespaces. You can use Java regular expressions here. For an example see this:

Example:
code[MWE2][
	component = org.eclipse.xtext.generator.GeneratorComponent {
        register = org.fornax.soa.bindingdsl.generator.DefaultBindingContractGeneratorSetup {
			moduleBindingName 	= 'com\\.example\\.salesmodulebinding'
			moduleBindingName 	= 'com\\.example\\.billing\\.*'

			serviceModule = {
				name = 'com.example.partner'
				version = '1.0.1'
				generateUsedServices = true
				generateProvidedServices = false
			}
			
			domainNamespace  	= 'de\\.countandcare\\.product.*'
			internalNamespace = 'com.example.technical.internal.*'
			namespace = 'com\\.example\\.anysubnamespace.*'
			
			/*generate for all dependencies*/
			noDependencies = false
			/*use the rules for lifecycle definition etc. defined in profile ExSOAArchitectureProfile*/
			profileName = 'ExSOAArchitectureProfile'
			targetEnvironmentName = 'Prod'
		}
        slot = 'model'
      	outlet = {
            path = "${resSrcGenPath}/contracts"
        }
    }
]

The generator will generate WSDLs and their imported XSDs for the given names of ModuleBindings. Further,
WSDLs and their imported XSDs for all services used by module "com.example.partner" version "1.0.1" will be generated.
Finally all XSDs for all DomainNamespaces matching the regular expression "de\\.countandcare\\.product.*", InternalNamespaces 
matching "com.example.technical.internal.*" and any SubNamespace matching "com\\.example\\.anysubnamespace.*"
are generated. Everything is generated for the "Prod" environment.

section3[Configuring the generator]

The generator is configured using the e[ISetup] implementation e[org.fornax.soa.bindingdsl.generator.DefaultBindingContractGeneratorSetup].
e[DefaultBindingContractGeneratorSetup] supports the following configuration parameters:

table[
	tr[
		td[Parameter name]		td[Type]	td[Cardinality]	td[Default]	td[Description]
	]
	tr[		
		td[moduleBindingName]	td[String]	td[0..*]		td[]	td[Generate service contracts
		for any e[ModuleBinding] whose name matches the given regular expression and binds to the given
		e[targetNamespace]. ModuleBindings bind a Module to an Environment.]
	]
	tr[		
		td[moduleName]			td[String]	td[0..*]		td[]	td[Generate service contracts
		for any used module or used service defined in the module. The generator looks up a e[Binding]
		that provides the service and matches the constraints and qualifiers defined in the usage reference.]
	]
	tr[		
		td[domainNamespace]		td[String]	td[0..*]		td[]	td[Generate XSDs for a code[ServiceDSL][domain-namespace]
		whose name matches the given regular expression.]
	]
	tr[		
		td[internalNamespace]	td[String]	td[0..*]		td[]	td[Generate XSDs for a code[ServiceDSL][internal-namespace]
		whose name matches the given regular expression.]
	]
	tr[		
		td[namespace]			td[String]	td[0..*]		td[]	td[Generate XSDs for a e[SubNamespace]
		whose name matches the given regular expression.]
	]
	tr[		
		td[noDependecies]		td[boolean]	td[0..1]		td[false]	td[Also generate artefacts
		imported by generated artefacts? If true, no imported artefacts are generated]
	]
	tr[		
		td[profileName]			td[String]	td[0..1]		td[]		td[The name of the architecture
		profile, that defines the architectural rules to be applied on generation. This property is not
		required, if only one architecture profile is defined in the model.]
	]
	tr[		
		td[targetEnvironmentName]	td[String] td[1..1]		td[]		td[The of the Environment
		to generate for. Bindings and used Modules Bindings are filtered by their targeted Environment,
		only selecting Bindings that bind to an Environment with the given targetEnvironmentName. For
		namespace generated XSDs will contain latest version of VersionedTypes that are supported in
		the given Environment as defined by the lifecycle state model.]
	]
	
	tr[		
		td[useRegistryBasedFilePaths]		td[boolean]	td[0..1]	td[false]		td[Whether imported artefacts
		in generated contracts shall be resolved using absolute paths based on the location of the service
		registry. If true, absolute paths will be used. Otherwise a relative paths will be used e.g.
		for XSD import location URLs.
		as base URL]
	]
]


section[Generate business objects for a platform]

section[Generator API reference]

