grammar org.fornax.soa.SolutionDsl with org.fornax.soa.basedsl.SOABaseDsl

generate solutionDsl "http://www.fornax.org/soa/SolutionDsl"

import "platform:/resource/org.fornax.soa.semanticsdsl/src-gen/org/fornax/soa/SemanticsDsl.ecore" as semanticsDsl
import "platform:/resource/org.fornax.soa.servicedsl/src-gen/org/fornax/soa/ServiceDsl.ecore" as serviceDsl
import "platform:/resource/org.fornax.soa.businessdsl/src-gen/org/fornax/soa/BusinessDsl.ecore" as businessDsl

Model hidden (WS):
	(imports+=Import)*
	(solution+=Solution)*;
	
Import hidden(WS): NsImport;
	
NsImport:
	'import' importedNamespace=QualifiedNameWithWildCard ';';
	
FileImport:
	'import' importURI=STRING ';';
	
	
	
Solution hidden(WS):
	'solution' name=QualifiedName '{'
		('domain' domain = [businessDsl::Domain|QualifiedName] ';')?
		version=Version
		(productVersion=ProductVersion)?
		('requires' requires+=ServiceRef ';')*
		(features+=Feature)*
		(modules+=Module)*
		('tags' (tags+=[semanticsDsl::Tag])+ ';')?
	'}';

Module hidden (WS):
	'module' name=ID '{'
		'kind' kind=ModuleKind ';'
		('requires' requires+=ServiceRef ';')*
		(features+=Feature)*
		(modules+=Module)*
		('tags' (tags+=[semanticsDsl::Tag])+ ';')?
	'}';
	
enum ModuleKind : UI | BusinessLogic | Persistence | Security | Batch | OTHER;

Feature hidden (WS):
	(nonFunctional?='non-functional')? 'feature' name=ID '{'
		('use cases' (useCase+=STRING)+ ';')?
		('description' description=STRING ';')?
		('functions' (function+=[businessDsl::Function|QualifiedName])+ ';')?
		('requires' requires+=ServiceRef ';')*
		('subscibes-to-event' (event+=EventRef)(',' event+=EventRef)* ';')?
		(features+=Feature)*
		('tags' (tags+=[semanticsDsl::Tag])+ ';')?
	'}';
	
ServiceRef:
	service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef (isResponseHandler?='handling responses')?;

	
//VersionRef returns serviceDsl::VersionRef:
//		MinVersionRef | MaxVersionRef | LowerBoundRangeVersionRef | MajorVersionRef;
//	
//MinVersionRef returns serviceDsl::MinVersionRef:
//	('minVersion') minVersion=VersionId;
//	
//MaxVersionRef returns serviceDsl::MaxVersionRef:
//	('maxVersion') maxVersion=VersionId;
//	
//LowerBoundRangeVersionRef returns serviceDsl::LowerBoundRangeVersionRef:
//	('minVersion') minVersion=VersionId ',' ('maxVersion') maxVersion=VersionId;
//
//MajorVersionRef returns serviceDsl::MajorVersionRef:
//	'majorVersion' majorVersion=INT;
//
//VersionId: INT('.'INT)*;
//
//QualifiedNameWithWildCard:
//	QualifiedName '.*'?;
//
//QualifiedName:
//	ID ('.' ID)*;

Version:
	'version' (version=VersionId) ';' ;
	
ProductVersion returns Version:
	'product-version' (version=VersionId) ';' ;
	
EventRef:
	event=[serviceDsl::Event|QualifiedName] versionRef=VersionRef;
	
	