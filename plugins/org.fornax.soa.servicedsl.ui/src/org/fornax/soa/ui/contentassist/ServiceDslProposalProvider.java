/*
* generated by Xtext
*/
package org.fornax.soa.ui.contentassist;

import java.util.Iterator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.ILeafNode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.fornax.soa.basedsl.sOABaseDsl.Import;
import org.fornax.soa.basedsl.sOABaseDsl.MajorVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.VersionRef;
import org.fornax.soa.serviceDsl.BusinessObjectRef;
import org.fornax.soa.serviceDsl.EnumTypeRef;
import org.fornax.soa.serviceDsl.ExceptionRef;
import org.fornax.soa.serviceDsl.ServiceDslPackage;
import org.fornax.soa.serviceDsl.ServiceModel;
import org.fornax.soa.serviceDsl.VersionedTypeRef;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class ServiceDslProposalProvider extends AbstractServiceDslProposalProvider {

	public void complete_VersionId (EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		calculateVersionProposals (model, context, acceptor, false);
	}
	
	public void complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof MajorVersionRef)  {
			calculateVersionProposals (model, context, acceptor, true);
		} else if(model.eContainer() instanceof MajorVersionRef) {
			calculateVersionProposals (model, context, acceptor, true);
		} else {
			super.complete_INT (model, ruleCall, context, acceptor);
		}
	}	

	private void calculateVersionProposals (EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor, boolean majorVersionsOnly) {
		ICompositeNode parentNode = NodeModelUtils.findActualNodeFor (model).getParent();
		Iterable<ILeafNode> leafs = parentNode.getLeafNodes();
		Iterable<ILeafNode> nonHidden = Iterables.filter (leafs, new Predicate<ILeafNode>() {

			public boolean apply (ILeafNode node) {
				return !node.isHidden();
			}
			
		});
		ServiceModel serviceModel = null;
		EObject curObj = model;
		while (! (curObj instanceof ServiceModel) && curObj.eContainer() != null) {
			curObj = curObj.eContainer();
		}
		if (curObj instanceof ServiceModel) {
			serviceModel = (ServiceModel) curObj;
			EList<Import> imports = serviceModel.getImports();
			final Iterable<String> importedNamespaces = Lists.transform (imports, new Function<Import, String> () {

				public String apply (Import from) {
					return from.getImportedNamespace().replaceAll("\\.\\*", "");
				}
				
			});
			Iterator<ILeafNode> leafIt = nonHidden.iterator();
			if (model.eContainer() instanceof VersionedTypeRef) {
				VersionedTypeRef typeRef = (VersionedTypeRef) model.eContainer();
				boolean versionConstraintFound = false;
				StringBuilder nameParts = new StringBuilder();
				while (leafIt.hasNext() && !versionConstraintFound) {
					ILeafNode curNode = leafIt.next();
					if (curNode.getSemanticElement() instanceof VersionRef)
						versionConstraintFound = true;
					else
						nameParts.append(curNode.getText());
				}
				String typeName = nameParts.toString().trim().replaceAll("\\[\\]", "").trim();
				Iterable<String> canditateVersions = getCanditateVersions (typeName, ServiceDslPackage.Literals.BUSINESS_OBJECT.getName(), importedNamespaces, majorVersionsOnly);
				if (!canditateVersions.iterator().hasNext())
					canditateVersions = getCanditateVersions (typeName, ServiceDslPackage.Literals.ENUMERATION.getName(), importedNamespaces, majorVersionsOnly);
				for (String version : canditateVersions) {
					acceptor.accept (createCompletionProposal (version, context));
				}

			} else if (model.eContainer() instanceof BusinessObjectRef) {
				BusinessObjectRef typeRef = (BusinessObjectRef) model.eContainer();
				boolean versionConstraintFound = false;
				StringBuilder nameParts = new StringBuilder();
				while (leafIt.hasNext() && !versionConstraintFound) {
					ILeafNode curNode = leafIt.next();
					if (curNode.getSemanticElement() instanceof VersionRef)
						versionConstraintFound = true;
					else
						nameParts.append(curNode.getText());
				}
				String typeName = nameParts.toString().trim().replaceAll("\\[\\]", "").trim();
				String className = ServiceDslPackage.Literals.BUSINESS_OBJECT.getName();
				Iterable<String> canditateVersions = getCanditateVersions (typeName, className, importedNamespaces, majorVersionsOnly);
				for (String version : canditateVersions) {
					acceptor.accept (createCompletionProposal (version, context));
				}

			} else if (model.eContainer() instanceof EnumTypeRef) {
				EnumTypeRef typeRef = (EnumTypeRef) model.eContainer();
				boolean versionConstraintFound = false;
				StringBuilder nameParts = new StringBuilder();
				while (leafIt.hasNext() && !versionConstraintFound) {
					ILeafNode curNode = leafIt.next();
					if (curNode.getSemanticElement() instanceof VersionRef)
						versionConstraintFound = true;
					else
						nameParts.append(curNode.getText());
				}
				String typeName = nameParts.toString().trim().replaceAll("\\[\\]", "").trim();
				String className = ServiceDslPackage.Literals.ENUMERATION.getName();
				Iterable<String> canditateVersions = getCanditateVersions (typeName, className, importedNamespaces, majorVersionsOnly);
				for (String version : canditateVersions) {
					acceptor.accept (createCompletionProposal (version, context));
				}

			} else if (model.eContainer() instanceof ExceptionRef) {
				boolean versionConstraintFound = false;
				StringBuilder nameParts = new StringBuilder();
				while (leafIt.hasNext() && !versionConstraintFound) {
					ILeafNode curNode = leafIt.next();
					if (curNode.getSemanticElement() instanceof VersionRef)
						versionConstraintFound = true;
					else
						nameParts.append(curNode.getText());
				}
				String typeName = nameParts.toString().trim().replaceAll("\\[\\]", "").trim();
				String className = ServiceDslPackage.Literals.EXCEPTION.getName();
				Iterable<String> canditateVersions = getCanditateVersions (typeName, className, importedNamespaces, majorVersionsOnly);
				for (String version : canditateVersions) {
					acceptor.accept (createCompletionProposal (version, context));
				}
			} else {
				if (majorVersionsOnly)
					acceptor.accept (createCompletionProposal ("1", context));
				else
					acceptor.accept (createCompletionProposal ("1.0", context));
			}
		}
	}
	
}
