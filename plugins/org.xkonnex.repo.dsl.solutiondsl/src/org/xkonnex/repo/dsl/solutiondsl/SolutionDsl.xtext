/*
Copyright (c) 2010-2013 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Christian Schneider	- reviews
*/
grammar org.xkonnex.repo.dsl.solutiondsl.SolutionDsl with org.xkonnex.repo.dsl.basedsl.BaseDsl

generate solutionDsl "http://www.xkonnex.org/repo/dsl/solutiondsl/SolutionDsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as basedsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as semanticsDsl
import "http://www.xkonnex.org/repo/dsl/servicedsl/ServiceDsl" as serviceDsl
import "http://www.xkonnex.org/repo/dsl/businessdsl/BusinessDsl" as businessDsl
import "http://www.xkonnex.org/repo/dsl/profiledsl/ProfileDsl" as profileDsl

Model:
	(imports+=Import)*
	(solution+=Solution)*;
	
	
Solution:
	'solution' name=QualifiedName '{'
		('domain' domain = [businessDsl::Domain|QualifiedName] )?
		version=Version
		'lifecycle-state' state=[profileDsl::LifecycleState | QualifiedName]
		(productVersion=ProductVersion)?
		(additionalInfo=AdditionalInformation)?
		('requires' requires+=ServiceRef )*
		('requires-channel' requiresChannel+=[serviceDsl::Channel|QualifiedName] )*
		(features+=Feature)*
		(modules+=Module)*
		('contact-info' '{'
			('owner' owner=[basedsl::User|QualifiedName])?
			('responsible' responsible += [basedsl::User|QualifiedName])*
			('budgeting' budgeting = [basedsl::User|QualifiedName])?
		'}')?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])*)?
		('subscriptions' '{'
			subscriptions += [basedsl::User|QualifiedName]*
		'}')?
	'}';

Module:
	'module' name=ID '{'
		'kind' kind=ModuleKind 
		(version=Version)?
		(additionalInfo=AdditionalInformation)?
		('requires' requires+=ServiceRef )*
		('requires-channel' requiresChannel+=[serviceDsl::Channel|QualifiedName] )*
		(features+=Feature)*
		(modules+=Module)*
		('contact-info' '{'
			('owner' owner=[basedsl::User|QualifiedName])?
			('responsible' responsible += [basedsl::User|QualifiedName])*
			('budgeting' budgeting = [basedsl::User|QualifiedName])?
		'}')?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])*)?
		('subscriptions' '{'
			subscriptions += [basedsl::User|QualifiedName]*
		'}')?
	'}';
	
enum ModuleKind : UI | BusinessLogic | Persistence | Security | Batch | OTHER;

Feature:
	(nonFunctional?='non-functional')? 'feature' name=ID '{'
		('use-cases' (useCase+=STRING)+ )?
		('description' description=STRING )?
		(additionalInfo=AdditionalInformation)?
		('uses-capabilities' '{'
			(usesCapabilities+=CapabilityRef)+ 
		'}')?
		('requires' requires+=ServiceRef )*
		('requires-channel' requiresChannel+=[serviceDsl::Channel|QualifiedName] )*
		('contact-info' '{'
			('owner' owner=[basedsl::User|QualifiedName])?
			('responsible' responsible += [basedsl::User|QualifiedName])*
			('budgeting' budgeting = [basedsl::User|QualifiedName])?
		'}')?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])*)?
		(features+=Feature)*
		('subscriptions' '{'
			subscriptions += [basedsl::User|QualifiedName]*
		'}')?
	'}';
	
ServiceRef:
	service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef (ServiceRefCallFragment)?;

fragment ServiceRefCallFragment: '{'
		'calling' '{'
			(calledOperations+=CallOperationRef) (',' calledOperations+=CallOperationRef)* 
		'}'
	'}'
;

CallOperationRef: operation=[serviceDsl::Operation|QualifiedName] ('handle-response-with' responseHandler=OperationRef)?;


/*
 * A reference to a service operation with a version constraint
 */	
OperationRef:
	operation=[serviceDsl::Operation|QualifiedName] versionRef=VersionRef;

//SimpleOperationRef: 
//	operation=[serviceDsl::Operation|QualifiedName];

	
CapabilityRef:
	capability=[businessDsl::Capability|QualifiedName] versionRef=VersionRef;

	
Version:
	'version' (version=VersionId)  ;
	
ProductVersion returns Version:
	'product-version' (version=VersionId)  ;
	
EventRef:
	event=[serviceDsl::Event|QualifiedName] versionRef=VersionRef;
	
	