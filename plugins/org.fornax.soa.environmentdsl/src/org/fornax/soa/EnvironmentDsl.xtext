/*
Copyright (c) 2010-2011 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
*/
grammar org.fornax.soa.EnvironmentDsl with org.eclipse.xtext.common.Terminals

generate environmentDsl "http://www.fornax.org/soa/EnvironmentDsl"

import "platform:/resource/org.fornax.soa.semanticsdsl/src-gen/org/fornax/soa/SemanticsDsl.ecore" as  semanticsDsl

EnvModel  hidden(WS):
	(imports+=EnvImport)*
	(users+=User)*
	(environments+=Environment)*;
	
EnvImport : EnvNsImport | EnvFileImport; 

EnvNsImport  hidden (WS):
	'import' importedNamespace=QualifiedNameWithWildCard ; 
	
EnvFileImport hidden (WS):
	'import' importURI=STRING ;
	
Environment :
	'environment' name=ID 'of type' (type=EnvironmentType) '{'
		(hosts+=Host)*
		(servers+=Server)*
		('default' 'ESB' defaultESB=[ESB])? 
		('default' 'Registry' defaultRegistry=[Registry])? 
		('default' 'AppServer' defaultAppServer=[AppServer])? 
		('default' 'Broker' defaultBroker=[Broker])? 
	'}';
	
enum EnvironmentType : Prod = "Production-Environment" | PreProd="Pre-Production-Environment" | Test="Test-Environment" | Dev="Development-Environment" | Other="Other-Environment";

Server  hidden (WS): ESB | Registry | ProcessServer | AppServer | Broker | Database | SAP;

ESB hidden (WS): 
	'esb' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' admins+=[User|QualifiedName] )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING )?
		('baseUrl' baseUrl=STRING )?
		('soapUrl' soapUrl=STRING )?
		('adminUrl' adminUrl=STRING )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}';

Registry  hidden (WS):
	'registry' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' admins+=[User|QualifiedName] )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING )?
		('baseUrl' baseUrl=STRING )?
		('adminUrl' adminUrl=STRING )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		('kind' kind=RegistryKind )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}';
	
enum RegistryKind : UDDI | HTTP | File | Native;

	
AppServer  hidden (WS): 
	'appserver' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING  )?
		('baseUrl' baseUrl=STRING  )?
		('adminUrl' adminUrl=STRING  )?
		(jndi=JNDI)?
		(dataSources+=DataSource)*
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}';
	
JNDI  hidden (WS): 
	(clustered?='clustered')? 'jndi' name=ID '{'
		'jndi-url' url=STRING 
	'}';
	
ProcessServer  hidden (WS):
	'processserver'  name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING  )?
		('deployUser' deployUser=[User] )?
		('baseUrl' baseUrl=STRING  )?
		('adminUrl' adminUrl=STRING  )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}';

Broker  hidden (WS): 
	'broker' name=ID '{'
		('identifier' dslCode=STRING )? 
		('admins' (admins+=[User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 'dir' home=STRING 
		('deployDir' deployDir=STRING )?
		('baseUrl' baseUrl=STRING )? 
		('adminUrl' adminUrl=STRING )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}'; 

Database  hidden (WS):  
	'database' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName]  
		('dir' home=STRING )? 
		('dataDir' dataDir=STRING )? 
		('adminUrl' adminUrl=STRING  )?
		('jdbcUrl' jdbcUrl=STRING )?
		('database-type' serverType=STRING )?
		('database-version' serverVersion=STRING )?
		('{' (schema+=DatabaseSchema)+ '}')? 
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}';

SAP  hidden (WS):  
	'sap' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName]  
		('dir' home=STRING )?
		('dataDir' dataDir=STRING )?
		('adminUrl' adminUrl=STRING )? 
		('{' (client+=SapClient)+ '}')? 
		('tags' (tags+=[semanticsDsl::Tag])+ )*
	'}';
	
SapClient  hidden (WS): 
	'client' name=ID '{'
		'client-ID' client=INT 
		'owner' owner=STRING 
		('accountingArea' accountingArea=STRING)?
	'}';
	
DataSource  hidden (WS):
	'data-source' name=ID '{'
		'jndi-name' jndiName=STRING 
		'schema' schema=[DatabaseSchema|QualifiedName] 
	'}';
	
	
enum DatabaseKind : Oracle | DB2 | MSSQL | MySQL | Postgres | Sybase | HyperSonic | Ingres | Adabas | Other;

DatabaseSchema: 
	'schema' name=ID 'owner' owner=STRING;


Connector:
	SOAPHTTP | SOAPJMS | REST | EJB | JMS | AMQP | IIOP | RMI | RFC | FTP | IMAP | POP3 | SMTP | HTTP | TCP
;

SOAPHTTP:
	{SOAPHTTP}
	'SOAP/HTTP' '{'
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		('context-root' contextRoot=STRING)?
		('implementation' implementation=STRING)?
	'}';

SOAPJMS:
	'SOAP/JMS' '{'
		('versions' (version+=STRING)+)?
		'port' port=INT
		('security-protocol' securityProtocol=SecurityProtocol)?
		connectionSpec=JCAConnectionSpec
		('implementation' implementation=STRING)?
	'}';

REST:
	{REST}
	'REST' '{'
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		('context-root' contextRoot=STRING)?
	'}';

EJB:
	{EJB}
	'EJB' '{'
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}'
;

IIOP:
	{IIOP}
	'IIOP' '{'
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(connectionSpec=JCAConnectionSpec)?
	'}'
;

RMI:
	{RMI}
	'RMI' '{'
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(connectionSpec=JCAConnectionSpec)?
	'}'
;

Tuxedo:
	{Tuxedo}
	'Tuxedo' '{'
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}'
;

JMS:
	'JMS' '{'
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		connectionSpec=JCAConnectionSpec
		('implementation' implementation=STRING)?
	'}';

AMQP:
	{AMQP}
	'AMQP' '{'
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(connectionSpec=JCAConnectionSpec)?
		('implementation' implementation=STRING)?
	'}'
;

RFC: 
	{RFC}
	'RFC' '{'
		('port' port=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(connectionSpec=JCAConnectionSpec)?
	'}';

FTP:
	{FTP}
	'FTP' '{'
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}';

IMAP:
	{IMAP}
	'IMAP' '{'
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}';

POP3:
	{POP3}
	'POP3' '{'
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}';

JCAConnectionSpec:
	'JCA-connection-spec' '{'
		'connection-factory-JNDI-name' connectionFactoryJNDI = STRING
		('connection-factory-class' connectionFactoryClass = STRING)?
	'}';

SMTP:
	{SMTP}
	'SMTP' '{'
		('port' port=INT)?
		('secured-port' securedPort = INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}';

HTTP:
	{HTTP}
	'HTTP' '{'
		('port' port=INT)?
		('secured-port' securedPort = INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		('context-root' contextRoot = STRING)?
	'}';

TCP:
	'TCP' '{'
		'port' port = INT
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}';
	
		
Host  hidden (WS):
	'host' name=ID '{'
		'full-qualified-name' fqn=STRING 
		('ip-address' ip=STRING)? 
		('identifier' dshCode=STRING )?
		('admins' admins+=[User|QualifiedName])?
	'}';
	
User  hidden (WS): 
	'user' name=ID '{'
		('firstname' firstname=STRING 'lastname' lastname=STRING )? 
		'email' email=STRING 
		('phone' phone=STRING )?
	'}';
	
enum SecurityProtocol: NONE | SSLv2 | SSLv3 | TLS;
	
QualifiedNameWithWildCard:
	QualifiedName '.*'?;

QualifiedName:
	ID ('.' ID)*;
