/*
Copyright (c) 2010-2011 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Vitaly Markin		- reviews
*/
grammar org.fornax.soa.BindingDsl with org.fornax.soa.basedsl.SOABaseDsl

generate bindingDsl "http://www.fornax.org/soa/BindingDsl"

import "platform:/resource/org.fornax.soa.servicedsl/src-gen/org/fornax/soa/ServiceDsl.ecore" as serviceDsl
import "platform:/resource/org.fornax.soa.moduledsl/src-gen/org/fornax/soa/moduledsl/ModuleDsl.ecore" as moduleDsl
import "platform:/resource/org.fornax.soa.environmentdsl/src-gen/org/fornax/soa/EnvironmentDsl.ecore" as environmentDsl
import "platform:/resource/org.fornax.soa.profiledsl/src-gen/org/fornax/soa/profiledsl/SOAProfileDsl.ecore" as profileDsl
import "platform:/resource/org.fornax.soa.sladsl/src-gen/org/fornax/soa/SLADsl.ecore" as slaDsl

BindingModel hidden(WS):
	(imports+=Import)*
	(bindings+=Binding)*;


Binding: DomainBinding | ModuleBinding | ServiceBinding ;

DomainBinding: 
	'bind namespace' subNamespace=[serviceDsl::SubNamespace|QualifiedName] 'as' name=QualifiedName 'to' 'environment' environment=[environmentDsl::Environment] '{'
		(qualifiers+=Qualifier)*
		('protocols' '{'
			(protocol+=BindingProtocol)+
		'}')?
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('provider-policies' '{'
			(providerPolicies+=Policy)*
		'}')?
		('SLAs' (sla+=[slaDsl::SLA|QualifiedName]) (',' sla+=[slaDsl::SLA|QualifiedName])* )?
		(serviceBinding+=ServiceBinding)*
		(components+=Component)*
	'}';
	
Publisher:
	'publish on' pubServer=[environmentDsl::Server|QualifiedName] ('with' 'connector' (connectors+=[environmentDsl::Connector | QualifiedName]) (',' connectors+=[environmentDsl::Connector | QualifiedName])*)?;
	
Provider:
	'provided on' provServer = [environmentDsl::Server|QualifiedName] ('with' 'connector' (connectors+=[environmentDsl::Connector | QualifiedName]) (',' connectors+=[environmentDsl::Connector | QualifiedName])*)?;
	
ServiceBinding:
	'bind-service' service=ServiceRef '{'
		(qualifiers+=Qualifier)*
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('SLAs' (sla+=[slaDsl::SLA|QualifiedName])(',' sla+=[slaDsl::SLA|QualifiedName])* )?
		('references-module' referencedModule = ModuleRef)?
		(operation+=OperationBinding)*
	'}';
	
ServiceRef:
	service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef;
	

	
BindingProtocol: SCA | SOAP | EJB | HTTP | REST | SAP | JMS | FILE | FTP;

OperationBinding: 
	'bind-operation' operation=[serviceDsl::Operation|QualifiedName] '{' 
		(qualifiers+=Qualifier)*
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		('provider-protocols' '{'
			(providerProtocol+=BindingProtocol)+
		'}')?
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('provider-policies' '{'
			(providerPolicies+=Policy)*
		'}')?
		('SLAs' (sla+=[slaDsl::SLA|QualifiedName]) (',' sla+=[slaDsl::SLA|QualifiedName])* )?
	'}';
	
ModuleBinding:
	'bind-module' module=ModuleRef 'as' name=QualifiedName 'to' 'environment' environment=[environmentDsl::Environment|QualifiedName] '{'
		(qualifiers+=Qualifier)*
		provider=Provider
		('default-protocols' '{'
			(protocol+=BindingProtocol)+
		'}')?
		('default-policies' '{'
			(policies+=Policy)*
		'}')?
		('default-SLAs' (sla+=[slaDsl::SLA|QualifiedName]) (',' sla+=[slaDsl::SLA|QualifiedName])* )?
		(serviceBindings+=ServiceBinding)*
	'}'
;

ModuleRef: module=[moduleDsl::Module|QualifiedName] versionRef=VersionRef;

Component:
	'component' name=ID 'implements' implements=ServiceRef '{'
		'bind to environment' environment = [environmentDsl::Environment|QualifiedName]
		(qualifiers+=Qualifier)*
		'provided-services' services+=ServiceRef (',' services+=ServiceRef)* 
		('referenced-services' referencedServices+=ServiceRef (',' )* )?
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		(operation+=OperationBinding)*
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('provider-policies' '{'
			(providerPolicies+=Policy)*
		'}')?
		('SLAs' (sla+=[slaDsl::SLA|QualifiedName]) (',' sla+=[slaDsl::SLA|QualifiedName])* )?
		'implementation' implementation=ImplementationType 
		('sourceURL' source=STRING )? //Where can I get the sources?
	'}';

enum ImplementationType: BPMN | BPMN2 | BPEL | WSHT='WS-HT' | RuleML | Drools | Mediation | Java | CS='C#' | CPP='C++' | Scala | Ruby | PHP | WSDocLit = 'WS-Document/Literal' | WSRPC = 'WS-RPC/Literal' | WSRPCEnc='WS-RPC/Encoded' | REST_XML='REST-XML' | REST_JSON = 'REST-JSON'| EJB | Spring | EJB2 | SAP | SAP_IDOC = 'SAP/iDoc' | SAP_BAPI = 'SAP/BAPI'| Corba | Shell | Siebel | Tuxedo | File | SQL | Ivy | jPDL3 | jPDL4;


SOAP: 
	'SOAP' '{'
		{SOAP}
		(qualifiers+=Qualifier)*
		(publisher=Publisher)?
		(provider=Provider)?
		('style' style=SOAPStyle )?
		('http-context-root' contextRoot = STRING )?
		('provider-http-context-root' providerContextRoot = STRING )?
		('provided-WSDL-Url' providedWsdlUrl = STRING )?
	'}';
	
enum SOAPStyle: doclitwrap='document/literal-wrapped' | rpclit = 'rpc/literal' | rpcenc='rpc/encoded';

SAP: 
	'SAP' '{'
		{SAP}
		(qualifiers+=Qualifier)*
		(provider=Provider)?
		('transport' transport=SAPTransport )?
		('client' client=[environmentDsl::SapClient|QualifiedName] )?
	'}';

enum SAPTransport: IDOC | RFC;
 
EJB: 
	'EJB' '{'
		(qualifiers+=Qualifier)*
		(publisher=Publisher)?
		(provider=Provider)?
		'jndi-name' jndiName=STRING 
	'}';
	
HTTP: 
	'HTTP' '{'
		(qualifiers+=Qualifier)*
		(publisher=Publisher)?
		(provider=Provider)?
		'url' url=STRING 
		'provider-url' providerUrl=STRING  
		'verb' verb=Verb 
	'}';

REST: 
	'REST' '{'
		(qualifiers+=Qualifier)*
		(publisher=Publisher)?
		(provider=Provider)?
		'path' path=STRING  
		'provider-url' providerUrl=STRING  
		'verb' verb=Verb 
		('format' format=RESTFormat)? 
		('consumes-format' consumesFormat=RESTFormat)? 
		('provides-format' provideFormat=RESTFormat)? 
	'}';

	
enum RESTFormat: JSON | XML | BISON | OTHER;
enum Verb: CREATE | RETRIEVE | UPDATE | DELETE | GET | PUT | POST;

JMS:
	'JMS' '{'
		{JMS}
		(qualifiers+=Qualifier)*
		(publisher=Publisher)?
		(provider=Provider)?
		(channel=TopicOrQueue)?
		'jndi-name' jndiName=STRING
		('provider-jndi-name' providerJndi=STRING )?
	'}';
	
TopicOrQueue: Topic | Queue;

Topic: 'topic' name=STRING (qualifier=Qualifier)?;

Queue: 'queue' name=STRING (qualifier=Qualifier)?;
	
SCA:
	{SCA} 
	'SCA' (name=STRING)? '{'
		(qualifiers+=Qualifier)*
		(publisher=Publisher)?
		(provider=Provider)?
		('promote' promote=STRING )?
		('reference' reference=STRING (isMultipleRef?='[]')? )?
	'}' ;

FILE: 
	'FILE' '{'
		(qualifiers+=Qualifier)*
		url=STRING accessType=ReadWrite ('interval' pollIntervall=STRING)?
	'}';

FTP: 
	'FTP' '{' 
		(qualifiers+=Qualifier)*
		'access' accessType=ReadWrite ('interval' pollIntervall=STRING)?
	'}';

enum ReadWrite : read|write;

Policy: LogPolicy | SecurityPolicy;

LogPolicy: 'logging policy' logPolicy=LogPolicyKind ;

SecurityPolicy : AuthenticationPolicy | AuthorizationPolicy | SigningPolicy | EncryptionPolicy;

AuthenticationPolicy : 
	'authn policy' (name=ID)? (optional?='optional')? '{'
		'auth tokens' '{'
			(authTokens+=AuthToken)+
		'}'
		'hash algorithms' '{'
			(hashAlgorithms+=HashAlgorithm)*
		'}'
	'}';
	
AuthToken : (optional?='optional')? kind=AuthTokenKind ;

HashAlgorithm : (optional?='optional')? (useBase64?="Base64-encoded")? kind=HashAlgKind ;

enum HashAlgKind : MD5 | SHA1 | SHA256 | PlainText;

AuthorizationPolicy : 'authorization rolicy';

SigningPolicy : 'signing policy';

EncryptionPolicy : 'encryption policy';

enum AuthTokenKind: UsernamePassword | SAML | SAML2 | Kerberos;

enum LogPolicyKind: NONE | HEADER | ALL;
