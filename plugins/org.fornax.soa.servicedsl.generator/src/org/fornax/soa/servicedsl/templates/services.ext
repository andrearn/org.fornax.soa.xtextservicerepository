import sOABaseDsl;
import sOAProfileDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::basedsl::version::versionQualifying;

extension org::fornax::soa::servicedsl::domain::splitting;
extension org::fornax::soa::servicedsl::query::exceptions;
extension org::fornax::soa::servicedsl::query::types;

extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::domains;
extension org::fornax::soa::servicedsl::templates::types;


DomainNamespace getSubdomain (serviceDsl::Service s) : DomainNamespace.isInstance (s.eContainer) ? s.eContainer : null;

String toTargetNamespace (Object svc) : "";
String toTargetNamespace (Service svc) : 
	svc.eContainer.toUnversionedNamespace() + 
	"/" + svc.name + "/" + svc.toVersionPostfix() + "/";
	
String toVersionPostfix (Service svc) :
	svc.version != null ? svc.version.toVersionPostfix() : toDefaultVersionPostfix();

String toServiceName (Service svc) : svc.name;
String toBindingName (Service svc) : svc.toServiceName() + "SOAP";

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getImportedSubdomains (Service svc) : 
	svc.operations.parameters.type.select(e| VersionedTypeRef.isInstance(e)).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace().union(
	svc.operations.return.type.select(e| VersionedTypeRef.isInstance(e)).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace()).union(
	svc.operations.throws.getLatestMatchingException().reject(e|e==null).createVersionedDomainNamespace()).toSet();

String getWsdlFilename(Service s) : s.eContainer.getFileNameFragment() + "-v" + s.version.toMajorVersionNumber() + ".wsdl";


boolean operationsUseExtendableParameters (sOAProfileDsl::SOAProfile p) : p.designRules != null && p.designRules.serviceDefPolicy != null && p.designRules.serviceDefPolicy.extendableParameters ? true : false;		
boolean operationsUseExtendableXMLAttributes (sOAProfileDsl::SOAProfile p) : p.designRules != null && p.designRules.serviceDefPolicy != null && p.designRules.serviceDefPolicy.extendableXMLAttributes ? true : false;		
