«IMPORT sOABaseDsl»
«IMPORT serviceDsl»

«EXTENSION org::fornax::soa::basedsl::common»
«EXTENSION org::fornax::soa::basedsl::version::versionMatching»
«EXTENSION org::fornax::soa::basedsl::version::versionQualifying»
«EXTENSION org::fornax::soa::servicedsl::domain::splitting»
«EXTENSION org::fornax::soa::servicedsl::templates::common»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::domains»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::types»
«EXTENSION org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::TypesByLifecycleStateFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::TypesByMajorVersion»
«EXTENSION org::fornax::soa::servicedsl::query::namespace::subnamespaces»
«EXTENSION org::fornax::soa::servicedsl::query::headers»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«REM»
	CARTRIDGE ENTRYPOINT for generation message headers defined in the give SOAProfile

	An XSD for each TechnicalNamespace of all parameters of all message headers defined in
	the SOAProfile will be generated
«ENDREM»
«DEFINE MessageHeaderXSD FOR sOAProfileDsl::SOAProfile»
«FOREACH messaging.messageHeaders AS h»
	«EXPAND MessageHeaderXSD (this, h) FOREACH h.parameters.type.typeSelect(sOAProfileDsl::VersionedTypeRef).type.eContainer.typeSelect(sOAProfileDsl::TechnicalNamespace).toSet()»
«ENDFOREACH»
«ENDDEFINE»

«REM»
	CARTRIDGE ENTRYPOINT for generation message headers defined in the give SOAProfile

	An XSD for each TechnicalNamespace of all parameters of all message headers defined in
	the SOAProfile will be generated
	Prefixes all imports with given registryBaseUrl. Referenced imported XSDs must be
	available under the calculated URL
«ENDREM»
«DEFINE MessageHeaderXSD (String registryBaseUrl) FOR sOAProfileDsl::SOAProfile»
«FOREACH messaging.messageHeaders AS h»
	«EXPAND MessageHeaderXSD (this, registryBaseUrl, h) FOREACH h.parameters.type.typeSelect(sOAProfileDsl::VersionedTypeRef).type.eContainer.typeSelect(sOAProfileDsl::TechnicalNamespace).toSet()»
«ENDFOREACH»
«ENDDEFINE»

«DEFINE MessageHeaderXSD (sOAProfileDsl::SOAProfile profile, sOAProfileDsl::MessageHeader header) FOR sOAProfileDsl::TechnicalNamespace»
	«EXPAND MessageHeaderXSD (profile, header) FOREACH toVersionedDomainNamespaces()»
«ENDDEFINE»

«DEFINE MessageHeaderXSD (sOAProfileDsl::SOAProfile profile, String registryBaseUrl, sOAProfileDsl::MessageHeader header) FOR sOAProfileDsl::TechnicalNamespace»
	«EXPAND MessageHeaderXSD (profile, registryBaseUrl, header) FOREACH toVersionedDomainNamespaces()»
«ENDDEFINE»


«DEFINE MessageHeaderXSD (sOAProfileDsl::SOAProfile profile, sOAProfileDsl::MessageHeader header) FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
«FILE getFileNameFragment() + ".xsd"-»<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:tns="«toNamespace()»"
	«EXPAND NamespaceDeclaration FOREACH allImportedVersionedNS ().reject(e|e.subdomain == subdomain && e.version.toMajorVersionNumber() == version.toMajorVersionNumber())-» 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:jxb="http://java.sun.com/xml/ns/jaxb"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	targetNamespace="«toNamespace()»"
	>
	«EXPAND ImportDeclaration FOREACH allImportedVersionedNS().reject(e|e.subdomain == subdomain && e.version.toMajorVersionNumber() == version.toMajorVersionNumber())-» 	
	«IF sOAProfileDsl::TechnicalNamespace.isInstance(subdomain)-»
		«EXPAND ComplexType(this, profile, header) FOREACH ((sOAProfileDsl::TechnicalNamespace) subdomain).types.typeSelect(sOAProfileDsl::Class).select (e|e.version.version.toMajorVersionNumber() == version.toMajorVersionNumber())-»
		«EXPAND SimpleType (profile) FOREACH ((sOAProfileDsl::TechnicalNamespace) subdomain).types.typeSelect(sOAProfileDsl::Enumeration).select (e|e.isLatestMatchingType (version.toMajorVersionNumber().asInteger() ))-»
		«REM»«EXPAND FaultType(this) FOREACH ((SubNamespace) subdomain).exceptions.select (e|e.isLatestMatchingException (version.toMajorVersionNumber().asInteger(), minState))-»«ENDREM»
	«ENDIF»
</xsd:schema>
«ENDFILE»
«ENDDEFINE»

«DEFINE MessageHeaderXSD (sOAProfileDsl::SOAProfile profile, String registryBaseUrl, sOAProfileDsl::MessageHeader header) FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
«FILE getFileNameFragment() + ".xsd"-»<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:tns="«toNamespace()»"
	«EXPAND NamespaceDeclaration FOREACH allImportedVersionedNS ().reject(e|e.subdomain == subdomain && e.version.toMajorVersionNumber() == version.toMajorVersionNumber())-» 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	elementFormDefault="qualified"
	attributeFormDefault="unqualified"
	targetNamespace="«toNamespace()»"
	>
	«EXPAND ImportDeclaration (registryBaseUrl) FOREACH allImportedVersionedNS().reject(e|e.subdomain == subdomain && e.version.toMajorVersionNumber() == version.toMajorVersionNumber())-» 	
	«IF sOAProfileDsl::TechnicalNamespace.isInstance(subdomain)-»
		«EXPAND ComplexType(this, profile, header) FOREACH ((sOAProfileDsl::TechnicalNamespace) subdomain).types.typeSelect(sOAProfileDsl::Class).select (e|e.version.version.toMajorVersionNumber() == version.toMajorVersionNumber())-»
		«EXPAND SimpleType (profile) FOREACH ((sOAProfileDsl::TechnicalNamespace) subdomain).types.typeSelect(sOAProfileDsl::Enumeration).select (e|e.isLatestMatchingType (version.toMajorVersionNumber().asInteger() ))-»
		«REM»«EXPAND FaultType(this) FOREACH ((SubNamespace) subdomain).exceptions.select (e|e.isLatestMatchingException (version.toMajorVersionNumber().asInteger(), minState))-»«ENDREM»
	«ENDIF»
</xsd:schema>
«ENDFILE»
«ENDDEFINE»


«DEFINE NamespaceDeclaration FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
	xmlns:«toPrefix() + version.toMajorVersionNumber()»="«toNamespace()»"
«ENDDEFINE»

«DEFINE ImportDeclaration FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
	<xsd:import schemaLocation="«getRegisteredUrl (null)».xsd"
		namespace="«toNamespace()»"></xsd:import>
«ENDDEFINE»
«DEFINE ImportDeclaration (String registryBaseUrl) FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
	<xsd:import schemaLocation="«getRegisteredUrl (registryBaseUrl)».xsd"
		namespace="«toNamespace()»"></xsd:import>
«ENDDEFINE»


«DEFINE ComplexType(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs, sOAProfileDsl::SOAProfile profile, sOAProfileDsl::MessageHeader header) FOR sOAProfileDsl::Class»
    <xsd:complexType name="«name»">
    	<xsd:annotation>
    		<xsd:documentation>
    			<![CDATA[Version:	«version.toVersionNumber()»
				«IF doc != null-»
				
    			«doc.stripCommentBraces().trim()»
				«ENDIF-» 
				]]>   			
    		</xsd:documentation>
    	</xsd:annotation>
    	
    	«IF superClass != null-»
    	<xsd:complexContent>
    		<xsd:extension base="«superClass.getTypeNameRef(currNs)»">
		    	«EXPAND PropertySequence(currNs, profile)»
    		</xsd:extension>
    	</xsd:complexContent>
    	«ELSE-»
	    	«EXPAND PropertySequenceWithAny(currNs, profile, header)»
	    	«IF header.extendableXMLAttributes-»
			<xsd:anyAttribute namespace="##any"/>
	    	«ENDIF»
    	«ENDIF-»
    </xsd:complexType>
«ENDDEFINE»

«DEFINE PropertySequenceWithAny(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs, sOAProfileDsl::SOAProfile profile, sOAProfileDsl::MessageHeader header) FOR sOAProfileDsl::Class»
    	<xsd:sequence>
    		«EXPAND Property (currNs, profile) FOREACH properties.typeSelect(sOAProfileDsl::Property)-»
    		«IF header.extendableProperties-»
			<xsd:any maxOccurs="unbounded" minOccurs="0" namespace="http://www.w3.org/2001/XMLSchema ##local"
				processContents="skip"/>
    		«ENDIF»
    	</xsd:sequence>
    	«IF !properties.typeSelect(sOAProfileDsl::Attribute).isEmpty-»
    	
   		«EXPAND Property (currNs, profile) FOREACH properties.typeSelect(sOAProfileDsl::Attribute)-»
    	«ENDIF-»
«ENDDEFINE»

«DEFINE PropertySequence(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs, sOAProfileDsl::SOAProfile profile) FOR sOAProfileDsl::Class»
    	<xsd:sequence>
    		«EXPAND Property (currNs, profile) FOREACH properties.typeSelect(sOAProfileDsl::Property)-»
    	</xsd:sequence>
    	«IF !properties.typeSelect(sOAProfileDsl::Attribute).isEmpty-»
    	
   		«EXPAND Property (currNs, profile) FOREACH properties.typeSelect(sOAProfileDsl::Attribute)-»
    	«ENDIF-»
«ENDDEFINE»

«DEFINE SimpleType (sOAProfileDsl::SOAProfile profile) FOR sOAProfileDsl::Enumeration»
    <xsd:simpleType name="«name»">
    	<xsd:annotation>
    		<xsd:documentation>
    			<![CDATA[Version:	«version.toVersionNumber()»
    			
				«IF doc != null-»
				
    			«doc.stripCommentBraces().trim()»
				«ENDIF-» 
				]]>   			
       		</xsd:documentation>
    	</xsd:annotation>
    	<xsd:restriction base="xsd:string">
    		«EXPAND EnumLiteral (profile) FOREACH literals-»
    	</xsd:restriction>
    </xsd:simpleType>
«ENDDEFINE»


«DEFINE Property(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs, sOAProfileDsl::SOAProfile profile) FOR sOAProfileDsl::Property-»
	«IF doc == null-»
			<xsd:element name="«name»" «IF optional»minOccurs="0"«ENDIF» «IF type.isMany()»maxOccurs="unbounded"«ENDIF» type="«type.getTypeNameRef(currNs)»" />
	«ELSE-»		
			<xsd:element name="«name»" «IF optional»minOccurs="0"«ENDIF» «IF type.isMany()»maxOccurs="unbounded"«ENDIF» type="«type.getTypeNameRef(currNs)»" >
		    	<xsd:annotation>
		    		<xsd:documentation>
		    			<![CDATA[«doc.stripCommentBraces().trim()»]]>
		    		</xsd:documentation>
		    	</xsd:annotation>
			</xsd:element>
	«ENDIF»
«ENDDEFINE»
«DEFINE Property(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs, sOAProfileDsl::SOAProfile profile) FOR sOAProfileDsl::Attribute-»
	«IF doc == null-»
	   	<xsd:attribute name="«name»" «IF optional»use="optional"«ENDIF» type="«type.getTypeNameRef(currNs)»" />
	«ELSE-»		
	   	<xsd:attribute name="«name»" «IF optional»use="optional"«ENDIF» type="«type.getTypeNameRef(currNs)»" >
	    	<xsd:annotation>
	    		<xsd:documentation>
	    			<![CDATA[«doc.stripCommentBraces().trim()»]]>
	    		</xsd:documentation>
	    	</xsd:annotation>
	   	</xsd:attribute>
	«ENDIF»
«ENDDEFINE»


«DEFINE EnumLiteral (sOAProfileDsl::SOAProfile profile) FOR sOAProfileDsl::EnumLiteral-»
    		<xsd:enumeration value="«name»"/>
«ENDDEFINE»