import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::basedsl::version::versionQualifying;

extension org::fornax::soa::servicedsl::domain::splitting;
extension org::fornax::soa::servicedsl::query::exceptions;
extension org::fornax::soa::servicedsl::query::type::BusinessObjectQueries;
extension org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder;
extension org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByLifecycleStateFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByMajorVersion;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;

extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::xsd::domains;

extension org::eclipse::xtend::util::stdlib::io;


/*
 *	Return the XSD type name for a type reference including it's derived namespace prefix
 */
String getTypeNameRef (TypeRef t) : 
	null;
String getTypeNameRef (sOAProfileDsl::TypeRef t) : 
	null;
	
String getTypeNameRef (DataTypeRef t) : 
	t.type.getTypeNameRef();
	
String getTypeNameRef (sOAProfileDsl::DataTypeRef t) : 
	t.type.getTypeNameRef();

String getTypeNameRef (sOAProfileDsl::AttributeDataTypeRef t) : 
	t.type.getTypeNameRef();
//	t.getLatestMatchingType () .getTypeNameRef();
	
String getTypeNameRef (VersionedTypeRef t) : 
	t.type.getSubdomain() != null ?
		(t.getOwnerSubdomain() == t.type.getSubdomain()
		 && t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		 && ! Service.isInstance(t.getStatefulOwner()) ?
			"tns" :
			t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber()
		) + ":" +t.type.name
	:
		t.type.name;
		
String getTypeNameRef (sOAProfileDsl::VersionedTypeRef t) : 
	t.type.getSubdomain() != null ?
		(t.getOwnerSubdomain() == t.type.getSubdomain()
		 && t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		?
			"tns" :
			t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber()
		) + ":" +t.type.name
	:
		t.type.name;
	
String getTypeNameRef (BusinessObjectRef t) : 
	t.type.getSubdomain() != null ?
		(t.getOwnerSubdomain() == t.type.getSubdomain()
		 && t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		 && ! Service.isInstance(t.getStatefulOwner()) ?
			"tns" :
			t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber()
		) + ":" +t.type.name
	:
		t.type.name;
		
String getTypeNameRef (EnumTypeRef t) : 
	t.type.getSubdomain() != null ?
		(t.getOwnerSubdomain() == t.type.getSubdomain()
		 && t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		 && ! Service.isInstance(t.getStatefulOwner()) ?
			"tns" : 
			t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber()
		) + ":" +t.type.name
	:
		t.type.name;
	
String getExceptionNameRef (ExceptionRef t) : 
	t.exception.getSubdomain() != null ?
		(t.getOwnerSubdomain() == t.exception.getSubdomain()
		 && t.getOwnerVersion().toMajorVersionNumber() == t.exception.version.toMajorVersionNumber()
		 && ! Service.isInstance(t.getStatefulOwner()) ?
			"tns" : 
			t.exception.getSubdomain().getShortName() + t.exception.version.toMajorVersionNumber()
		) + ":" +t.exception.toTypeName()
	:
		t.exception.toTypeName();
	

String getTypeNameRef (TypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : null;
String getTypeNameRef (sOAProfileDsl::TypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : null;

String getTypeNameRef (DataTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currentDomNs) : 
	t.getLatestMatchingType () .getTypeNameRef();

String getTypeNameRef (sOAProfileDsl::DataTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currentDomNs) : 
	t.getLatestMatchingType () .getTypeNameRef();
	
String getTypeNameRef (sOAProfileDsl::AttributeDataTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currentDomNs) : 
	t.getLatestMatchingType () .getTypeNameRef();
	
String getTypeNameRef (VersionedTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toUnversionedNamespace() == currNs.subdomain.toUnversionedNamespace()  
		&& t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		&& ! Service.isInstance(t.getStatefulOwner()) ?
		"tns:" +t.type.name
	:
		t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber() + ":" +t.type.name;
	
String getTypeNameRef (sOAProfileDsl::VersionedTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toUnversionedNamespace() == currNs.subdomain.toUnversionedNamespace()  
		&& t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()?
		"tns:" +t.type.name
	:
		t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber() + ":" +t.type.name;
	
String getTypeNameRef (BusinessObjectRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toUnversionedNamespace() == currNs.subdomain.toUnversionedNamespace()
		&& t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		&& ! Service.isInstance(t.getStatefulOwner()) ?
		"tns:" +t.type.name
	:
		t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber() + ":" +t.type.name;
		
String getTypeNameRef (EnumTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toUnversionedNamespace() == currNs.subdomain.toUnversionedNamespace()  
		&& t.getOwnerVersion().toMajorVersionNumber() == t.type.version.toMajorVersionNumber()
		&& ! Service.isInstance(t.getStatefulOwner()) ?
		"tns:" +t.type.name
	:
		t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber() + ":" +t.type.name;

String getTypeNameRef (serviceDsl::Type t) : "";
String getTypeNameRef (sOAProfileDsl::DataType t) :
 	switch (t.name) {
 		case "attachment":		"xsd:base64Binary"
 		case "binary":			"xsd:hexBinary"
 		case "base64Binary":	"xsd:base64Binary"
 		case "BigInteger":		"xsd:decimal"
 		case "BigDecimal":		"xsd:decimal"
 		case "char":			"xsd:string"
 		case "datetime":		"xsd:dateTime"
 		case "Object":			"xsd:anyType"
		default : "xsd:" + t.name
	};

String getFullTypeNameRef (serviceDsl::TypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : null;

String getFullTypeNameRef (serviceDsl::DataTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currentDomNs) : 
	t.getLatestMatchingType () .getFullTypeNameRef();
	
String getFullTypeNameRef (sOAProfileDsl::DataTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currentDomNs) : 
	t.getLatestMatchingType () .getFullTypeNameRef();
	
String getFullTypeNameRef (VersionedTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toNamespace() + t.type.name;
	
String getFullTypeNameRef (BusinessObjectRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toNamespace() + t.type.name;
		
String getFullTypeNameRef (EnumTypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toNamespace() + t.type.name;

String getFullTypeNameRef (serviceDsl::Type t) : "";
String getFullTypeNameRef (sOAProfileDsl::DataType t) :
 	switch (t.name) {
 		case "attachment":		"xsd:base64Binary"
 		case "binary":			"xsd:hexBinary"
 		case "base64Binary":	"xsd:base64Binary"
 		case "BigInteger":		"xsd:decimal"
 		case "BigDecimal":		"xsd:decimal"
 		case "char":			"xsd:string"
 		case "datetime":		"xsd:dateTime"
 		case "Object":			"xsd:anyType"
		default : "xsd:" + t.name
	};
	
boolean isAttachment (TypeRef t) : false;
boolean isAttachment (DataTypeRef t) :
	switch (t.type.name) {
		case "base64Binary": 	true
		case "attachment":		true
		default:				false
	};
 

/*
 * Resolve the type name of weak type reference, i.e. return the type name referenced type's businessKey
 */ 
String getWeakRefType(serviceDsl::TypeRef t) : t.getTypeNameRef();
String getWeakRefType(serviceDsl::VersionedTypeRef t) : (BusinessObject.isInstance(t.getLatestMatchingType())) ? ((BusinessObject)t.getLatestMatchingType()).properties.select(e|e.isBusinessKey).typeSelect(Attribute).get(0).type.getTypeNameRef() : t.getTypeNameRef();
String getWeakRefType(serviceDsl::BusinessObjectRef t) : ((BusinessObject)t.getLatestMatchingType()).properties.select(e|e.isBusinessKey).typeSelect(Attribute).get(0).type.getTypeNameRef();
String getWeakRefKeyAttr(serviceDsl::TypeRef t) : null;
String getWeakRefKeyAttr(serviceDsl::BusinessObjectRef t) : ((BusinessObject)t.getLatestMatchingType()).properties.select(e|e.isBusinessKey).typeSelect(Attribute).get(0).name;

String getWeakRefType(serviceDsl::TypeRef t, LifecycleState minState) : t.getTypeNameRef();
String getWeakRefType(serviceDsl::VersionedTypeRef t, LifecycleState minState) : 
	(BusinessObject.isInstance(t.getLatestMatchingType(minState)) && 
	! ((BusinessObject)t.getLatestMatchingType(minState)).getAllVisibleProperties(minState).select(e|e.isBusinessKey).typeSelect(Attribute).isEmpty) ?
 		((BusinessObject)t.getLatestMatchingType(minState)).getAllVisibleProperties(minState).select(e|e.isBusinessKey).typeSelect(Attribute).first().type.getTypeNameRef() 
 	: t.getTypeNameRef();
String getWeakRefType(serviceDsl::BusinessObjectRef t, LifecycleState minState) : 
	! ((BusinessObject)t.getLatestMatchingType(minState)).getAllVisibleProperties(minState).select(e|e.isBusinessKey).typeSelect(Attribute).isEmpty ?
		((BusinessObject)t.getLatestMatchingType(minState)).getAllVisibleProperties(minState).select(e|e.isBusinessKey).typeSelect(Attribute).first().type.getTypeNameRef()
	: null;
String getWeakRefKeyAttr(serviceDsl::TypeRef t, LifecycleState minState) : null;
String getWeakRefKeyAttr(serviceDsl::BusinessObjectRef t, LifecycleState minState) : 
	! ((BusinessObject)t.getLatestMatchingType(minState)).getAllVisibleProperties(minState).select(e|e.isBusinessKey).typeSelect(Attribute).isEmpty ?
		((BusinessObject)t.getLatestMatchingType(minState)).getAllVisibleProperties(minState).select(e|e.isBusinessKey).typeSelect(Attribute).first().name
	: null;
	
	
String getExceptionNameRef (ExceptionRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.toNamespace() == currNs.subdomain.toNamespace() && currNs.version.toVersion().versionMatches(t.version) ?
		"tns:" +t.exception.toTypeName()
	:
		t.exception.getSubdomain().getShortName() + t.exception.getSubdomain().version.toMajorVersionNumber() + ":" +t.exception.toTypeName();
	
	
boolean isMany (TypeRef t) : false;
boolean isMany (sOAProfileDsl::TypeRef t) : false;
boolean isMany (DataTypeRef t) : t.many;
boolean isMany (sOAProfileDsl::DataTypeRef t) : false;
boolean isMany (BusinessObjectRef t) : false;
boolean isMany (VersionedTypeRef t) : t.many;
boolean isMany (sOAProfileDsl::VersionedTypeRef t) : t.many;


String getXsdFilename (BusinessObject c) : c.getSubdomain().getFileNameFragment() + "-v" + c.version.toMajorVersionNumber() + ".xsd";


/*
 *	Get the namespaces a given namespace (or element declared in that namespace) imports
 *  splitting the resultingnamespace with regard to their major versions
 */
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getImportedSubdomains (Object s) : null;

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getImportedSubdomains (org::fornax::soa::servicedsl::VersionedDomainNamespace s) : ((SubNamespace)s.subdomain).getImportedSubdomains(); 
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getImportedSubdomains (SubNamespace s) :
	// all refs from a BO property to a BO  
	s.types.typeSelect(BusinessObject).properties.type.typeSelect(VersionedTypeRef).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace().
	// all refs from a BO it's superBO  
	union(s.types.typeSelect(BusinessObject).reject(e|e.superBusinessObject == null).superBusinessObject.getLatestMatchingType().createVersionedDomainNamespace()).
	// all refs from exceptions to their super exceptions
	union(s.exceptions.reject(e|e.superException == null).superException.getLatestMatchingException().createVersionedDomainNamespace());

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getImportedSubdomains (List[TypeRef] c) : 
	c.getLatestMatchingType().createVersionedDomainNamespace().toSet();
	

private cached String toNamespace (TypeRef t) : null;
private cached String toNamespace (VersionedTypeRef t) : 
	t.type.eContainer.toUnversionedNamespace()+"/"+((VersionedType)t.getLatestMatchingType()).version.toVersionPostfix() + "/";
private cached String toNamespace (BusinessObjectRef t) : 
	t.type.eContainer.toUnversionedNamespace()+"/"+((BusinessObject)t.getLatestMatchingType()).version.toVersionPostfix() + "/";
private cached String toNamespace (EnumTypeRef t) : 
	t.type.eContainer.toUnversionedNamespace()+"/"+((Enumeration)t.getLatestMatchingType()).version.toVersionPostfix() + "/";
private cached String toNamespace (ExceptionRef t) : 
	t.exception.eContainer.toUnversionedNamespace()+"/"+((Exception)t.getLatestMatchingException()).version.toVersionPostfix() + "/";


String toTypeName (Exception e) :
	e.name.endsWith("Exception") ?
		e.name.replaceAll("Exception", "Fault")
	: (
		e.name.endsWith("Fault") ?
			e.name
		:
			e.name + "Fault"
	);


boolean typesUseExtendableXMLAttributes (sOAProfileDsl::SOAProfile p) : p.designRules != null && p.designRules.typeDefPolicy != null && p.designRules.typeDefPolicy.extendableXMLAttributes ? true : false;
boolean typesUseExtendableProperties (sOAProfileDsl::SOAProfile p) : p.designRules != null && p.designRules.typeDefPolicy != null && p.designRules.typeDefPolicy.extendableProperties ? true : false;
	
