«IMPORT sOABaseDsl»
«IMPORT serviceDsl»

«EXTENSION org::fornax::soa::basedsl::common»
«EXTENSION org::fornax::soa::basedsl::version::versionQualifying»

«EXTENSION org::fornax::soa::servicedsl::query::exceptions»
«EXTENSION org::fornax::soa::servicedsl::query::headers»
«EXTENSION org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::TypesByLifecycleStateFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::TypesByMajorVersion»
«EXTENSION org::fornax::soa::servicedsl::query::services»
«EXTENSION org::fornax::soa::servicedsl::query::namespace::namespaceImports»

«EXTENSION org::fornax::soa::servicedsl::templates::common»
«EXTENSION org::fornax::soa::servicedsl::templates::webservice::services»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::domains»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::types»


«REM»
	CARTRIDGE ENTRYPOINT for generation of abstract wrapped  WSDLs
	Abstract WSDLs only define the abstract interface of a service. The binding is declared
	in a separate WSDL that imports this abstract WSDL
	
	A WSDL for each Service in the given SubNamespace matching the given minimal LifecycleState
	will be generated. For each major version of a service WSDL is generated for the latest minor
	version in that major version matching the minimal Lifecycle constraint is be generated
«ENDREM»
«DEFINE WrappedWSDL(LifecycleState minState, sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR Service»
	«EXPAND WrappedWSDL (this.getSubdomain(), minState, profile, registryBaseUrl)»
«ENDDEFINE»

«DEFINE WrappedWSDL(SubNamespace subDom, LifecycleState minState, sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR Service»
«ENDDEFINE»

«DEFINE WrappedWSDL(DomainNamespace subDom, LifecycleState minState, sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR Service»
«EXPAND org::fornax::soa::servicedsl::templates::xsd::OperationWrapperXSD::OperationWrappers (subDom, minState, profile, registryBaseUrl) FOR this»
«FILE getWrappedWSDLFileName()»<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="«toWrapperServiceTargetNamespace()»"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	xmlns:jaxws="http://java.sun.com/xml/ns/jaxws"
	name="«name»" 
	targetNamespace="«toWrapperServiceTargetNamespace()»">
	<wsdl:documentation>
		Version «version.toVersionNumber()»
		Lifecycle state: «state.toString()»
		
		«doc.trim().stripCommentBraces()»
	</wsdl:documentation>
	
	«EXPAND Types(minState, profile, registryBaseUrl)-»
	«EXPAND Messages FOREACH operations-»
	«EXPAND FaultMessages(operations.throws) FOREACH operations.throws.exception.name.toSet()»
	«EXPAND PortType»
</wsdl:definitions>
«ENDFILE»
«ENDDEFINE»

«DEFINE WrappedWSDL(InternalNamespace subDom, LifecycleState minState, sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR Service»
«EXPAND org::fornax::soa::servicedsl::templates::xsd::OperationWrapperXSD::OperationWrappers (subDom, minState, profile, registryBaseUrl) FOR this»
«FILE subDom.getFileNameFragment() + "-" + name + "-" + version.toVersionPostfix() + "Wrapped.wsdl"»<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="«toWrapperServiceTargetNamespace()»"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
«REM»	
	xmlns:jaxws="http://java.sun.com/xml/ns/jaxws"
«ENDREM»
	name="«name»" 
	targetNamespace="«toWrapperServiceTargetNamespace()»">
	<wsdl:documentation>
		<![CDATA[Version «version.toVersionNumber()»
		Lifecycle state: «state.toString()»
		
		«doc.trim().stripCommentBraces()»]]>
	</wsdl:documentation>
	
	«EXPAND Types(minState, profile, registryBaseUrl)-»
	«EXPAND Messages FOREACH operations-»
	«EXPAND FaultMessages(operations.throws) FOREACH operations.throws.exception.name.toSet()»
	«EXPAND PortType»
</wsdl:definitions>
«ENDFILE»
«ENDDEFINE»

«DEFINE Types(LifecycleState minState, sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR Service»
	<wsdl:types>
		<xsd:schema targetNamespace="«toWrapperServiceTargetNamespace()»"
			«FOREACH importedVersionedNS(version.toMajorVersionNumber(), minState) AS imp-»
			xmlns:«imp.toPrefix()+imp.version.toMajorVersionNumber()»="«imp.toNamespace()»"
			«ENDFOREACH-»
			xmlns:svc="«toWrapperTargetNamespace()»"
			elementFormDefault="qualified"
			attributeFormDefault="unqualified"
		>
			«FOREACH importedVersionedNS(version.toMajorVersionNumber(), minState) AS imp-»
			<xsd:import schemaLocation="«imp.getRegisteredUrl (registryBaseUrl)».xsd"
				namespace="«imp.toNamespace()»"/>
			«ENDFOREACH-»
			<xsd:import schemaLocation="«this.getRegisteredOperationWrapperUrl (registryBaseUrl)»"
				namespace="«toWrapperTargetNamespace()»"/>
			«EXPAND OperationWrapperTypes (profile) FOREACH operations»
			«EXPAND OperationFaultWrapperTypes(operations.throws) FOREACH operations.throws.exception.name.toSet()»
		</xsd:schema>
	</wsdl:types>
«ENDDEFINE»

«DEFINE OperationWrapperTypes (sOAProfileDsl::SOAProfile profile) FOR Operation»
			<xsd:element name="«name»">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="request" type="svc:«toOperationWrapperRequestType()»"/>
    				</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
			<xsd:element name="«name»Response">
				<xsd:complexType>
					<xsd:sequence>
						<xsd:element name="response" type="svc:«toOperationWrapperResponseType()»"/>
					</xsd:sequence>
				</xsd:complexType>
			</xsd:element>
«ENDDEFINE»

«DEFINE OperationFaultWrapperTypes(List[ExceptionRef] exceptions) FOR String-»
	    	<xsd:element name="«exceptions.selectFirst(e|e.exception.name == this).exception.toTypeName()»" type="«exceptions.selectFirst(e|e.exception.name == this).getExceptionNameRef()»"/>
«ENDDEFINE»

«DEFINE Parameter FOR Parameter-»
						<xsd:element name="«name»" type="«type.getTypeNameRef ()»" «IF optional»minOccurs="0" «ENDIF»«IF type.isMany()»maxOccurs="unbounded"«ENDIF» «IF type.isAttachment()»«EXPAND org::fornax::soa::servicedsl::templates::xsd::XSD::AttachmentMimeFragment FOR type»«ENDIF»></xsd:element>
«ENDDEFINE»

«DEFINE Parameter FOR sOAProfileDsl::Property-»
						<xsd:element name="«name»" type="«type.getTypeNameRef ()»" «IF optional»minOccurs="0" «ENDIF»«IF type.isMany()»maxOccurs="unbounded"«ENDIF»></xsd:element>
«ENDDEFINE»

«DEFINE Parameter FOR sOAProfileDsl::MessageHeader-»
	«EXPAND Parameter FOREACH parameters-»
«ENDDEFINE»


«DEFINE Messages FOR Operation»
	<wsdl:message name="«name»Request">
		<wsdl:part element="tns:«name»" name="parameters" />
	</wsdl:message>
	<wsdl:message name="«name»Response">
		<wsdl:part element="tns:«name»Response" name="parameters" />
	</wsdl:message>
«ENDDEFINE»

«DEFINE PortType FOR Service»
	<wsdl:portType name="«name»Wrapped">
		<wsdl:documentation>
				<![CDATA[Version:	«version.toVersionNumber()»
				Lifecycle state: «state.toString()»
				«IF doc != null-»
									
				«doc.stripCommentBraces().trim()»
				«ENDIF-» ]]>   			
		</wsdl:documentation>
		«REM»
		<jaxws:class>
			<jaxws:javadoc>
				<![CDATA[Version:	«version.toVersionNumber()»
				Lifecycle state: «state.toString()»
				«IF doc != null-»
									
				«doc.stripCommentBraces().trim()»
				«ENDIF-» ]]>   			
			</jaxws:javadoc>
		</jaxws:class>
		«ENDREM»
		«EXPAND Operation FOREACH operations»
	</wsdl:portType>
«ENDDEFINE»

«DEFINE Operation FOR Operation»
		<wsdl:operation name="«name»">
			«IF doc != null-»
			<wsdl:documentation>
				<![CDATA[«doc.stripCommentBraces().trim()»]]>   			
			</wsdl:documentation>
			«REM»
				<jaxws:method>
					<jaxws:javadoc>
						<![CDATA[«doc.stripCommentBraces().trim()»]]>   			
					</jaxws:javadoc>
				</jaxws:method>
			«ENDREM»
			«ENDIF-»
			<wsdl:input message="tns:«name»Request" />
			<wsdl:output message="tns:«name»Response" />
			«EXPAND Fault»
		</wsdl:operation>
«ENDDEFINE»

«DEFINE FaultMessages(List[ExceptionRef] exceptions) FOR String»
	<wsdl:message name="«exceptions.selectFirst(e|e.exception.name == this).exception.toTypeName()»">
  		<wsdl:part name="parameters" element="tns:«exceptions.selectFirst(e|e.exception.name == this).exception.toTypeName()»"></wsdl:part>
	</wsdl:message>
«ENDDEFINE»

«DEFINE Fault FOR Operation»
	«FOREACH throws AS fault ITERATOR it-»
			<wsdl:fault name="«fault.exception.toTypeName().toFirstLower()»" message="tns:«fault.exception.toTypeName()»"></wsdl:fault>
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE Binding FOR Service»
	<wsdl:binding name="«name»SOAP"
		type="tns:«name»">
		<soap:binding style="document"
			transport="http://schemas.xmlsoap.org/soap/http" />
		«EXPAND BindingOperation FOREACH operations»
	</wsdl:binding>
«ENDDEFINE»

«DEFINE BindingOperation FOR Operation»
		<wsdl:operation name="«name»">
			<soap:operation
				soapAction="«eContainer.toNamespace() + name»" />
			<wsdl:input>
				<soap:body use="literal" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="literal" />
			</wsdl:output>
		</wsdl:operation>
«ENDDEFINE»