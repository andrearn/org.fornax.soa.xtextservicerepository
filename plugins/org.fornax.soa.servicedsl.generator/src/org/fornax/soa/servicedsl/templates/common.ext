import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::common;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::basedsl::version::versionQualifying;
extension org::fornax::soa::basedsl::lifecycle::stateMatching;




String versionRangeText(sOABaseDsl::VersionRef v) : "";
String versionRangeText(sOABaseDsl::MinVersionRef v) : ">= " + v.minVersion.toVersionNumber();
String versionRangeText(sOABaseDsl::LowerBoundRangeVersionRef v) : v.minVersion.toVersionNumber() + " to <" + v.maxVersion.toVersionNumber();
String versionRangeText(sOABaseDsl::MaxVersionRef v) : "<= " + v.maxVersion.toVersionNumber();

	
LifecycleState getOwnerMinDevState (Object o) : LifecycleState::development;
LifecycleState getOwnerMinDevState (SubNamespace ns) : ns.linkingPolicy.minDevState != null ? ns.linkingPolicy.minDevState : LifecycleState::development;
LifecycleState getOwnerMinDevState (BusinessObject o) : o.linkingPolicy.minDevState != null ? o.linkingPolicy.minDevState : o.eContainer.getOwnerMinDevState();
LifecycleState getOwnerMinDevState (serviceDsl::Enumeration o) : o.linkingPolicy.minDevState != null ? o.linkingPolicy.minDevState : o.eContainer.getOwnerMinDevState();
LifecycleState getOwnerMinDevState (Exception o) : o.linkingPolicy.minDevState != null ? o.linkingPolicy.minDevState : o.eContainer.getOwnerMinDevState();
LifecycleState getOwnerMinDevState (Service o) : o.linkingPolicy.minDevState != null ? o.linkingPolicy.minDevState : o.eContainer.getOwnerMinDevState();

LifecycleState getOwnerMinTestState (Object o) : LifecycleState::test;
LifecycleState getOwnerMinTestState (SubNamespace ns) : ns.linkingPolicy.minTestState != null ? ns.linkingPolicy.minTestState : LifecycleState::test;
LifecycleState getOwnerMinTestState (BusinessObject o) : o.linkingPolicy.minTestState != null ? o.linkingPolicy.minTestState : o.eContainer.getOwnerMinTestState();
LifecycleState getOwnerMinTestState (Enumeration o) : o.linkingPolicy.minTestState != null ? o.linkingPolicy.minTestState : o.eContainer.getOwnerMinTestState();
LifecycleState getOwnerMinTestState (Exception o) : o.linkingPolicy.minTestState != null ? o.linkingPolicy.minTestState : o.eContainer.getOwnerMinTestState();
LifecycleState getOwnerMinTestState (Service o) : o.linkingPolicy.minTestState != null ? o.linkingPolicy.minTestState : o.eContainer.getOwnerMinTestState();

LifecycleState getOwnerMinProdState (Object o) : LifecycleState::productive;
LifecycleState getOwnerMinProdState (SubNamespace ns) : ns.linkingPolicy.minProdState != null ? ns.linkingPolicy.minProdState : LifecycleState::productive;
LifecycleState getOwnerMinProdState (BusinessObject o) : o.linkingPolicy.minProdState != null ? o.linkingPolicy.minProdState : o.eContainer.getOwnerMinProdState();
LifecycleState getOwnerMinProdState (Enumeration o) : o.linkingPolicy.minProdState != null ? o.linkingPolicy.minProdState : o.eContainer.getOwnerMinProdState();
LifecycleState getOwnerMinProdState (Exception o) : o.linkingPolicy.minProdState != null ? o.linkingPolicy.minProdState : o.eContainer.getOwnerMinProdState();
LifecycleState getOwnerMinProdState (Service o) : o.linkingPolicy.minProdState != null ? o.linkingPolicy.minProdState : o.eContainer.getOwnerMinProdState();


emf::EObject getStatefulOwner (emf::EObject o) : o.eContainer != null ? o.eContainer.getStatefulOwner() : null;
emf::EObject getStatefulOwner (BusinessObject o) : o;
emf::EObject getStatefulOwner (Enumeration o) : o;
emf::EObject getStatefulOwner (Exception o) : o;
emf::EObject getStatefulOwner (Service o) : o;

emf::EObject getOwningType (emf::EObject o) : o.eContainer != null ? o.eContainer.getOwningType() : null;
emf::EObject getOwningType (sOAProfileDsl::VersionedType o) : o;


Version getOwnerVersion (emf::EObject o) : o.eContainer != null ? o.eContainer.getOwnerVersion() : null;
Version getOwnerVersion (VersionedType o) : o.version;
Version getOwnerVersion (sOAProfileDsl::VersionedType o) : o.version;
Version getOwnerVersion (Exception o) : o.version;
Version getOwnerVersion (Service o) : o.version;


LifecycleState getOwnerState (emf::EObject o) : o.eContainer != null ? o.eContainer.getOwnerState() : null;
LifecycleState getOwnerState (VersionedType o) : o.state;
LifecycleState getOwnerState (Exception o) : o.state;
LifecycleState getOwnerState (Service o) : o.state;

LifecycleState getStateByName (String state) :
	switch (state) {
	case "proposed" : 		LifecycleState::proposed
	case "defined" : 		LifecycleState::defined
	case "development" : 	LifecycleState::development
	case "test" : 			LifecycleState::test
	case "productive" : 	LifecycleState::productive
	case "deprecated" : 	LifecycleState::deprecated
	case "retired" : 		LifecycleState::retired
	default: 				LifecycleState::proposed
	};

