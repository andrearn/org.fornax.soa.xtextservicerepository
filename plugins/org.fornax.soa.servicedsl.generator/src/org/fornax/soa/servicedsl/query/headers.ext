import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::basedsl::version::versionQualifying;
extension org::fornax::soa::servicedsl::domain::splitting;
extension org::fornax::soa::servicedsl::query::namespace::namespaceImports;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;
extension org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder;
extension org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByMajorVersion;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::xsd::domains;

sOAProfileDsl::MessageHeader getBestMatchingHeader (emf::EObject o, sOAProfileDsl::SOAProfile p ) : 
	p.messaging.defaultHeader.header;
	
sOAProfileDsl::MessageHeader getBestMatchingHeader (Operation o, sOAProfileDsl::SOAProfile p ) : 
	o.messageHeader.header != null ? 
		o.messageHeader.header
	:
		o.eContainer.getBestMatchingHeader (p);
		
sOAProfileDsl::MessageHeader getBestMatchingHeader (Service s, sOAProfileDsl::SOAProfile p ) : 
	s.messageHeader.header != null ? 
		s.messageHeader.header
	:
		p.messaging.defaultHeader.header;

List[sOAProfileDsl::MessageHeader] getLatestMajorVersions (sOAProfileDsl::SOAProfile p) : p.messaging.messageHeaders;



Set[SubNamespace] allImportedSubNamespaces (Type t) : 
	t.allReferencedVersionedTypes ().getSubdomain().toSet();



Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (serviceDsl::Type t) :
	t.allReferencedVersionedTypes().createVersionedDomainNamespace().toSet();
	
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (org::fornax::soa::servicedsl::VersionedDomainNamespace s) : 
	((SubNamespace)s.subdomain).allImportedVersionedNS(s.version);

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (SubNamespace s, String nameSpaceMajorVersion) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (sOAProfileDsl::Class)
	.allReferencedVersionedTypes().createVersionedDomainNamespace();

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (sOAProfileDsl::MessageHeader t, String nameSpaceMajorVersion) :
	t.allReferencedVersionedTypes().createVersionedDomainNamespace().toSet();
	
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (sOAProfileDsl::Class t) :
	t.properties.typeSelect(sOAProfileDsl::Property).type.allReferencedVersionedTypes().createVersionedDomainNamespace().toSet();



List[serviceDsl::VersionedType] allReferencedVersionedTypes (sOABaseDsl::AbstractType t) : {};
List[serviceDsl::VersionedType] allReferencedVersionedTypes (serviceDsl::Type t) : {};

List[sOAProfileDsl::VersionedType] allReferencedVersionedTypes (sOAProfileDsl::Type t) : {};
List[sOAProfileDsl::VersionedType] allReferencedVersionedTypes (sOAProfileDsl::TypeRef t) : {};

List[sOAProfileDsl::VersionedType] allReferencedVersionedTypes (sOAProfileDsl::Class t) : 
	t.allReferencedTypeRefs ().typeSelect (sOAProfileDsl::VersionedTypeRef).selectLatestMatchingType ();	
	
List[sOAProfileDsl::VersionedType] allReferencedVersionedTypes (sOAProfileDsl::MessageHeader t) : 
	t.parameters.type.typeSelect (sOAProfileDsl::VersionedTypeRef).type
	.allReferencedTypeRefs ().typeSelect(sOAProfileDsl::VersionedTypeRef).selectLatestMatchingType ();	


List[sOAProfileDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::Type t) : {};
List[sOAProfileDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::TypeRef t) : {};

List[sOAProfileDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::VersionedType t) : 	{};

List[sOAProfileDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::Class t) : 
	t.superClass != null ? 	
		t.properties.typeSelect(sOAProfileDsl::Property).type.union({t.superClass})
		:
		t.properties.typeSelect(sOAProfileDsl::Property).type;
		
List[sOAProfileDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::MessageHeader t) : 
	t.parameters.type;




VersionedType selectLatestMatchingType (VersionedTypeRef ref) :
	ref.type.getSubdomain().types.typeSelect(VersionedType)
	.select (t|t.name == ref.type.name && t.version.versionMatches (ref.versionRef))
	.sortBy(e|e.version.version).last();
	
sOAProfileDsl::TechnicalNamespace getSubdomain (sOAProfileDsl::VersionedType c) : sOAProfileDsl::TechnicalNamespace.isInstance (c.eContainer) ? c.eContainer : null;



boolean isLatestMatchingType (sOAProfileDsl::Class t, Integer majorVersion) : 
	(getLatestMatchingClass( 
		((sOAProfileDsl::TechnicalNamespace)t.eContainer).types.typeSelect (sOAProfileDsl::Class).select (e|e.name == t.name), 
		majorVersion)
	 == t) 
	? true
	: false;
	
private sOAProfileDsl::Type getLatestMatchingClass (List[sOAProfileDsl::Class] types, Integer majorVersion) : 
	types.select (e|e.version.versionMatches (majorVersion))
	.sortBy(e|e.version.version).last();

boolean isMany (sOAProfileDsl::TypeRef t) : false;
boolean isMany (sOAProfileDsl::VersionedTypeRef t) : t.many;

String getTypeNameRef (sOAProfileDsl::TypeRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : null;
String getTypeNameRef (sOAProfileDsl::ClassRef t, org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) : 
	t.type.getSubdomain().toUnversionedNamespace() == currNs.subdomain.toUnversionedNamespace()  && currNs.version.toVersion().versionMatches(t.versionRef) ?
		"tns:" +t.type.name
	:
		t.type.getSubdomain().getShortName() + t.type.version.toMajorVersionNumber() + ":" +t.type.name;


	