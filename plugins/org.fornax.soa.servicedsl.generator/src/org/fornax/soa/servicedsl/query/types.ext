import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::domains;
extension org::fornax::soa::servicedsl::templates::types;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::subdomains;



List[serviceDsl::TypeRef] allReferencedTypeRefs (Type t) : {};
List[serviceDsl::TypeRef] allReferencedTypeRefs (BusinessObject t) : 
	t.superBusinessObject != null ? 	
		t.properties.type.union({t.superBusinessObject})
		:
		t.properties.type;
List[serviceDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::Class t) : 
	t.superClass != null ? 	
		t.properties.typeSelect(sOAProfileDsl::Property).type.union({t.superClass})
		:
		t.properties.typeSelect(sOAProfileDsl::Property).type;
		
List[serviceDsl::TypeRef] allReferencedTypeRefs (Exception t) : 
	t.properties.type;

List[serviceDsl::TypeRef] allReferencedTypeRefs (Parameter p) : 
	p.type;

List[serviceDsl::TypeRef] allReferencedTypeRefs (Operation o) : 
	o.parameters.allReferencedTypeRefs()
	.union(o.return.allReferencedTypeRefs());

List[serviceDsl::TypeRef] allReferencedTypeRefs (Service s) : 
	s.operations.allReferencedTypeRefs();



List[serviceDsl::VersionedType] allReferencedVersionedTypes (Type t, LifecycleState minState) : {};

List[serviceDsl::VersionedType] allReferencedVersionedTypes (BusinessObject t, LifecycleState minState) : 
	t.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();	

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Exception t, LifecycleState minState) : 
	t.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Parameter p, LifecycleState minState) : 
	p.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Operation o, LifecycleState minState) : 
	o.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Service s, LifecycleState minState) : 
	s.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (sOAProfileDsl::Class t) : 
	t.allReferencedTypeRefs().typeSelect(sOAProfileDsl::VersionedTypeRef).selectLatestMatchingType ();	
	



List[Type] allTypesByMajorVersion (SubNamespace s, String majorVersion) : 
	s.types.typeSelect (VersionedType).select (t|t.version.version.startsWith(majorVersion));
	
List[Type] allTypesByMajorVersion (sOAProfileDsl::Namespace s, String majorVersion) : 
	s.types.typeSelect (sOAProfileDsl::VersionedType).select (t|t.version.version.startsWith(majorVersion));

List[Type] allTypesByMajorVersion (Service s, String majorVersion) : 
	s.getSubdomain().types.typeSelect (VersionedType).select (t|t.version.version.startsWith(majorVersion));



VersionedType selectLatestMatchingType (VersionedTypeRef ref) :
	ref.type;
	
sOAProfileDsl::VersionedType selectLatestMatchingType (sOAProfileDsl::VersionedTypeRef ref) :
	ref.type;

VersionedType selectLatestMatchingType (VersionedTypeRef ref, LifecycleState minState) :
	ref.type.getSubdomain().types.typeSelect(VersionedType).reject(e| ! e.state.matchesMinStateLevel(minState))
	.select (t|t.name == ref.type.name && t.version.versionMatches (ref.versionRef))
	.sortBy(e|e.version.version).last();
	
boolean isLatestMatchingType (serviceDsl::Type t, Integer majorVersion, LifecycleState minState) : 
	false;

/*
 *		Checks if type declaration is the latest version matching the following constraint
 *		- same major version
 *      - matches a given minimal lifecycle state
 */
boolean isLatestMatchingType (VersionedType t, Integer majorVersion) : 
	(getLatestMatchingVersionedType( 
		((SubNamespace)t.eContainer).types.typeSelect (VersionedType).select (e|e.name == t.name), 
		majorVersion)
	 == t) 
	? true
	: false;
	
boolean isLatestMatchingType (sOAProfileDsl::VersionedType t, Integer majorVersion) : 
	(getLatestMatchingVersionedType( 
		((SubNamespace)t.eContainer).types.typeSelect (sOAProfileDsl::VersionedType).select (e|e.name == t.name), 
		majorVersion)
	 == t) 
	? true
	: false;
	
boolean isLatestMatchingType (VersionedType t, Integer majorVersion, LifecycleState minState) : 
	(getLatestMatchingVersionedType( 
		((SubNamespace)t.eContainer).types.typeSelect (VersionedType).select (e|e.name == t.name), 
		majorVersion, 
		minState)
	 == t) 
	? true
	: false;

boolean isLatestMatchingType (BusinessObject t, Integer majorVersion, LifecycleState minState) : 
	(getLatestMatchingBusinessObject( 
		((SubNamespace)t.eContainer).types.typeSelect (BusinessObject).select (e|e.name == t.name), 
		majorVersion, 
		minState)
	 == t) 
	? true
	: false;

boolean isLatestMatchingType (serviceDsl::Enumeration t, Integer majorVersion, LifecycleState minState) : 
	(getLatestMatchingEnumeration( 
		((SubNamespace)t.eContainer).types.typeSelect (Enumeration).select (e|e.name == t.name), 
		majorVersion, 
		minState)
	 == t) 
	? true
	: false;


private serviceDsl::Type getLatestMatchingVersionedType (List[VersionedType] types, Integer majorVersion) : 
	types.select (e|e.version.versionMatches (majorVersion) )
	.sortBy(e|e.version.version).last();

private serviceDsl::Type getLatestMatchingVersionedType (List[VersionedType] types, Integer majorVersion, LifecycleState minState) : 
	types.select (e|e.version.versionMatches (majorVersion) && e.state.matchesMinStateLevel (minState))
	.sortBy (e|e.version.version).last();
	
private serviceDsl::Type getLatestMatchingBusinessObject (List[BusinessObject] types, Integer majorVersion, LifecycleState minState) : 
	types.select (e|e.version.versionMatches (majorVersion) && e.state.matchesMinStateLevel (minState))
	.sortBy (e|e.version.version).last();
	
private serviceDsl::Type getLatestMatchingEnumeration (List[Enumeration] types, Integer majorVersion, LifecycleState minState) : 
	types.select (e|e.version.versionMatches (majorVersion) && e.state.matchesMinStateLevel (minState))
	.sortBy (e|e.version.version).last();


/*
 * 	Reference resolution
 *	find the lastest type declaration matching
 *  - the version constraint defined in the reference
 */
serviceDsl::Type getLatestMatchingType (TypeRef t) : null;

serviceDsl::Type getLatestMatchingType (serviceDsl::VersionedTypeRef t) : 
	t.type.getSubdomain ().types.select (e|e.name == t.type.name && t.type.version.versionMatches (t.versionRef))
		.typeSelect (VersionedType).sortBy (e|e.version.version).last( );

serviceDsl::Type getLatestMatchingType (serviceDsl::BusinessObjectRef t) : 
	t.type.getSubdomain ().types.select (e|e.name == t.type.name && t.type.version.versionMatches (t.versionRef))
		.typeSelect (BusinessObject).sortBy (e|e.version.version).last( );

serviceDsl::Type getLatestMatchingType (serviceDsl::EnumTypeRef t) : 
	t.type.getSubdomain ().types.select (e|e.name == t.type.name && t.type.version.versionMatches (t.versionRef))
		.typeSelect (Enumeration).sortBy (e|e.version.version).last( );

serviceDsl::Type getLatestMatchingType (serviceDsl::DataTypeRef t) : t.type ;
serviceDsl::Type getLatestMatchingType (sOAProfileDsl::DataTypeRef t) : t.type ;
serviceDsl::Type getLatestMatchingType (sOAProfileDsl::AttributeDataTypeRef t) : t.type ;


serviceDsl::Type getLatestMatchingType (TypeRef t, LifecycleState minState) : null;

serviceDsl::Type getLatestMatchingType (serviceDsl::VersionedTypeRef t, LifecycleState minState) : 
	t.type.getSubdomain ().types.select (e|e.name == t.type.name && t.type.version.versionMatches (t.versionRef) && t.type.state.matchesMinStateLevel(minState))
		.typeSelect (VersionedType).sortBy (e|e.version.version).last( );

serviceDsl::Type getLatestMatchingType (serviceDsl::BusinessObjectRef t, LifecycleState minState) : 
	t.type.getSubdomain ().types.select (e|e.name == t.type.name && t.type.version.versionMatches (t.versionRef) && t.type.state.matchesMinStateLevel(minState))
		.typeSelect (BusinessObject).sortBy (e|e.version.version).last( );

serviceDsl::Type getLatestMatchingType (serviceDsl::EnumTypeRef t, LifecycleState minState) : 
	t.type.getSubdomain ().types.select (e|e.name == t.type.name && t.type.version.versionMatches (t.versionRef) && t.type.state.matchesMinStateLevel(minState))
		.typeSelect (Enumeration).sortBy (e|e.version.version).last( );

serviceDsl::Type getLatestMatchingType (serviceDsl::DataTypeRef t, LifecycleState minState) : t.type ;

List[org::fornax::soa::serviceDsl::Type] typesWithMinState (SubNamespace ns, LifecycleState state) :
	ns.types.typeSelect(BusinessObject).select(e|e.state.matchesMinStateLevel (state)).
	union (ns.types.typeSelect (Enumeration).select(e|e.state.matchesMinStateLevel (state))).
	union (ns.types.typeSelect (DataType));
	
List[org::fornax::soa::serviceDsl::Type] typesWithMinState (sOAProfileDsl::Namespace ns, LifecycleState state) :
	ns.types.typeSelect(sOAProfileDsl::VersionedType).
	union (ns.types.typeSelect (DataType));

List[org::fornax::soa::serviceDsl::Type] typesWithMinState (Object ns, LifecycleState state) : null;

List[org::fornax::soa::serviceDsl::Type] typesWithMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.typesWithMinState (state);
	