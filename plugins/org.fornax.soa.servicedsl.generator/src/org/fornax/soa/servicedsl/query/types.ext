import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::domains;
extension org::fornax::soa::servicedsl::templates::types;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::subdomains;



List[serviceDsl::TypeRef] allReferencedTypeRefs (Type t) : {};
List[serviceDsl::TypeRef] allReferencedTypeRefs (BusinessObject t) : 
	t.superBusinessObject != null ? 	
		t.properties.type.union({t.superBusinessObject})
		:
		t.properties.type;
List[serviceDsl::TypeRef] allReferencedTypeRefs (sOAProfileDsl::Class t) : 
	t.superClass != null ? 	
		t.properties.type.union({t.superClass})
		:
		t.properties.type;
		
List[serviceDsl::TypeRef] allReferencedTypeRefs (Exception t) : 
	t.properties.type;

List[serviceDsl::TypeRef] allReferencedTypeRefs (Parameter p) : 
	p.type;

List[serviceDsl::TypeRef] allReferencedTypeRefs (Operation o) : 
	o.parameters.allReferencedTypeRefs()
	.union(o.return.allReferencedTypeRefs());

List[serviceDsl::TypeRef] allReferencedTypeRefs (Service s) : 
	s.operations.allReferencedTypeRefs();



List[serviceDsl::VersionedType] allReferencedVersionedTypes (Type t, LifecycleState minState) : {};

List[serviceDsl::VersionedType] allReferencedVersionedTypes (BusinessObject t, LifecycleState minState) : 
	t.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();	

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Exception t, LifecycleState minState) : 
	t.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Parameter p, LifecycleState minState) : 
	p.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Operation o, LifecycleState minState) : 
	o.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (Service s, LifecycleState minState) : 
	s.allReferencedTypeRefs().typeSelect(VersionedTypeRef).selectLatestMatchingType ();

List[serviceDsl::VersionedType] allReferencedVersionedTypes (sOAProfileDsl::Class t) : 
	t.allReferencedTypeRefs().typeSelect(sOAProfileDsl::VersionedTypeRef).selectLatestMatchingType ();	
	



List[Type] allTypesByMajorVersion (SubNamespace s, String majorVersion) : 
	s.types.typeSelect (VersionedType).select (t|t.version.version.startsWith(majorVersion));
	
List[Type] allTypesByMajorVersion (sOAProfileDsl::Namespace s, String majorVersion) : 
	s.types.typeSelect (sOAProfileDsl::VersionedType).select (t|t.version.version.startsWith(majorVersion));

List[Type] allTypesByMajorVersion (Service s, String majorVersion) : 
	s.getSubdomain().types.typeSelect (VersionedType).select (t|t.version.version.startsWith(majorVersion));



VersionedType selectLatestMatchingType (VersionedTypeRef ref) :
	ref.type;
	
sOAProfileDsl::VersionedType selectLatestMatchingType (sOAProfileDsl::VersionedTypeRef ref) :
	ref.type;

VersionedType selectLatestMatchingType (VersionedTypeRef ref, LifecycleState minState) :
	ref.type.getSubdomain().types.typeSelect(VersionedType).reject(e| ! e.state.matchesMinStateLevel(minState))
	.select (t|t.name == ref.type.name && t.version.versionMatches (ref.versionRef))
	.sortBy(e|e.version.version).last();
	