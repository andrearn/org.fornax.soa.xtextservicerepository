import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::domains;
extension org::fornax::soa::servicedsl::templates::types;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::subdomains;
	
List exceptionsWithMinState (Object ns, LifecycleState state) : null;


List exceptionsWithMinState (SubNamespace ns, LifecycleState state) :
	ns.exceptions.select (e|e.state.matchesMinStateLevel (state));


List exceptionsWithMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.exceptionsWithMinState (state);

	
serviceDsl::Exception getLatestMatchingException (serviceDsl::ExceptionRef t, LifecycleState minState) : 
	t.exception.getSubdomain ().exceptions.select (e|e.name == t.exception.name && t.exception.version.versionMatches (t.version) && t.exception.state.matchesMinStateLevel(minState))
		.typeSelect (Exception).sortBy (e|e.version.version).last( );

serviceDsl::Exception getLatestMatchingException (serviceDsl::ExceptionRef t) : 
	t.exception.getSubdomain ().exceptions.select (e|e.name == t.exception.name && t.exception.version.versionMatches (t.version))
		.typeSelect (Exception).sortBy (e|e.version.version).last( );


boolean isLatestMatchingException (serviceDsl::Exception t, Integer majorVersion, LifecycleState minState) : 
	(getLatestMatchingException( 
		((SubNamespace)t.eContainer).exceptions.select (e|e.name == t.name), 
		majorVersion, 
		minState)
	 == t) 
	? true
	: false;
	
private serviceDsl::Exception getLatestMatchingException (List[Exception] exceptions, Integer majorVersion, LifecycleState minState) : 
	exceptions.select (e|e.version.versionMatches (majorVersion) && e.state.matchesMinStateLevel (minState))
	.sortBy (e|e.version.version).last();
	