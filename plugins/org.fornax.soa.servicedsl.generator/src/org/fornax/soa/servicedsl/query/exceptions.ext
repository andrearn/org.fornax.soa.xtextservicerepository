import sOABaseDsl;
import serviceDsl;
import org::fornax::soa::servicedsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;
	
List exceptionsWithMinState (Object ns, LifecycleState state) : null;


List exceptionsWithMinState (SubNamespace ns, LifecycleState state) :
	ns.exceptions.select (e|e.state.matchesMinStateLevel (state));


List exceptionsWithMinState (VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.exceptionsWithMinState (state);


/**
 *	Find the latest minor version of the referenced Exceptiontype matching the 
 *	version constraint in the reference and the minimal required LifecycleState 
 */	
serviceDsl::Exception getLatestMatchingException (serviceDsl::ExceptionRef excRef, LifecycleState minState) : 
	excRef.exception.getSubdomain ().exceptions.select (e|e.name == excRef.exception.name && excRef.exception.version.versionMatches (excRef.version) && excRef.exception.state.matchesMinStateLevel (minState))
		.typeSelect (Exception).sortBy (e|e.version.version).last( );

/**
 *	Find the latest minor version of the referenced Exceptiontype matching the 
 *	version constraint in the reference. The LifecycleState of the Exception is not considered. 
 */	
serviceDsl::Exception getLatestMatchingException (serviceDsl::ExceptionRef excRef) : 
	excRef.exception.getSubdomain ().exceptions.select (e|e.name == excRef.exception.name && excRef.exception.version.versionMatches (excRef.version))
		.typeSelect (Exception).sortBy (e|e.version.version).last( );


/**
 *	Checks, whether the Exception is the latest minor version in a given major version
 *  @param exc				The Exception to checked
 *  @param majorVersion		The major version number to which minor versions should match
 */
boolean isLatestMatchingException (serviceDsl::Exception exc, Integer majorVersion, LifecycleState minState) : 
	(getLatestMatchingException( 
		((SubNamespace)exc.eContainer).exceptions.select (e|e.name == exc.name), 
		majorVersion, 
		minState)
	 == exc) 
	? true
	: false;
	
private serviceDsl::Exception getLatestMatchingException (List[Exception] exceptions, Integer majorVersion, LifecycleState minState) : 
	exceptions.select (e|e.version.versionMatches (majorVersion) && e.state.matchesMinStateLevel (minState))
	.sortBy (e|e.version.version).last();
	