import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::domains;
extension org::fornax::soa::servicedsl::templates::types;
extension org::fornax::soa::servicedsl::query::types;
extension org::fornax::soa::servicedsl::query::services;


SubNamespace getSubdomain (serviceDsl::Type t) : null;
SubNamespace getSubdomain (serviceDsl::VersionedType c) : SubNamespace.isInstance (c.eContainer) ? c.eContainer : null;
sOAProfileDsl::Namespace getSubdomain (sOAProfileDsl::VersionedType c) : sOAProfileDsl::Namespace.isInstance (c.eContainer) ? c.eContainer : null;
SubNamespace getSubdomain (serviceDsl::BusinessObject c) : SubNamespace.isInstance (c.eContainer) ? c.eContainer : null;
SubNamespace getSubdomain (serviceDsl::Enumeration e) : SubNamespace.isInstance (e.eContainer) ? e.eContainer : null;
SubNamespace getSubdomain (serviceDsl::Exception e) : SubNamespace.isInstance (e.eContainer) ? e.eContainer : null;
SubNamespace getSubdomain (serviceDsl::Service s) : SubNamespace.isInstance (s.eContainer) ? s.eContainer : null;

// TODO make this safe for cases when there is no stateful owner 
SubNamespace getOwnerSubdomain (serviceDsl::TypeRef t) : t.getStatefulOwner() != null ? t.getStatefulOwner().eContainer : null;
SubNamespace getOwnerSubdomain (serviceDsl::VersionedTypeRef c) : c.getStatefulOwner() != null ? c.getStatefulOwner().eContainer : null;
SubNamespace getOwnerSubdomain (sOAProfileDsl::VersionedTypeRef c) : c.getOwningType() != null ? c.getOwningType().eContainer : null;
SubNamespace getOwnerSubdomain (serviceDsl::BusinessObjectRef c) : c.getStatefulOwner() != null ? c.getStatefulOwner().eContainer : null;
SubNamespace getOwnerSubdomain (serviceDsl::EnumTypeRef c) : c.getStatefulOwner() != null ? c.getStatefulOwner().eContainer : null;
SubNamespace getOwnerSubdomain (serviceDsl::ExceptionRef e) : e.getStatefulOwner() != null ? e.getStatefulOwner().eContainer : null;
SubNamespace getOwnerSubdomain (serviceDsl::ServiceRef s) : s.getStatefulOwner() != null ? s.getStatefulOwner().eContainer : null;


Set[SubNamespace] allImportedSubNamespaces (Type t, LifecycleState minState) : 
	t.allReferencedVersionedTypes (minState).getSubdomain().toSet();



Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (Type t, LifecycleState minState) :
	t.allReferencedVersionedTypes(minState).createVersionedDomainNamespace().toSet();


Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (org::fornax::soa::servicedsl::VersionedDomainNamespace s, LifecycleState minState) : 
	((SubNamespace)s.subdomain).allImportedVersionedNS(s.version, minState);
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (org::fornax::soa::servicedsl::VersionedDomainNamespace s) : 
	((sOAProfileDsl::Namespace)s.subdomain).allImportedVersionedNS(s.version);

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (sOAProfileDsl::Namespace s, String nameSpaceMajorVersion) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (sOAProfileDsl::Class)
	.allReferencedVersionedTypes().createVersionedDomainNamespace();

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (SubNamespace s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
	.allReferencedVersionedTypes(minState).createVersionedDomainNamespace()
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace());

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (Service s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
		.allReferencedVersionedTypes(minState).createVersionedDomainNamespace()
	.union(s.allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union(s.allReferencedExceptions().createVersionedDomainNamespace())
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace())
	.union({s.createVersionedDomainNamespace()});
