import sOABaseDsl;
import sOAProfileDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::lifecycle::stateMatching;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::basedsl::version::versionQualifying;
extension org::fornax::soa::servicedsl::templates::common;
//extension org::fornax::soa::servicedsl::templates::domains;
//extension org::fornax::soa::servicedsl::templates::types;
extension org::fornax::soa::servicedsl::query::types;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;


List servicesWithMinState (Object ns, LifecycleState state) : null;
	
List servicesWithMinState (SubNamespace ns, LifecycleState state) :
	ns.services.select (e|e.state.matchesMinStateLevel (state));

List servicesWithMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.servicesWithMinState (state);


List[serviceDsl::ExceptionRef] allReferencedExceptionRefs (Service s) : s.operations.throws;
	
List[Exception] allExceptionsByMajorVersion (SubNamespace s, String majorVersion) : 
	s.exceptions.select (e|e.version.version.startsWith(majorVersion));
	
List[Exception] allExceptionsByMajorVersion (Service s, String majorVersion) : 
	s.getSubdomain().exceptions.select (e|e.version.version.startsWith(majorVersion));
	
List[Exception] allReferencedExceptions (Service s) : 
	s.operations.throws.exception;

List[Service] allLatestMajorVersions (List[Service] s, LifecycleState minState) :
	s.version.toMajorVersionNumber ().latestServiceByMajorVersionAndMinState (s, minState);
	
Service latestServiceByMajorVersionAndMinState (String majorVersion, List[Service] s, LifecycleState minState) :
	s.select (e|e.version.version.startsWith (majorVersion) && e.state.matchesMinStateLevel (minState)).sortBy (e|e.version.version).last();
	

Service getLatestMatchingService (ServiceRef s) :
	s.service.getSubdomain ().types.select (e|e.name == s.service.name && s.service.version.versionMatches (s.versionRef))
		.typeSelect (Service).sortBy (e|e.version).last();

boolean isLatestMatchingService (Service s, Integer majorVersion, sOABaseDsl::LifecycleState minState) : 
	(getLatestMatchingService( ((SubNamespace)s.eContainer).services.select(e|e.name == s.name), majorVersion, minState) == s) 
	? true
	: false;
		
private serviceDsl::Service getLatestMatchingService (List[Service] canditates, Integer majorVersion, sOABaseDsl::LifecycleState minState) : 
	canditates.select (e|e.version.versionMatches (majorVersion) && e.state.matchesMinStateLevel(minState)).sortBy(e|e.version).last();
	