import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::servicedsl::domain::splitting;
extension org::fornax::soa::servicedsl::query::exceptions;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder;
extension org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByLifecycleStateFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByMajorVersion;

extension org::fornax::soa::servicedsl::templates::common;


Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getImportedSubdomains (Service svc) : 
	svc.operations.parameters.type.select(e| VersionedTypeRef.isInstance(e)).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace().union(
	svc.operations.return.type.select(e| VersionedTypeRef.isInstance(e)).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace()).union(
	svc.operations.throws.getLatestMatchingException().reject(e|e==null).createVersionedDomainNamespace()).toSet();

Set[SubNamespace] allImportedSubNamespaces (Type t, LifecycleState minState) : 
	t.allReferencedVersionedTypes (minState).getSubdomain().toSet();



Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (Type t, LifecycleState minState) :
	t.allReferencedVersionedTypes(minState).createVersionedDomainNamespace().toSet();


Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (org::fornax::soa::servicedsl::VersionedDomainNamespace s, LifecycleState minState) : 
	((SubNamespace)s.subdomain).allImportedVersionedNS(s.version, minState);
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (org::fornax::soa::servicedsl::VersionedDomainNamespace s) : 
	((sOAProfileDsl::TechnicalNamespace)s.subdomain).allImportedVersionedNS(s.version);

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (sOAProfileDsl::TechnicalNamespace s, String nameSpaceMajorVersion) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (sOAProfileDsl::Class)
	.allReferencedVersionedTypes().createVersionedDomainNamespace();

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (SubNamespace s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
	.allReferencedVersionedTypes(minState).createVersionedDomainNamespace()
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace());

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] allImportedVersionedNS (Service s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
		.allReferencedVersionedTypes(minState).createVersionedDomainNamespace()
	.union(s.allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union(s.allReferencedExceptions().createVersionedDomainNamespace())
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union(s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace())
	.union({s.createVersionedDomainNamespace()});
