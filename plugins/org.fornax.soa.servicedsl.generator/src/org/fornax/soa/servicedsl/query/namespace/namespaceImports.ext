import sOABaseDsl;
import serviceDsl;
import org::fornax::soa::servicedsl;

extension org::fornax::soa::servicedsl::domain::splitting;
extension org::fornax::soa::servicedsl::query::exceptions;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;
extension org::fornax::soa::servicedsl::query::services;
extension org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder;
extension org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByLifecycleStateFinder;
extension org::fornax::soa::servicedsl::query::type::TypesByMajorVersion;

extension org::fornax::soa::servicedsl::templates::common;

extension org::eclipse::xtend::util::stdlib::io;

/*********************************************************************************
 *	Calculation of all VersionedDomainNamespaces imported by a given or derived 
 *	VersionedDomainNamespace. Transitive dependencies are not yet calculated
 */
 
/**
 *	Calculate all dependencies of the given Service version
 *	@deprecated ?
 *
 *	@param svc	The Service with it's version to calculate the imports for
 */
Set[VersionedDomainNamespace] getImportedSubdomains (Service svc) : 
	svc.operations.parameters.type.select(e| VersionedTypeRef.isInstance(e)).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace().union(
	svc.operations.return.type.select(e| VersionedTypeRef.isInstance(e)).getLatestMatchingType().reject(e|e==null).createVersionedDomainNamespace()).union(
	svc.operations.throws.getLatestMatchingException().reject(e|e==null).createVersionedDomainNamespace()).toSet();

/**
 *	Calculate all dependencies of the given Service version and LifecycleState. Dependencies must match
 *	the given minimal LifecycleState
 *	@deprecated ?
 *
 *	@param svc	The Service with it's version to calculate the imports for
 */
Set[SubNamespace] allImportedSubNamespaces (Type t, LifecycleState minState) : 
	t.allReferencedVersionedTypes (minState).getSubdomain().toSet();


/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of the given Type considering the minimal LifecycleState required by the 
 *	given Type. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] allImportedVersionedNS (Type t, LifecycleState minState) :
	t.allReferencedVersionedTypes(minState).createVersionedDomainNamespace().toSet();


/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of the given Type considering the minimal LifecycleState required by the 
 *	given Type. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] allImportedVersionedNS (VersionedDomainNamespace s, LifecycleState minState) : 
	s.allImportedVersionedNS (minState, (Set[VersionedDomainNamespace]) {}.toSet()).toSet();

Set[VersionedDomainNamespace] allImportedVersionedNS (
	VersionedDomainNamespace s, 
	LifecycleState minState, 
	Set[VersionedDomainNamespace] visited
	) : 
	! visited.contains(s) ? 
		s.subdomain.allImportedVersionedNS (s.version, minState).allImportedVersionedNS (minState, visited.add(s).toSet())
	: visited;


/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of all owned VersiondTypes, Exceptions and Service in the given 
 *	VersionedDomainNamespace. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] allImportedVersionedNS (VersionedDomainNamespace s) : 
	s.allImportedVersionedNS ((Set[VersionedDomainNamespace]) {}.toSet()).toSet();

Set[VersionedDomainNamespace] allImportedVersionedNS (
	VersionedDomainNamespace s, 
	Set[VersionedDomainNamespace] visited
	) :
	! visited.contains(s) ? 
		s.subdomain.allImportedVersionedNS (s.version).allImportedVersionedNS (visited.add(s).toSet())
	: visited;


Set[VersionedDomainNamespace] allImportedVersionedNS (Object s, String nameSpaceMajorVersion, LifecycleState minState) : null;
Set[VersionedDomainNamespace] allImportedVersionedNS (Object s, String nameSpaceMajorVersion) : null;

/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of all owned VersiondTypes, Exceptions and Service in the given 
 *	SubNamespace matching the given major version. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] allImportedVersionedNS (SubNamespace s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
	.allReferencedVersionedTypes (minState).createVersionedDomainNamespace()
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace());

/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of all owned VersiondTypes in the given 
 *	TechnicalNamespace matching the given major version. The owning VersiondDomainNamespace 
 *	of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] allImportedVersionedNS (sOAProfileDsl::TechnicalNamespace s, String nameSpaceMajorVersion) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (sOAProfileDsl::Class)
	.allReferencedVersionedTypes().createVersionedDomainNamespace();

/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of the given Service (versioned). The owning 
 *	VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] allImportedVersionedNS (Service s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
		.allReferencedVersionedTypes(minState).createVersionedDomainNamespace()
	.union (s.allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union (s.allReferencedExceptions().createVersionedDomainNamespace())
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace())
	.union ({s.createVersionedDomainNamespace()});

	
	

/*
 *	All direct imports
 */
 
/**
 *	Calculate all dependencies of the given Service version and LifecycleState. Dependencies must match
 *	the given minimal LifecycleState
 *	@deprecated ?
 *
 *	@param svc	The Service with it's version to calculate the imports for
 */
Set[SubNamespace] importedSubNamespaces (Type t, LifecycleState minState) : 
	t.allReferencedVersionedTypes (minState).getSubdomain().toSet();


/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of the given Type considering the minimal LifecycleState required by the 
 *	given Type. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] importedVersionedNS (Type t, LifecycleState minState) :
	t.allReferencedVersionedTypes(minState).createVersionedDomainNamespace().toSet();


/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of the given Type considering the minimal LifecycleState required by the 
 *	given Type. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] importedVersionedNS (VersionedDomainNamespace s, LifecycleState minState) : 
	s.importedVersionedNS (minState, (Set[VersionedDomainNamespace]) {}.toSet()).toSet();

Set[VersionedDomainNamespace] importedVersionedNS (
	VersionedDomainNamespace s, 
	LifecycleState minState, 
	Set[VersionedDomainNamespace] visited
	) : 
	((SubNamespace)s.subdomain).importedVersionedNS (s.version, minState);


/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of all owned VersiondTypes, Exceptions and Service in the given 
 *	VersionedDomainNamespace. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] importedVersionedNS (VersionedDomainNamespace s) : 
	s.importedVersionedNS ((Set[VersionedDomainNamespace]) {}.toSet()).toSet();

Set[VersionedDomainNamespace] importedVersionedNS (
	VersionedDomainNamespace s, 
	Set[VersionedDomainNamespace] visited
	) :
	((SubNamespace)s.subdomain).importedVersionedNS (s.version);


Set[VersionedDomainNamespace] importedVersionedNS (Object s, String nameSpaceMajorVersion, LifecycleState minState) : null;
Set[VersionedDomainNamespace] importedVersionedNS (Object s, String nameSpaceMajorVersion) : null;

/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of all owned VersiondTypes, Exceptions and Service in the given 
 *	SubNamespace matching the given major version. The owning VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] importedVersionedNS (SubNamespace s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
	.allReferencedVersionedTypes (minState).createVersionedDomainNamespace()
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace()).toSet();

/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of all owned VersiondTypes in the given 
 *	TechnicalNamespace matching the given major version. The owning VersiondDomainNamespace 
 *	of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] importedVersionedNS (sOAProfileDsl::TechnicalNamespace s, String nameSpaceMajorVersion) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (sOAProfileDsl::Class)
	.allReferencedVersionedTypes().createVersionedDomainNamespace();

/**
 *	Find all imported VersionedDomainSpaces, i.e. major version filtered slices of SubNamespaces. VersionedDomainNamespaces
 *	are derived from the versioned dependencies of the given Service (versioned). The owning 
 *	VersiondDomainNamespace of the found dependencies are returned.
 */
Set[VersionedDomainNamespace] importedVersionedNS (Service s, String nameSpaceMajorVersion, LifecycleState minState) :
	s.allTypesByMajorVersion (nameSpaceMajorVersion).typeSelect (BusinessObject)
		.allReferencedVersionedTypes(minState).createVersionedDomainNamespace()
	.union (s.allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union (s.allReferencedExceptions().createVersionedDomainNamespace())
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).allReferencedVersionedTypes (minState).createVersionedDomainNamespace())
	.union (s.allExceptionsByMajorVersion (nameSpaceMajorVersion).superException.reject(e|e == null).getLatestMatchingException().createVersionedDomainNamespace())
	.union ({s.createVersionedDomainNamespace()});

	
	