import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::basedsl::common;
extension org::fornax::soa::basedsl::version::versionMatching;
extension org::fornax::soa::basedsl::version::versionQualifying;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::xsd::domains;
extension org::eclipse::xtend::util::stdlib::io;


/**
 *	Namespace splitting into VersionedDomainNamespaces
 */

cached Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] toVersionedDomainNamespaces (Object s) : info("HOW DID I GET HERE? "+ s.metaType) -> {}.toSet();
cached Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] toVersionedDomainNamespaces (SubNamespace s) : s.types.size > 0 || s.services.size > 0 || s.exceptions.size > 0? s.types.createVersionedDomainNamespace().union (s.services.createVersionedDomainNamespace()).union(s.exceptions.createVersionedDomainNamespace()) : {}.toSet();
cached Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] toVersionedDomainNamespaces (sOAProfileDsl::TechnicalNamespace s) : s.types.size > 0 ? s.types.createVersionedDomainNamespace().toSet() : {}.toSet();

cached Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getAllLatestSubNamespacesByMajorVersion (Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] canditates) : 
	canditates.reject(e|canditates.exists(c|c.version.toMajorVersionNumber() == e.version.toMajorVersionNumber() && c.version > e.version));

cached org::fornax::soa::servicedsl::VersionedDomainNamespace getLatestSubNamespaceByMajorVersion (Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] canditates, int majorVer) : 
	canditates.select(e|e.version.toMajorVersionNumber() == majorVer).sortBy(e|e.version).reverse().toList().get(0);


cached org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(serviceDsl::Type t) : null;

		
create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(SubNamespace ns, Version v) :
	SubNamespace.isInstance (ns.eContainer) ? {
		setName (((SubNamespace)ns.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)ns.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)ns.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)ns.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (ns)->
	setFqn (ns.fqn())->
	setVersion (v.toMajorVersionNumber()) ->
	setTypes (ns.types.typeSelect(VersionedType).select (t|t.version.matchesMajorVersion (v.version.toMajorVersionNumber()))) ->
	setServices (ns.services.select (t|t.version.matchesMajorVersion (v.version.toMajorVersionNumber()))) ->
	setExceptions (ns.exceptions.select (t|t.version.matchesMajorVersion (v.version.toMajorVersionNumber())));

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(BusinessObject c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber()) ->
	setTypes (((SubNamespace)c.eContainer).types.typeSelect(VersionedType).select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setServices (((SubNamespace)c.eContainer).services.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setExceptions (((SubNamespace)c.eContainer).exceptions.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber())));

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(sOAProfileDsl::VersionedType c) :
	sOAProfileDsl::TechnicalNamespace.isInstance (c.eContainer) ? {
		setName (((sOAProfileDsl::TechnicalNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((sOAProfileDsl::TechnicalNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((sOAProfileDsl::OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((sOAProfileDsl::OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber());
	
create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(Enumeration c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber()) ->
	setTypes (((SubNamespace)c.eContainer).types.typeSelect(VersionedType).select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setServices (((SubNamespace)c.eContainer).services.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setExceptions (((SubNamespace)c.eContainer).exceptions.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber())));

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(Exception c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber()) ->
	setTypes (((SubNamespace)c.eContainer).types.typeSelect(VersionedType).select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setServices (((SubNamespace)c.eContainer).services.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setExceptions (((SubNamespace)c.eContainer).exceptions.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber())));

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(Service c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber()) ->
	setTypes (((SubNamespace)c.eContainer).types.typeSelect(VersionedType).select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setServices (((SubNamespace)c.eContainer).services.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber()))) ->
	setExceptions (((SubNamespace)c.eContainer).exceptions.select (t|t.version.matchesMajorVersion (c.version.toMajorVersionNumber())));

cached org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(sOAProfileDsl::Type c) : null;
	
