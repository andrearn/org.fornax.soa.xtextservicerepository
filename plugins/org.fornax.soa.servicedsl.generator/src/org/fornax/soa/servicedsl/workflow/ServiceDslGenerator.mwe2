module org.fornax.soa.servicedsl.workflow.ServiceDslGenerator

import org.eclipse.emf.mwe.utils.*

var targetDir = "src-gen"
var fileEncoding = "UTF-8"
var modelPath = "src/model"

Workflow {

	component = org.eclipse.xtext.mwe.Reader {
		// lookup all resources on the classpath
		// useJavaClassPath = true

		// or define search scope explicitly
		path = modelPath

		// this class will be generated by the xtext generator 
		register = org.fornax.soa.ServiceDslStandaloneSetup {}
		register = org.fornax.soa.SemanticsDslStandaloneSetup {}
		register = org.fornax.soa.BusinessDslStandaloneSetup {}
		load = {
			slot = "serviceModel"
			type = "OrganizationNamespace"
		}
	}
	/*
	component = org.eclipse.xtend.check.CheckComponent {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {}
		metaModel = org.eclipse.xtend.type.impl.java.JavaBeansMetaModel {}
		checkFile = "org::fornax::soa::servicedsl::checks::services"
	}*/

	component = org.eclipse.xpand2.Generator {
		metaModel = org.eclipse.xtend.typesystem.emf.EmfRegistryMetaModel {}
		metaModel = org.eclipse.xtend.type.impl.java.JavaBeansMetaModel {}
		expand = "org::fornax::soa::servicedsl::templates::Services::OrganizationNamespace FOREACH serviceModel"
		outlet = {
			path = targetDir
		}
		fileEncoding = fileEncoding
	}
}
