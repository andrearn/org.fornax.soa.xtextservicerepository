import bindingDsl;
import serviceDsl;
import environmentDsl;
import moduleDsl;

extension org::fornax::soa::basedsl::version::versionQualifying;
extension org::fornax::soa::environmentdsl::generator::endpoints;
extension org::fornax::soa::servicedsl::query::namespace::subnamespaces;
extension org::fornax::soa::servicedsl::templates::common;
extension org::fornax::soa::servicedsl::templates::xsd::domains;
extension org::fornax::soa::bindingdsl::templates::bindings;
extension org::fornax::soa::bindingdsl::templates::soap::soapvendorbindings;

String getWsdlBindingStyle(bindingDsl::SOAP bind) : 
	switch (bind.style) {
	case SOAPStyle::rpclit: "RPC"
	case SOAPStyle::rpcenc: "RPC"
	default : "document"	
	};
	
String getSoapEncoding(SOAP bind) : 
	switch (bind.style) {
	case SOAPStyle::rpcenc: "encoded"
	default : "literal"	
	};
	
	
String getPublisherEndpointAddress(serviceDsl::Service s, bindingDsl::DomainBinding b) :
	b.serviceBinding.service.contains(s) ? 
		getPublisherEndpointAddress(s, s.getServiceBinding(b))
	:
		b.getPublishingServer().getBaseUrl()
		+ getEndpoint (b.getContextRoot(s), b.subNamespace.getOrgNamespace(), b.subNamespace, s, b.getPublishingServer());
/*		+ b.subNamespace.getOrgNamespace().name.replaceAll("\\.","/") + "/" 
		+ b.subNamespace.name.replaceAll("\\.","/") +"/" + s.name + "/" + s.version.toVersionPostfix();
*/	
String getPublisherEndpointAddress(serviceDsl::Service s, bindingDsl::ServiceBinding b) :
	b.getPublishingServer().getBaseUrl()
		+ getEndpoint (b.getContextRoot(), b.service.service.getOrgNamespace(), ((SubNamespace)b.service.service.eContainer), s, b.getPublishingServer());
	/*
	+ b.getContextRoot() 
	+ b.service.service.getOrgNamespace().name.replaceAll("\\.","/") + "/" 
	+ ((SubNamespace)b.service.service.eContainer).name.replaceAll("\\.","/") +"/" + s.name + "/" + s.version.toVersionPostfix();
*/

String getProviderEndpointAddress(serviceDsl::Service s, bindingDsl::DomainBinding b) :
	b.serviceBinding.service.contains(s) ? 
		getProviderEndpointAddress(s, s.getServiceBinding(b))
	:
		b.getProvidingServer().getBaseUrl()
		+ b.getProviderContextRoot(s) 
		+ b.subNamespace.getOrgNamespace().name.replaceAll("\\.","/") + "/" 
		+ b.subNamespace.name.replaceAll("\\.","/") +"/" + s.name + "/" + s.version.toVersionPostfix();
	
String getProviderEndpointAddress(serviceDsl::Service s, bindingDsl::ServiceBinding b) :
	b.getProvidingServer().getBaseUrl() 
	+ b.getProviderContextRoot() 
	+ b.service.service.getOrgNamespace().name.replaceAll("\\.","/") + "/" 
	+ ((SubNamespace)b.service.service.eContainer).name.replaceAll("\\.","/") +"/" + s.name + "/" + s.version.toVersionPostfix();

ServiceBinding getServiceBinding (Service s, DomainBinding b) : b.serviceBinding.selectFirst(e|e.service.service == s);
 
String getBaseUrl (Server s) : "http://" + s.host;
String getBaseUrl (ESB s) : s.soapUrl != null ? s.soapUrl : s.baseUrl;
String getBaseUrl (AppServer s) : s.baseUrl;

List[BindingProtocol] getBindingProtocols (DomainBinding domBind, ServiceRef s) : 
	domBind.serviceBinding.select (e|e.service.service.name == s.service.name).size > 0 ? 
		domBind.serviceBinding.select(e|e.service.service.name == s.service.name).protocol 
	: 
		domBind.protocol;

List[BindingProtocol] getBindingProtocols (DomainBinding domBind, Service s) : 
	domBind.serviceBinding.select (e|e.service.service.name == s.name).size > 0 ? 
		domBind.serviceBinding.select(e|e.service.service.name == s.name).protocol 
	: 
		domBind.protocol;

String getContextRoot (DomainBinding b, Service s) :
	b.getBindingProtocols(s).typeSelect(SOAP).size > 0 ? 
		(b.getBindingProtocols(s).typeSelect(SOAP).get(0).contextRoot != null ? 
			"/" + b.getBindingProtocols(s).typeSelect(SOAP).get(0).contextRoot + "/"
		:
			"/")
	:
		"/";
String getProviderContextRoot (DomainBinding b, Service s) :
	b.getBindingProtocols(s).typeSelect(SOAP).size > 0 ? 
		(b.getBindingProtocols(s).typeSelect(SOAP).get(0).providerContextRoot != null ? 
			"/" + b.getBindingProtocols(s).typeSelect(SOAP).get(0).providerContextRoot + "/"
		:
			"/")
	:
		"/";
		
String getContextRoot (ServiceBinding b) :
	b.protocol.typeSelect(SOAP).size > 0 ? 
		(b.protocol.typeSelect(SOAP).get(0).contextRoot != null ?
			"/" + b.protocol.typeSelect(SOAP).get(0).contextRoot + "/"
		:
			"/")
	:
		"/";
String getProviderContextRoot (ServiceBinding b) :
	b.protocol.typeSelect(SOAP).size > 0 ? 
		(b.protocol.typeSelect(SOAP).get(0).providerContextRoot != null ?
			"/" + b.protocol.typeSelect(SOAP).get(0).providerContextRoot + "/"
		:
			"/")
	:
		"/";
		
Server getPublishingServer (Binding b) : 
	b.protocol.typeSelect(SOAP).get(0).publisher.pubServer != null ? b.protocol.typeSelect(SOAP).get(0).publisher.pubServer : b.environment.defaultESB;
	
Server getProvidingServer (Binding b) :
	b.protocol.typeSelect(SOAP).get(0).publisher.pubServer != null ? b.protocol.typeSelect(SOAP).get(0).publisher.pubServer : b.environment.defaultAppServer;
	
String getDefaultESBEndpointAddress(serviceDsl::Service s, bindingDsl::DomainBinding b) :
	((environmentDsl::ESB)b.environment.defaultESB).baseUrl + "/" 
	+ b.subNamespace.getOrgNamespace().shorten() + "/" 
	+ b.subNamespace.name.replaceAll("\\.","/") +"/" + s.name;
	 
String getDefaultAppServerEndpointAddress(serviceDsl::Service s, bindingDsl::DomainBinding b) :
	((environmentDsl::AppServer)b.environment.defaultAppServer).baseUrl + "/" 
	+ b.subNamespace.getOrgNamespace().shorten() + "/" 
	+ b.subNamespace.name.replaceAll("\\.","/") +"/" + s.name; 
	
String toBindingName (Service s, bindingDsl::SOAP p) : s.name + p.getPortNamePostfix();
String toPortName (Service s, bindingDsl::SOAP p) : s.name + p.getPortNamePostfix();
String toScopedPortName (Service s, bindingDsl::SOAP p) : s.toPortName(p) + s.getServiceVisibilityName ();

private String getPortNamePostfix(bindingDsl::SOAP p) : 
	switch (p.style) {
	case SOAPStyle::rpclit: "SOAPRPClit"
	case SOAPStyle::rpcenc: "SOAPRPCEnc"
	default : "SOAP"	
	};
	
	
String getServerEndpoint(Service s, environmentDsl::Server server, BindingProtocol prot, moduleDsl::Module mod) : 
	server.getSOAPHttpEndpointUrl() + "/"
	+ mod.getEndpoint (s.getOrgNamespace(), s.getSubdomain(), s, server);




	
	
	