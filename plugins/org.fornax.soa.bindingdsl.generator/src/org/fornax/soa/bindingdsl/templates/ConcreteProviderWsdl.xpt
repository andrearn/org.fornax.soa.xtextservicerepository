«IMPORT sOABaseDsl»
«IMPORT bindingDsl»
«IMPORT serviceDsl»
«IMPORT environmentDsl»

«EXTENSION org::fornax::soa::basedsl::common»
«EXTENSION org::fornax::soa::basedsl::lifecycle::stateMatching»
«EXTENSION org::fornax::soa::basedsl::version::versionQualifying»
«EXTENSION org::fornax::soa::basedsl::version::versionMatching»
«EXTENSION org::fornax::soa::servicedsl::domain::splitting»
«EXTENSION org::fornax::soa::servicedsl::query::services»
«EXTENSION org::fornax::soa::servicedsl::templates::common»
«EXTENSION org::fornax::soa::servicedsl::templates::domains»
«EXTENSION org::fornax::soa::servicedsl::templates::services»
«EXTENSION org::fornax::soa::servicedsl::templates::types»
«EXTENSION org::fornax::soa::bindingdsl::templates::bindings»
«EXTENSION org::fornax::soa::bindingdsl::templates::soapbinding»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE WSDL(BindingProtocol prot, sOAProfileDsl::SOAProfile profile) FOR bindingDsl::DomainBinding»
	«EXPAND WSDL(this, prot, profile) FOREACH subNamespace.services.select(e|e.state.matchesMinStateLevel(environment.getMinLifecycleState(e)) && e.isLatestMatchingService(e.version.toMajorVersionNumber().asInteger(), environment.getMinLifecycleState(e)))»
«ENDDEFINE»

«DEFINE WSDLByServiceName(List[String] serviceNames, BindingProtocol prot, sOAProfileDsl::SOAProfile profile) FOR bindingDsl::DomainBinding»
	«EXPAND WSDL(this, prot, profile) FOREACH subNamespace.services.select(e|serviceNames.contains(e.name) && e.state.matchesMinStateLevel(environment.getMinLifecycleState(e)) && e.isLatestMatchingService(e.version.toMajorVersionNumber().asInteger(), environment.getMinLifecycleState(e)))»
«ENDDEFINE»


«DEFINE WSDL(DomainBinding domBind, BindingProtocol prot, sOAProfileDsl::SOAProfile profile) FOR Service»
«FILE getConcreteWsdlFileNameFragment("Private") + ".wsdl"»<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="«toTargetNamespace()»"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	name="«name»" 
	targetNamespace="«toTargetNamespace()»">
	<wsdl:documentation>
		Version «version.toVersionNumber()»
		Lifecycle state: «state.toString()»
		
		«doc.trim().stripCommentBraces()»
	</wsdl:documentation>
    <wsdl:import namespace="«toTargetNamespace()»" location="«this.getRegisteredUrl (domBind.getRegistryBaseUrl())».wsdl"></wsdl:import>
	
	«EXPAND SOAPBinding(this) FOREACH domBind.protocol.typeSelect(SOAP)-»
	«EXPAND WsdlService(this) FOREACH domBind.protocol.typeSelect(SOAP)-»
</wsdl:definitions>
«ENDFILE»
«ENDDEFINE»

«DEFINE WSDL(ServiceBinding svcBind, BindingProtocol prot, sOAProfileDsl::SOAProfile profile) FOR Service»
«FILE getConcreteWsdlFileNameFragment("Private") + ".wsdl"»<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<wsdl:definitions xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/"
	xmlns:tns="«toTargetNamespace()»"
	xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	name="«name»" 
	targetNamespace="«toTargetNamespace()»">
	<wsdl:documentation>
		Version «version.toVersionNumber()»
		Lifecycle state: «state.toString()»
		
		«doc.trim().stripCommentBraces()»
	</wsdl:documentation>
    <wsdl:import namespace="«toTargetNamespace()»" location="«this.getRegisteredUrl (svcBind.getRegistryBaseUrl())».wsdl"></wsdl:import>
	
	«EXPAND SOAPBinding(this) FOREACH svcBind.protocol.typeSelect(SOAP)-»
	«EXPAND WsdlService(this) FOREACH svcBind.protocol.typeSelect(SOAP)-»
</wsdl:definitions>
«ENDFILE»
«ENDDEFINE»

«DEFINE SOAPBinding(Service svc) FOR SOAP»
	<wsdl:binding name="«svc.toBindingName(this)»"
		type="tns:«svc.name»">
		<soap:binding style="«getWsdlBindingStyle()»"
			transport="http://schemas.xmlsoap.org/soap/http" />
		«EXPAND SOAPBindingOperation(this) FOREACH svc.operations»
	</wsdl:binding>
«ENDDEFINE»

«DEFINE SOAPBindingOperation(SOAP protocol) FOR serviceDsl::Operation»
		<wsdl:operation name="«name»">
			<soap:operation
				soapAction="«eContainer.toTargetNamespace()»«name»" />
			<wsdl:input>
				<soap:body use="«protocol.getSoapEncoding()»" />
			</wsdl:input>
			<wsdl:output>
				<soap:body use="«protocol.getSoapEncoding()»" />
			</wsdl:output>
		</wsdl:operation>
«ENDDEFINE»

«DEFINE WsdlService(Service svc) FOR SOAP»
	<wsdl:service name="«svc.name»">
		<wsdl:port binding="tns:«svc.toBindingName(this)»"
			name="«svc.toPortName(this)»">
			<soap:address location="«svc.getProviderEndpointAddress((DomainBinding)eContainer)»" />
		</wsdl:port>
	</wsdl:service>
«ENDDEFINE»
