«IMPORT sOABaseDsl»
«IMPORT bindingDsl»
«IMPORT environmentDsl»
«IMPORT serviceDsl»
«IMPORT sOAProfileDsl»

«EXTENSION org::fornax::soa::basedsl::common»
«EXTENSION org::fornax::soa::basedsl::version::versionQualifying»

«EXTENSION org::fornax::soa::servicedsl::query::exceptions»
«EXTENSION org::fornax::soa::servicedsl::query::headers»
«EXTENSION org::fornax::soa::servicedsl::query::type::LatestMatchingTypeFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::ReferencedTypesFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::TypesByLifecycleStateFinder»
«EXTENSION org::fornax::soa::servicedsl::query::type::TypesByMajorVersion»
«EXTENSION org::fornax::soa::servicedsl::query::services»
«EXTENSION org::fornax::soa::servicedsl::query::namespace::namespaceImports»

«EXTENSION org::fornax::soa::bindingdsl::templates::bindings»
«EXTENSION org::fornax::soa::servicedsl::templates::common»
«EXTENSION org::fornax::soa::servicedsl::templates::webservice::services»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::domains»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::types»


«REM»
	CARTRIDGE ENTRYPOINT for generation of abstract wrapped  WSDLs
	Abstract WSDLs only define the abstract interface of a service. The binding is declared
	in a separate WSDL that imports this abstract WSDL
	
	A WSDL for each Service in the given SubNamespace matching the given minimal LifecycleState
	will be generated. For each major version of a service WSDL is generated for the latest minor
	version in that major version matching the minimal Lifecycle constraint is be generated
«ENDREM»
«DEFINE WrappedWSDL (List[sOAProfileDsl::SOAProfile] profiles, String profileName, List[Environment] environments, String targetEnvironment) FOR SubNamespace»
	«LET profiles.selectFirst (p|p.name==profileName) AS prof»
		«LET environments.selectFirst (e|e.name==targetEnvironment) AS env»
			«EXPAND WrappedWSDL (prof, env) FOREACH this.services.select(s|s.isEligibleForEnvironment (env))»
		«ENDLET»
	«ENDLET»
«ENDDEFINE»

«DEFINE WrappedWSDL (List[sOAProfileDsl::SOAProfile] profiles, String profileName, List[Environment] environments, String targetEnvironment) FOR Service»
	«LET environments.selectFirst(e|e.name==targetEnvironment) AS env»
		«EXPAND WrappedWSDL(profiles.selectFirst(e|e.name==profileName), env) FOR this»
	«ENDLET»
«ENDDEFINE»


«DEFINE WrappedWSDL (sOAProfileDsl::SOAProfile profile, Environment environment) FOR Service»
	«EXPAND org::fornax::soa::servicedsl::templates::webservice::WrappedWSDL::WrappedWSDL (environment.getMinLifecycleState (this), profile, environment.getRegistryBaseUrl()) FOR this»
«ENDDEFINE»
