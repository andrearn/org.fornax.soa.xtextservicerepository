«IMPORT sOABaseDsl»
«IMPORT bindingDsl»
«IMPORT serviceDsl»
«IMPORT sOAProfileDsl»

«EXTENSION org::fornax::soa::servicedsl::domain::splitting»
«EXTENSION org::fornax::soa::bindingdsl::queries::services::serviceQueries»
«EXTENSION org::fornax::soa::bindingdsl::templates::bindings»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::domains»
«EXTENSION org::fornax::soa::servicedsl::templates::webservice::services»
«EXTENSION org::fornax::soa::servicedsl::templates::xsd::types»
«EXTENSION org::fornax::soa::servicedsl::query::services»
«EXTENSION org::fornax::soa::servicedsl::query::headers»

«EXTENSION org::eclipse::xtend::util::stdlib::io»

«EXTENSION org::fornax::soa::moduledsl::query::serviceQueries»
«EXTENSION org::fornax::soa::moduledsl::query::namespaceQueries»

«DEFINE main (LifecycleState minState, sOAProfileDsl::SOAProfile profile) FOR BindingModel»
	«EXPAND Binding (minState, profile) FOREACH bindings»
«ENDDEFINE»


«REM»
	ENTRYPOINT for generation of concrete and imported abstract WSDLs and their required XSDs 
	for a given DomainBinding. The DomainBinding binds all Services in a given SubNamespace 
	to a certain Environment.
	
	All Services and their required XSDs that match the minimal LifecycleState of environment
	referenced by the DomainBinding are considered. Overrides of minimal LifecycleStates 
	declared in SubNamespaces will be respected
«ENDREM»
«DEFINE Binding (SOAProfile profile) FOR DomainBinding»
	«EXPAND Binding ( environment.getMinLifecycleState (this), profile)»
«ENDDEFINE»


«REM»
	ENTRYPOINT for generation of concrete and imported abstract WSDLs and their required XSDs 
	for a given DomainBinding. The DomainBinding binds all Services in a given SubNamespace 
	to a certain Environment.
	
	All Services and their required XSDs that match the minimal given LifecycleState are 
	considered
«ENDREM»
«DEFINE Binding (LifecycleState minState, SOAProfile profile) FOR DomainBinding»
	«FOREACH subNamespace.toVersionedDomainNamespaces() AS verNs»
		«FOREACH verNs.servicesWithMinState (minState).typeSelect(Service).select(e|e.isLatestMatchingService(verNs.version.asInteger(), minState)) AS svc»
			«EXPAND BindingByService (svc, profile) FOR this.getMostSpecificBinding(svc)»
		«ENDFOREACH»
	«ENDFOREACH»
	«EXPAND org::fornax::soa::servicedsl::templates::Services::SubNamespace (environment.getMinLifecycleState(subNamespace), profile, getRegistryBaseUrl()) FOR subNamespace»
	«FOREACH {subNamespace}.union(subNamespace.getImportedSubdomains().getAllLatestSubNamespacesByMajorVersion().subdomain.toSet()) AS ns»
	«EXPAND org::fornax::soa::servicedsl::templates::xsd::XSD::XSD (environment.getMinLifecycleState(ns), profile, getRegistryBaseUrl()) FOR ns»
	«ENDFOREACH»
	«IF forceRelativePaths()»
	«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD FOR profile»
	«ELSE»
	«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD (this.getRegistryBaseUrl()) FOR profile»
	«ENDIF»
«ENDDEFINE»


«DEFINE BindingByService(Service s, SOAProfile profile) FOR Binding»
	«ERROR "Unexpected Bining type " + metaType.name»
«ENDDEFINE»


«REM»
	Generate a concrete WSDL for the given Service defining a binding to the 
	publishing server, i.e. usually an ESB.
	The WSDL references an abstract WSDL defining the interface / porttype.
	
	If generation of concrete WSDL for private services bound providing servers is enable,
	generate a concrete WSDL for the private sevrice
«ENDREM»
«DEFINE BindingByService(Service s, SOAProfile profile) FOR DomainBinding»
	«IF generatePrivateWsdlForProviderHost()»
		«FOREACH getProviderProtocols().typeSelect(SOAP).select(e|e.providedWsdlUrl == null && e.provider != null) AS prot»
			«EXPAND soap::ConcreteProviderWsdl::WSDL(this, prot, profile) FOR s»
		«ENDFOREACH»
	«ENDIF»
	«FOREACH getPublisherProtocols().typeSelect(SOAP) AS prot»
		«IF DomainNamespace.isInstance(subNamespace)»
			«EXPAND soap::ConcreteWsdl::WSDL(this, prot, profile) FOR s»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»


«REM»
	Generate a concrete WSDL for the given Service defining a binding to the 
	publishing server, i.e. usually an ESB.
	The WSDL references an abstract WSDL defining the interface / porttype.
	
	If generation of concrete WSDL for private services bound providing servers is enable,
	generate a concrete WSDL for the private sevrice
«ENDREM»
«DEFINE BindingByService(Service s, SOAProfile profile) FOR ServiceBinding»
	«IF generatePrivateWsdlForProviderHost()»
		«FOREACH getProviderProtocols().typeSelect(SOAP).select(e|e.providedWsdlUrl == null && e.provider != null) AS prot»
			«EXPAND soap::ConcreteProviderWsdl::WSDL(this, prot, profile) FOR s»
		«ENDFOREACH»
	«ENDIF»
	«FOREACH getPublisherProtocols().typeSelect(SOAP) AS prot»
		«IF DomainNamespace.isInstance(((DomainBinding)eContainer).subNamespace)»
			«EXPAND soap::ConcreteWsdl::WSDL(this, prot, profile) FOR s»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»



«REM»
	ENTRYPOINT for generation of concrete and imported abstract WSDLs and their required XSDs 
	for all ModuleBindings to an Environment with the given name. The ModuleBinding binds all 
	Services provided by the module	to a certain Environment.
	
	All Services and their required XSDs that match the minimal given LifecycleState are 
	considered
«ENDREM»
«DEFINE BindModulesToEnvorinment (SOAProfile profile, String targetEnvironmentName) FOR List[ModuleBinding]»
	«FOREACH this.select(e|e.environment.name==targetEnvironmentName) AS modBind»
		«FOREACH modBind.module.module.providedServices AS provSvc»
			«LET provSvc.latestServiceInEnvironment (environment) AS svc-»
				«EXPAND BindingByService (svc, modBind.getMostSpecificBinding (svc), profile) FOR modBind»
				«EXPAND org::fornax::soa::servicedsl::templates::Services::SubNamespace (svc.getSubdomain().minStateByEnvironment (environment), profile, getRegistryBaseUrl()) FOR svc.getSubdomain()»
				«FOREACH {svc.getSubdomain()}.union(svc.getSubdomain().getImportedSubdomains().getAllLatestSubNamespacesByMajorVersion().subdomain.toSet()) AS ns»
					«EXPAND org::fornax::soa::servicedsl::templates::xsd::XSD::XSD (ns.minStateByEnvironment (environment), profile, getRegistryBaseUrl()) FOR ns»
				«ENDFOREACH»
				«IF forceRelativePaths()»
					«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD FOR profile»
				«ELSE»
					«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD (modBind.getRegistryBaseUrl()) FOR profile»
				«ENDIF»
			«ENDLET»
		«ENDFOREACH»
	«ENDFOREACH»
«ENDDEFINE»
«REM»
	ENTRYPOINT for generation of concrete and imported abstract WSDLs and their required XSDs 
	for a given ModuleBinding. The ModuleBinding binds all Services provided by the module 
	to a certain Environment.
	
	All Services and their required XSDs that match the minimal given LifecycleState are 
	considered
«ENDREM»
«DEFINE Binding (SOAProfile profile) FOR ModuleBinding»
	«FOREACH module.module.providedServices AS provSvc»
		«LET provSvc.latestServiceInEnvironment (environment) AS svc-»
			«EXPAND BindingByService (svc, this.getMostSpecificBinding (svc), profile) FOR this»
			«EXPAND org::fornax::soa::servicedsl::templates::Services::SubNamespace (svc.getSubdomain().minStateByEnvironment (environment), profile, getRegistryBaseUrl()) FOR svc.getSubdomain()»
			«FOREACH {svc.getSubdomain()}.union(svc.getSubdomain().getImportedSubdomains().getAllLatestSubNamespacesByMajorVersion().subdomain.toSet()) AS ns»
				«EXPAND org::fornax::soa::servicedsl::templates::xsd::XSD::XSD (ns.minStateByEnvironment (environment), profile, getRegistryBaseUrl()) FOR ns»
			«ENDFOREACH»
			«IF forceRelativePaths()»
				«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD FOR profile»
			«ELSE»
				«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD (this.getRegistryBaseUrl()) FOR profile»
			«ENDIF»
		«ENDLET»
	«ENDFOREACH»
«ENDDEFINE»

«DEFINE BindingByService(Service s, Binding specificBinding, SOAProfile profile) FOR ModuleBinding»
	«FOREACH specificBinding.protocol AS prot-»
		«IF SOAP.isInstance(prot)-»
		«info("SOAP")»
			«LET (SOAP)prot AS soapProt-»
				«IF s.isPublicEndpoint (provider.provServer)-»
					«EXPAND soap::ConcreteWsdl::WSDL(this, prot, profile) FOR s»
				«ELSE-»
					«EXPAND soap::ConcretePrivateWsdl::WSDL(this, prot, profile) FOR s»
				«ENDIF»
			«ENDLET»
		«ENDIF»
	«ENDFOREACH»
«ENDDEFINE»


«DEFINE BindingByServiceName(List[String] serviceNames, SOAProfile profile) FOR DomainBinding»

	«IF generatePrivateWsdlForProviderHost()»
		«FOREACH getProviderProtocols().typeSelect(SOAP).select(e|e.providedWsdlUrl == null && e.provider != null) AS prot»
			«EXPAND soap::ConcreteProviderWsdl::WSDLByServiceName(serviceNames, prot, profile) FOR this»
		«ENDFOREACH»
	«ENDIF»
	«FOREACH getPublisherProtocols().typeSelect(SOAP) AS prot»
		«IF DomainNamespace.isInstance(subNamespace)»
			«EXPAND soap::ConcreteWsdl::WSDLByServiceName(serviceNames, prot, profile) FOR this»
		«ENDIF»
	«ENDFOREACH»
	«FOREACH {subNamespace}.union(subNamespace.getImportedSubdomains()) AS ns» 
	«EXPAND org::fornax::soa::servicedsl::templates::xsd::XSD::XSD (environment.getMinLifecycleState(ns), profile, getRegistryBaseUrl()) FOR ns »
	«ENDFOREACH»
	«EXPAND org::fornax::soa::servicedsl::templates::Services::SubNamespace (environment.getMinLifecycleState(subNamespace), profile, getRegistryBaseUrl()) FOR subNamespace»
	«EXPAND org::fornax::soa::servicedsl::templates::xsd::MessageHeaderXSD::MessageHeaderXSD (getRegistryBaseUrl()) FOR profile»

«ENDDEFINE»




«REM»
	ENTRYPOINT for generation of XSDs for a given DomainBinding. 
	
	An XSD for each VersionedDomainNamespace derived from the given SubNamespace. 
	VersionedDomainNamespaces are derived using the major version based splitting algorithm 
	constrained by the given LifecycleState.
	
	All VersionedDomainNamespaces that contain VerisonedTypes or Exceptions that match 
	the minimal LifecycleState required for the environment	referenced by the given DomainBinding 
	are considered. Overrides of minimal LifecycleStates declared in SubNamespaces 
	will be respected.
	
	If there exits no DomainBinding for the given SubNamespace any DomainBinding to the targeted
	Environment can be chosen.
«ENDREM»
«DEFINE XSD (DomainBinding bind, SOAProfile profile) FOR SubNamespace»
	«EXPAND XSD (bind.environment.getMinLifecycleState(this), bind, profile)»
«ENDDEFINE»

«REM»
	ENTRYPOINT for generation of XSDs for a given DomainBinding. 
	
	An XSD for each VersionedDomainNamespace derived from the given SubNamespace 
	by the given DomainBinding. VersionedDomainNamespaces are derived using the 
	major version based splitting algorithm constrained by the given LifecycleState.

	All VersionedDomainNamespaces that contain VerisonedTypes or Exceptions that match 
	the given minimal LifecycleState are considered.
	
	If there exits no DomainBinding for the given SubNamespace any DomainBinding to the targeted
	Environment can be chosen.
«ENDREM»
«DEFINE XSD (LifecycleState minState, DomainBinding bind, SOAProfile profile) FOR SubNamespace»
	«EXPAND org::fornax::soa::servicedsl::templates::xsd::XSD::XSD (bind.environment.getMinLifecycleState(this), profile, bind.getRegistryBaseUrl())»
«ENDDEFINE»
