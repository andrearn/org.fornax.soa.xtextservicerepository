/*
 * generated by Xtext
 */
package org.fornax.soa.ui.outline;

import java.util.List;

import org.eclipse.emf.common.util.BasicEList;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.outline.ContentOutlineNode;
import org.eclipse.xtext.ui.editor.outline.transformer.AbstractDeclarativeSemanticModelTransformer;
import org.fornax.soa.bindingDsl.DomainBinding;
import org.fornax.soa.bindingDsl.SOAP;
import org.fornax.soa.bindingDsl.ServiceBinding;
import org.fornax.soa.environmentDsl.Environment;
import org.fornax.soa.environmentDsl.Server;
import org.fornax.soa.serviceDsl.DomainNamespace;
import org.fornax.soa.basedsl.sOABaseDsl.LowerBoundRangeVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.MajorVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.MaxVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.MinVersionRef;
import org.fornax.soa.serviceDsl.SubNamespace;
import org.fornax.soa.basedsl.sOABaseDsl.VersionRef;
import org.fornax.soa.util.BindingDslHelper;

/**
 * customization of the default outline structure
 * 
 */
public class BindingDslTransformer extends
		AbstractDeclarativeSemanticModelTransformer {

	public ContentOutlineNode createNode(DomainBinding semanticNode,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super	.newOutlineNode(semanticNode, parentNode);
		node.setLabel(semanticNode.getSubNamespace().getName() + "->" + semanticNode.getEnvironment().getName());
		return node;
	}

	public ContentOutlineNode createNode(ServiceBinding semanticNode,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super	.newOutlineNode(semanticNode, parentNode);
		node.setLabel(semanticNode.getService().getService().getName() + getVersion(semanticNode.getService().getVersionRef()));
		return node;
	}
	
	public ContentOutlineNode createNode(SOAP semanticNode,
			ContentOutlineNode parentNode) {
		ContentOutlineNode node = super	.newOutlineNode(semanticNode, parentNode);
		Server server = null;
		SubNamespace ns = BindingDslHelper.getSubNamespace(semanticNode);
		if (semanticNode.getProvider() != null)
			server = semanticNode.getProvider().getProvServer();
		if (server == null && semanticNode.getPublisher() != null)
			server = semanticNode.getPublisher().getPubServer();
		if (server == null) {
			Environment env = BindingDslHelper.getEnvironment(semanticNode);
			if (ns instanceof DomainNamespace)
				server = env.getDefaultESB();
			else 
				server = env.getDefaultAppServer();
		}
		if (server != null)
			node.setLabel("SOAP->"+server.getName());
		else
			node.setLabel("SOAP");
		return node;
	}
	
	private String getVersion (VersionRef verRef) {
		if (verRef instanceof MajorVersionRef)
			return "" + ((MajorVersionRef)verRef).getMajorVersion();
		if (verRef instanceof MaxVersionRef)
			return "<" + ((MaxVersionRef)verRef).getMaxVersion();
		if (verRef instanceof MinVersionRef)
			return ">=" + ((MinVersionRef)verRef).getMinVersion();
		if (verRef instanceof LowerBoundRangeVersionRef) {
			LowerBoundRangeVersionRef ref = (LowerBoundRangeVersionRef)verRef;
			return (ref.getMinVersion() +".."+ref.getMaxVersion());
		}
		return "";
	}
	

}
