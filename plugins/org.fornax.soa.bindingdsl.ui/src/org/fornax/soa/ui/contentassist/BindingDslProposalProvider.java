/*
* generated by Xtext
*/
package org.fornax.soa.ui.contentassist;

import java.util.Iterator;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.ILeafNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.fornax.soa.basedsl.sOABaseDsl.Import;
import org.fornax.soa.basedsl.sOABaseDsl.MajorVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.VersionRef;
import org.fornax.soa.bindingDsl.BindingModel;
import org.fornax.soa.bindingDsl.ModuleRef;
import org.fornax.soa.bindingDsl.ServiceRef;
import org.fornax.soa.moduledsl.moduleDsl.ModuleDslPackage;
import org.fornax.soa.serviceDsl.ServiceDslPackage;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
public class BindingDslProposalProvider extends AbstractBindingDslProposalProvider {


	public void complete_VersionId(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		calculateVersionProposals(model, context, acceptor, false);
	}
	
	public void complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model.eContainer() instanceof MajorVersionRef || model.eContainer() instanceof ModuleRef || model instanceof ServiceRef)  {
			calculateVersionProposals(model, context, acceptor, true);
		} else {
			super.complete_INT (model, ruleCall, context, acceptor);
		}
	}	

	private void calculateVersionProposals(EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor, boolean isCompleteInt) {
		EObject canditateRoot = model;
		while ( !(canditateRoot instanceof BindingModel) && model.eContainer() != null) {
			canditateRoot = canditateRoot.eContainer();
		}
		if (canditateRoot instanceof BindingModel) {
			BindingModel moduleModel = (BindingModel) canditateRoot;
			EList<Import> imports = moduleModel.getImports();
			final Iterable<String> importedNamespaces = Lists.transform (imports, new Function<Import, String> () {
	
				public String apply (Import from) {
					return from.getImportedNamespace().replaceAll("\\.\\*", "");
				}
				
			});
			Iterable<String> canditateVersions = Sets.newHashSet();
			if (model.eContainer() instanceof ModuleRef) {
				ICompositeNode moduleRefNode = NodeModelUtils.findActualNodeFor(model.eContainer());
				INode xrefNode = moduleRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String moduleName = xrefNode.getText().trim();
					final String className = ModuleDslPackage.Literals.MODULE.getName();
					canditateVersions = getCanditateVersions (moduleName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef || model instanceof MajorVersionRef);
				}
			} else if (model instanceof ModuleRef) {
				ICompositeNode moduleRefNode = NodeModelUtils.findActualNodeFor(model);
				INode xrefNode = moduleRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String moduleName = xrefNode.getText().trim();
					final String className = ModuleDslPackage.Literals.MODULE.getName();
					canditateVersions = getCanditateVersions (moduleName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef);
				}
			} else if (model.eContainer() instanceof ServiceRef) {
				ICompositeNode svcRefNode = NodeModelUtils.findActualNodeFor(model.eContainer());
				INode xrefNode = svcRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String svcName = xrefNode.getText().trim();
					final String className = ServiceDslPackage.Literals.SERVICE.getName();
					canditateVersions = getCanditateVersions (svcName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef);
				}
			} else if (model instanceof ServiceRef) {
				ICompositeNode svcRefNode = NodeModelUtils.findActualNodeFor(model);
				INode xrefNode = svcRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String svcName = xrefNode.getText().trim();
					final String className = ServiceDslPackage.Literals.SERVICE.getName();
					canditateVersions = getCanditateVersions (svcName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef || isCompleteInt);
				}
			}
			for (String version : canditateVersions) {
				acceptor.accept (createCompletionProposal(version, context));
			}
		}
	}
}
