/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.moduledsl.ui.outline

import com.google.inject.Inject
import org.eclipse.xtext.ui.IImageHelper
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ModuleDslPackage
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ModuleModel
import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.emf.ecore.EObject
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.Module
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ServiceRef
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ImportServiceRef
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.NamespaceRef
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.UsingEndpoint
import org.xkonnex.repo.dsl.basedsl.baseDsl.Assignment
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ProvidingEndpoint

/** 
 * customization of the default outline structure
 */
class ModuleDslOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	@Inject
	private IImageHelper imageHelper;
	
	def protected _createChildren(DocumentRootNode parentNode, ModuleModel model) {
		parentNode.createEStructuralFeatureNode(model, ModuleDslPackage.Literals.MODULE_MODEL__IMPORTS,
			imageHelper.getImage("impc_obj.gif"), "import declarations", false);
		for (module : model.modules) {
			parentNode.createNode(module)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, Module module) {
		for (provNS : module.providedNamespaces) {
			parentNode.createNode(provNS)
		}
		for (provSvc : module.providedServices) {
			parentNode.createNode(provSvc)
		}
		if (module.defaultProvidingEndpoint != null)
			parentNode.createNode(module.defaultProvidingEndpoint)
			
		for (usedMod : module.usedModules) {
			parentNode.createNode(usedMod)
		} 
		for (usedMSvc : module.usedServices) {
			parentNode.createNode(usedMSvc)
		}
		if (module.usesEndpointProtocol != null)
			parentNode.createNode(module.usesEndpointProtocol)
		for (alt : module.usesAlternativeEndpointProtocols) {
			parentNode.createNode(alt)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, ServiceRef svc) {
		for (op : svc.operations) {
			parentNode.createNode(op)
		}
		for (provEndpoint : svc.providingEndpoints) {
			parentNode.createNode(provEndpoint)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, ImportServiceRef svc) {
		if (svc.usingEndpoint != null)
			parentNode.createNode(svc.usingEndpoint)
	}
	
	def protected _isLeaf(NamespaceRef modelElement) {
		true
	}
	
	def protected _isLeaf(UsingEndpoint modelElement) {
		true
	}
	
	def protected _isLeaf(Assignment modelElement) {
		true
	}
	
}
