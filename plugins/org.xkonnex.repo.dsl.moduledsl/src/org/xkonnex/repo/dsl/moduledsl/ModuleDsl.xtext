/*
Copyright (c) 2010-2017 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
*/
grammar org.xkonnex.repo.dsl.moduledsl.ModuleDsl with org.xkonnex.repo.dsl.basedsl.BaseDsl

generate moduleDsl "http://www.xkonnex.org/repo/dsl/moduledsl/ModuleDsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as basedsl
import "http://www.xkonnex.org/repo/dsl/servicedsl/ServiceDsl" as serviceDsl
import "http://www.xkonnex.org/repo/dsl/environmentdsl/EnvironmentDsl" as environmentDsl
import "http://www.xkonnex.org/repo/dsl/profiledsl/ProfileDsl" as profileDsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as semanticsDsl
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

ModuleModel:
	imports+=Import*
	modules+=Module*;

/*
 * A (deployable) service module. External modules are provided by other organizations.<br/>
 * Client modules are only users other modules, but don't provide services themselves. 
 */	
Module:
	/* an externally provided module */
	(external?='external')? 
	/* The contains service clients only */
	(client?='client')? 
	/* the module is publically accessible */
	(public?='public')?
	 
	'module' name = QualifiedName '{'
		
		version = Version
		'lifecycle-state' state = [profileDsl::LifecycleState | QualifiedName]
		(governanceDecisions+=GovernanceDecision)*
		/* An additional named Qualifier of the module, may be referred to by bindings or other modules using this module */
		(qualifiers=QualifierRefs)?
		/*
		 * How is the module packaged? SCA, EAR etc.
		 */
		('assembly-type' assemblyType = AssemblyType)?
		('assembly-type-details' assemblyTypeDetails = STRING)?
		/* override the module name used by default for the modules technical name for deployment */
		('deployment-module-name' deploymentModuleName = STRING)?
		('groupId' groupId = STRING)?
		('artifactId' artifactId = STRING)?
		(	
			('release-on' releaseDate = STRING|DATE)? &
			('release-tag' releaseTag = STRING)? &		// Tag in VCS
			('source-location' source=STRING )? 		// Where can I get the sources? 
		)
		(additionalInfo=AdditionalInformation)?
		
		/* Declares services provided by the module */
		('provides' '{'
			/*
			 * Services that the module provides
			 */
			(providedServices += ServiceRef)*
			/*
			 * Services that the module provides
			 */
			(providedResources += ResourceRef)*
			/*
			 * Channels that the module provides
			 */
			(providedChannels += ChannelRef)*
			/*
			 * A namespace to provide all it's services, that match the modules state
			 */
			(providedNamespaces += NamespaceRef)*
			(defaultProvidingEndpoint = ProvidingEndpoint)?
		'}')?
		
		/* Declares services that are being used by this module. Services can be 
		 * referenced implicitly by referring to the providing module
		 */
		('uses' '{'
			(usedServices += ImportServiceRef)*
			(usedResource += ImportResourceRef)*
			(usedModules  += ModuleRef)*
			UsingEndpointFragment
//			('endpoint-protocol' usesEndpointProtocol=UsingEndpointProtocol)?
//			('alternative-endpoint-protocols ' (usesAlternativeEndpointProtocols+=UsingEndpointProtocol) (',' usesAlternativeEndpointProtocols+=UsingEndpointProtocol)*)?
//			(endpointQualifierRef=EndpointQualifierRef)?
		'}')?

		('contact-info' '{'
			('owner' owner=[basedsl::User|QualifiedName])?
			('responsible' responsible += [basedsl::User|QualifiedName])*
			('budgeting' budgeting = [basedsl::User|QualifiedName])?
		'}')?
		
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])*)?
		
		('subscriptions' '{'
			subscriptions += [basedsl::User|QualifiedName]*
		'}')?
			
	'}';
	

ProvidingEndpointConfig: ServiceRef | OperationRef | ParameterRef;

/**
 * Defines an endpoint on a module with protocol being used 
 */
Endpoint: ProvidingEndpoint | UsingEndpoint;

/**
 * Provide an endpoint on the module that provides the given endpoint-protocol and has 
 * the given endpoint qualifier. 
 */

ProvidingEndpoint:
	{ProvidingEndpoint}
		'endpoint-protocol' endpointProtocol=ProvidingEndpointProtocol
		(endpointQualifierRef=EndpointQualifierRef)?
;

/**
 * select an endpoint that provides the given endpoint-protocol and has (if defined) 
 * the given endpoint qualifier. This can be used to declaratively select a specific endpoint.
 * Endpoint qualifiers may become useful in migration scenarios, where you need to select either 
 * the legacy endpoint on the legacy server or the new endpoint on the new server. Such a qualifier
 * must be declared in the binding to be selected.
 */
UsingEndpoint:
	{UsingEndpoint}
		'endpoint-protocol' endpointProtocol=UsingEndpointProtocol
		/* fall back to other supported protocols, if necessary */
		('alternative-endpoint-protocols ' (alternativeEndpointProtocols+=UsingEndpointProtocol) (',' alternativeEndpointProtocols+=UsingEndpointProtocol)*)?
		(endpointQualifierRef=EndpointQualifierRef)?
;

fragment UsingEndpointFragment:
		('endpoint-protocol' usesEndpointProtocol=UsingEndpointProtocol)?
		('alternative-endpoint-protocols ' (usesAlternativeEndpointProtocols+=UsingEndpointProtocol) (',' usesAlternativeEndpointProtocols+=UsingEndpointProtocol)*)?
		(endpointQualifierRef=EndpointQualifierRef)?
;

AbstractServiceRef: ServiceRef | ImportServiceRef;
AbstractResourceRef: ResourceRef | ImportResourceRef;

/* 
 * Refers to a service constrained by the given version constraint
 */
ServiceRef: 
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef ('{'
		('operations' '{'
			operations+=OperationRef+
		'}')?
		providingEndpoints+=ProvidingEndpoint+
	'}')?
;
ResourceRef: 
	'resource' resource=[serviceDsl::Resource|QualifiedName] versionRef=VersionRef ('{'
		('operations' '{'
			operations+=OperationRef+
		'}')?
		providingEndpoints+=ProvidingEndpoint+
	'}')?
;

OperationRef:
	operation=[serviceDsl::AbstractOperation|QualifiedName] '{'
		('parameters' '{'
			parameters+=ParameterRef
		'}')?
		providingEndpoints+=ProvidingEndpoint+
	'}'
;

ParameterRef:
	parameter=[serviceDsl::Parameter|QualifiedName] '{'
		providingEndpoints+=ProvidingEndpointProtocol+
	'}'
;

ChannelRef:
	'channel' channel=[serviceDsl::Channel|QualifiedName] ('{'
		providingEndpoints+=ProvidingEndpoint+
	'}')?
;
	
/* 
 * Refers to a service imported by the module constrained by the given version constraint. 
 * The module to import the service from may be stated explicitly
 */
ImportServiceRef: SimpleImportServiceRef | DetailedImportServiceRef;
ImportResourceRef: SimpleImportResourceRef | DetailedImportResourceRef;
	
SimpleImportServiceRef returns ImportServiceRef:
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef 
;

DetailedImportServiceRef returns ImportServiceRef:
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef '{'
		/*	specify from which module(s) the service can be used, if not defined use the first module found, 
			that is not identical with the importing module */
		('from-any-module-of' '{'
			(modules+=ServiceModuleRef)(',' modules+=ServiceModuleRef)*
		'}')?
		(usingEndpoint=UsingEndpoint)?
	'}'
;

SimpleImportResourceRef returns ImportResourceRef:
	'resource' resource=[serviceDsl::Resource|QualifiedName] versionRef=VersionRef 
;

DetailedImportResourceRef returns ImportResourceRef:
	'resource' resource=[serviceDsl::Resource|QualifiedName] versionRef=VersionRef '{'
		/*	specify from which module(s) the service can be used, if not defined use the first module found, 
			that is not identical with the importing module */
		('from-any-module-of' '{'
			(modules+=ServiceModuleRef)(',' modules+=ServiceModuleRef)*
		'}')?
		(usingEndpoint=UsingEndpoint)?
	'}'
;

/*
 * References a module matching the name and version constraint. Additional qualifiers, i.e. names 
 * qualifying the other model, may be used to select the referenced module
 */
ServiceModuleRef:
	module=[Module|QualifiedName] version=VersionRef
;

ModuleRef:
	'module' moduleRef=ServiceModuleRef '{'
		('including' '{'
			(includedServices+=ServiceRef)*
			(includedResources+=ResourceRef)*
		'}')?
		('excluding' '{'
			(excludedServices+=ServiceRef)*
			(excludedResources+=ResourceRef)*
		'}')?
		(usingEndpoint=UsingEndpoint)?
	'}'
;

/* refer to a whole SubNamespace */
NamespaceRef: 
	'namespace' namespace=[serviceDsl::SubNamespace | QualifiedName] ('{'
		('including' '{'
			(inclSubNamespace?="include-sub-namespaces")?
			(inclDomainSubNamespace?="include-domain-sub-namespaces")?
			(includedServices+=ServiceRef)*
			(includedResources+=ResourceRef)*
		'}')?
		('excluding' '{'
			(excludedServices+=ServiceRef)*
			(excludedResources+=ResourceRef)*
		'}')?
	'}')?
;

/*
 *	How the module is packaged 
 */

//enum AssemblyType:
//	OTHER | JAR | WAR | EAR | OSGi | SCAComposite = 'SCA-Composite'| SCA_EAR = 'SCA-EAR' | WebMethods | dotNet = '.Net' | ZIP | DLL
//;

/**
 * Defines the type of an assembly / module. 
 */
AssemblyType: typeEnum=AssemblyTypeEnum | ExtensibleAssemblyType;

enum AssemblyTypeEnum: OTHER | JAR | WAR | EAR | OSGi | SCAComposite = 'SCA-Composite'| SCA_EAR = 'SCA-EAR' | WebMethods | dotNet = '.Net' | ZIP | DLL;

/**
 * Extensible variant of AssemblyType. 
 * Defines the type of an assembly / module. Only JvmTypes implementing the interface 
 * org.xkonnex.repo.dsl.moduledsl.ext.assembly.IAssemblyType are applicable
 */
ExtensibleAssemblyType: type=[jvmTypes::JvmType|QualifiedName];


/**
 * Defines a protocol to use for the service endpoint. Only JvmTypes implementing the interface 
 * org.xkonnex.repo.dsl.moduledsl.ext.protocol.IModuleEndpointProtocol are applicable
 */
EndpointProtocol: ProvidingEndpointProtocol|UsingEndpointProtocol;

ProvidingEndpointProtocol:
	type=[jvmTypes::JvmType|QualifiedName] ('{'
		assignment+=Assignment+
	'}')? 
;
UsingEndpointProtocol: 
	type=[jvmTypes::JvmType|QualifiedName]
;

QualifierRefs:
	'qualifier' (qualifiers+=[semanticsDsl::Qualifier|QualifiedName])(','qualifiers+=[semanticsDsl::Qualifier|QualifiedName])*
;

EndpointQualifierRef:
	'endpoint-qualifier' endpointQualifier=[semanticsDsl::Qualifier|QualifiedName] (acceptOtherEndpoints?='accepting-other-endpoints')?
;

ModuleDslComponent returns basedsl::Component: ExtensibleAssemblyType | ProvidingEndpointProtocol | UsingEndpointProtocol;


