/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.moduledsl

import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.resource.IEObjectDescription
import org.xkonnex.repo.dsl.basedsl.baseDsl.BaseDslFactory
import org.xkonnex.repo.dsl.basedsl.baseDsl.impl.BaseDslFactoryImpl
import org.xkonnex.repo.dsl.basedsl.converter.BaseDslValueConverterService
import org.xkonnex.repo.dsl.basedsl.resource.EObjectDescriptionBuilder
import org.xkonnex.repo.dsl.basedsl.resource.IEObjectDescriptionBuilder
import org.xkonnex.repo.dsl.basedsl.resource.VersionedResourceDescriptionStrategy
import org.xkonnex.repo.dsl.basedsl.search.DefaultPredicateSearch
import org.xkonnex.repo.dsl.basedsl.search.IPredicateSearch
import org.xkonnex.repo.dsl.basedsl.validation.IPluggableValidatorProvider
import org.xkonnex.repo.dsl.basedsl.validation.ReflectivePluggableValidatorProvider
import org.xkonnex.repo.dsl.environmentdsl.scoping.IEnvironmentPerspectiveSelector
import org.xkonnex.repo.dsl.environmentdsl.scoping.impl.DefaultEnvironmentPerspectiveSelector
import org.xkonnex.repo.dsl.moduledsl.query.IModuleReferenceResolver
import org.xkonnex.repo.dsl.moduledsl.query.IModuleServiceResolver
import org.xkonnex.repo.dsl.moduledsl.query.IModuleVersionMatcher
import org.xkonnex.repo.dsl.moduledsl.state.ModuleDslLifecycleStateResolver
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.DefaultStateMatcher
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.DefaultVersionFilterProvider
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.ILifecycleStateResolver
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.IStateMatcher
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.IVersionFilterProvider
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.LifecycleStateComparator
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.StateAttributeLifecycleStateResolver
import org.xkonnex.repo.dsl.profiledsl.state.DefaultStateResolver
import org.xkonnex.repo.dsl.moduledsl.query.DefaultModuleReferenceResolver
import org.xkonnex.repo.dsl.moduledsl.query.DefaultModuleServiceResolver
import org.xkonnex.repo.dsl.moduledsl.query.DefaultModuleVersionMatcher
import com.google.inject.Binder

/** 
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class ModuleDslRuntimeModule extends org.xkonnex.repo.dsl.moduledsl.AbstractModuleDslRuntimeModule {
	@org.eclipse.xtext.service.SingletonBinding(eager=true) def Class<? extends IPluggableValidatorProvider> bindIPluggableValidatorProvider() {
		return ReflectivePluggableValidatorProvider
	}

	def void configureIDefaultResourceDescriptionStrategy(Binder binder) {
		binder.bind(IDefaultResourceDescriptionStrategy).to(
			VersionedResourceDescriptionStrategy)
	}

	@org.eclipse.xtext.service.SingletonBinding def Class<? extends IEnvironmentPerspectiveSelector> bindIEnvironmentPerspectiveSelector() {
		return DefaultEnvironmentPerspectiveSelector
	}

	def Class<? extends LifecycleStateComparator> bindLifecycleStateComparator() {
		return LifecycleStateComparator
	}

	@org.eclipse.xtext.service.SingletonBinding(eager=true) def Class<? extends IEObjectDescriptionBuilder> bindEObjectDescriptionBuilder() {
		return EObjectDescriptionBuilder
	}

	def Class<? extends ILifecycleStateResolver> bindLifecycleStateResolver() {
		return ModuleDslLifecycleStateResolver
	}

	def Class<? extends IStateMatcher> bindIStateMatcher() {
		return DefaultStateMatcher
	}

	def Class<? extends IPredicateSearch> bindIPredicateSearch() {
		return DefaultPredicateSearch
	}

	def Class<? extends IModuleVersionMatcher> bindIModuleVersionMatcher() {
		return DefaultModuleVersionMatcher
	}

	def Class<? extends BaseDslFactory> bindBaseDslFactory() {
		return BaseDslFactoryImpl
	}

	def Class<? extends IModuleServiceResolver> bindIModuleServiceResolver() {
		return DefaultModuleServiceResolver
	}

	def Class<? extends IModuleReferenceResolver> bindIModuleReferenceResolver() {
		return DefaultModuleReferenceResolver
	}

	def Class<? extends IVersionFilterProvider> bindIVersionFilterProvider() {
		return DefaultVersionFilterProvider
	}

	override Class<? extends IValueConverterService> bindIValueConverterService() {
		return BaseDslValueConverterService
	}
}
