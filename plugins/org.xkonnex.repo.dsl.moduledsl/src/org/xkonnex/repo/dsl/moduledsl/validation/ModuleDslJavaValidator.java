/*
* generated by Xtext
*/
package org.xkonnex.repo.dsl.moduledsl.validation;

import java.util.ArrayList;
import java.util.List;
import java.util.Set;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.EcoreUtil2;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.validation.Check;
import org.xkonnex.repo.dsl.basedsl.search.IEObjectLookup;
import org.xkonnex.repo.dsl.basedsl.validation.NameAndVersionAreUniqueValidator;
import org.xkonnex.repo.dsl.basedsl.validation.PluggableChecks;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.AbstractServiceRef;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ImportServiceRef;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.Module;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ModuleDslPackage;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ServiceModuleRef;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ServiceRef;
import org.xkonnex.repo.dsl.moduledsl.query.IModuleServiceResolver;
import org.xkonnex.repo.dsl.moduledsl.query.ModuleLookup;
import org.xkonnex.repo.dsl.servicedsl.serviceDsl.Service;

import com.google.inject.Inject;

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
@PluggableChecks (
		validators={ModuleLifecycleStateValidator.class,
				NameAndVersionAreUniqueValidator.class}
)
public class ModuleDslJavaValidator extends org.xkonnex.repo.dsl.moduledsl.validation.AbstractModuleDslJavaValidator {

	@Inject
	private IEObjectLookup objLookup;
	@Inject
	private ModuleLookup modLookup;
	@Inject 
	private IModuleServiceResolver modServiceResolver;
	@Inject
	private IQualifiedNameProvider nameProvider;


	@Check
	public void importServiceRefHasProvidingmodule(ImportServiceRef importServiceRef) {
		Module owningModule = objLookup.getOwnerByType(importServiceRef, Module.class);
		if (importServiceRef.getModules().isEmpty()) {
			List<Service> candServices = new ArrayList<Service>();
			Set<Module> allModules = modLookup.findAllModules (importServiceRef.eResource().getResourceSet());
			for (Module mod : allModules) {
				if (!mod.equals(owningModule)) {
					extractProvidedServices(importServiceRef, candServices, mod);
				}
			}
			if (!candServices.contains(importServiceRef.getService())) {
				error ("The service " + nameProvider.getFullyQualifiedName (importServiceRef.getService()).toString() +" is not being provided by any module.", ModuleDslPackage.Literals.ABSTRACT_SERVICE_REF__SERVICE);
			}
		}
	}
	
	@Check
	public void importServiceRefServiceProvidedByModule(ServiceModuleRef modRef) {
		Module owningModule = objLookup.getOwnerByType(modRef, Module.class);
		if (modRef.eContainer() instanceof ImportServiceRef) {
			ImportServiceRef importServiceRef = (ImportServiceRef)modRef.eContainer();
			List<Service> candServices = new ArrayList<Service>();
			if (modRef.getModule() != owningModule) {
				extractProvidedServices(importServiceRef, candServices, modRef.getModule());
			}
			if (!candServices.contains(importServiceRef.getService())) {
				error ("The service " + nameProvider.getFullyQualifiedName (importServiceRef.getService()).toString() + " is not being provided by module " + nameProvider.getFullyQualifiedName (modRef.getModule()).toString() + ".", ModuleDslPackage.Literals.SERVICE_MODULE_REF__MODULE);
			}
		}
	}
	
	private void extractProvidedServices(EObject context,
			List<Service> candServices, Module targetModule) {
		Module mod = targetModule;
		if (mod != null) {
			if (mod.eIsProxy())
				mod = (Module)EcoreUtil2.resolve (targetModule, context.eResource().getResourceSet());
			Set<AbstractServiceRef> providedServiceRefs = modServiceResolver.getAllProvidedServiceRefs(targetModule);
			for (AbstractServiceRef serviceRef : providedServiceRefs) {
				if (serviceRef.eIsProxy()) {
					serviceRef = (ServiceRef) EcoreUtil2.resolve (serviceRef, context.eResource().getResourceSet());
				}
				if (serviceRef.getService() != null)
					candServices.add (serviceRef.getService());
			}
		}
	}
}
