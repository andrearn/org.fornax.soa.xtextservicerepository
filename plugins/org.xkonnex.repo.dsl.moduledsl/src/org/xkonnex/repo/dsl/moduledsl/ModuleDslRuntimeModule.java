/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.moduledsl;

import org.eclipse.xtext.conversion.IValueConverterService;
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.xkonnex.repo.dsl.basedsl.baseDsl.BaseDslFactory;
import org.xkonnex.repo.dsl.basedsl.baseDsl.impl.BaseDslFactoryImpl;
import org.xkonnex.repo.dsl.basedsl.converter.BaseDslValueConverterService;
import org.xkonnex.repo.dsl.basedsl.resource.EObjectDescriptionBuilder;
import org.xkonnex.repo.dsl.basedsl.resource.IEObjectDescriptionBuilder;
import org.xkonnex.repo.dsl.basedsl.resource.VersionedResourceDescriptionStrategy;
import org.xkonnex.repo.dsl.basedsl.search.DefaultPredicateSearch;
import org.xkonnex.repo.dsl.basedsl.search.IPredicateSearch;
import org.xkonnex.repo.dsl.basedsl.validation.IPluggableValidatorProvider;
import org.xkonnex.repo.dsl.basedsl.validation.ReflectivePluggableValidatorProvider;
import org.xkonnex.repo.dsl.environmentdsl.scoping.IEnvironmentPerspectiveSelector;
import org.xkonnex.repo.dsl.environmentdsl.scoping.impl.DefaultEnvironmentPerspectiveSelector;
import org.xkonnex.repo.dsl.moduledsl.query.IModuleReferenceResolver;
import org.xkonnex.repo.dsl.moduledsl.query.IModuleServiceResolver;
import org.xkonnex.repo.dsl.moduledsl.query.IModuleVersionMatcher;
import org.xkonnex.repo.dsl.moduledsl.state.ModuleDslLifecycleStateResolver;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.DefaultStateMatcher;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.DefaultVersionFilterProvider;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.ILifecycleStateResolver;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.IStateMatcher;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.IVersionFilterProvider;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.LifecycleStateComparator;
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.StateAttributeLifecycleStateResolver;
import org.xkonnex.repo.dsl.profiledsl.state.DefaultStateResolver;
import org.xkonnex.repo.dsl.moduledsl.query.DefaultModuleReferenceResolver;
import org.xkonnex.repo.dsl.moduledsl.query.DefaultModuleServiceResolver;
import org.xkonnex.repo.dsl.moduledsl.query.DefaultModuleVersionMatcher;

import com.google.inject.Binder;

/**
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
public class ModuleDslRuntimeModule extends org.xkonnex.repo.dsl.moduledsl.AbstractModuleDslRuntimeModule {

	@org.eclipse.xtext.service.SingletonBinding(eager=true)	
	public Class<? extends IPluggableValidatorProvider> bindIPluggableValidatorProvider () {
		return ReflectivePluggableValidatorProvider.class;
	}
	
	public void configureIDefaultResourceDescriptionStrategy (Binder binder) {
		binder.bind(IDefaultResourceDescriptionStrategy.class).to(VersionedResourceDescriptionStrategy.class);
	}
	
	@org.eclipse.xtext.service.SingletonBinding	
	public Class<? extends IEnvironmentPerspectiveSelector> bindIEnvironmentPerspectiveSelector () {
		return DefaultEnvironmentPerspectiveSelector.class;
	}

	public Class<? extends LifecycleStateComparator> bindLifecycleStateComparator () {
		return LifecycleStateComparator.class;
	}

	@org.eclipse.xtext.service.SingletonBinding(eager=true)	
	public Class<? extends IEObjectDescriptionBuilder> bindEObjectDescriptionBuilder () {
		return EObjectDescriptionBuilder.class;
	}
	
	public Class<? extends ILifecycleStateResolver> bindLifecycleStateResolver () {
		return ModuleDslLifecycleStateResolver.class;
	}
	
	public Class<? extends IStateMatcher> bindIStateMatcher () {
		return DefaultStateMatcher.class;
	}
	
	public Class<? extends IPredicateSearch> bindIPredicateSearch () {
		return DefaultPredicateSearch.class;
	}
	
	public Class<? extends IModuleVersionMatcher> bindIModuleVersionMatcher () {
		return DefaultModuleVersionMatcher.class;
	}
	
	public Class<? extends BaseDslFactory> bindBaseDslFactory () {
		return BaseDslFactoryImpl.class;
	}
	
	public Class<? extends IModuleServiceResolver> bindIModuleServiceResolver () {
		return DefaultModuleServiceResolver.class;
	}
	
	public Class<? extends IModuleReferenceResolver> bindIModuleReferenceResolver () {
		return DefaultModuleReferenceResolver.class;
	}
	
	public Class<? extends IVersionFilterProvider> bindIVersionFilterProvider () {
		return DefaultVersionFilterProvider.class;
	}
	
	@Override
	public Class<? extends IValueConverterService> bindIValueConverterService() {
		return BaseDslValueConverterService.class;
	}

}
