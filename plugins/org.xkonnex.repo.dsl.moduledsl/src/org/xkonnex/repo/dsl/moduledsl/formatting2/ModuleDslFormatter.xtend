/*
 * generated by Xtext 2.9.1
 */
package org.xkonnex.repo.dsl.moduledsl.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xkonnex.repo.dsl.basedsl.baseDsl.GovernanceDecision
import org.xkonnex.repo.dsl.basedsl.baseDsl.Import
import org.xkonnex.repo.dsl.basedsl.formatting2.BaseDslFormatter
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.EndpointProtocol
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ImportServiceRef
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.Module
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ModuleModel
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ModuleRef
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.NamespaceRef
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ServiceRef
import org.xkonnex.repo.dsl.moduledsl.services.ModuleDslGrammarAccess

class ModuleDslFormatter extends BaseDslFormatter {
	
	@Inject extension ModuleDslGrammarAccess

	def dispatch void format(ModuleModel moduleModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import imports : moduleModel.getImports()) {
			imports.format;
		}
		for (Module modules : moduleModel.getModules()) {
			modules.format;
		}
	}

	def dispatch void format(Module module, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		module.getVersion.format;
		for (GovernanceDecision governanceDecisions : module.getGovernanceDecisions()) {
			governanceDecisions.format;
		}
		module.getQualifiers.format;
		module.getAssemblyType.format;
		module.getAdditionalInfo.format;
		for (ServiceRef providedServices : module.getProvidedServices()) {
			providedServices.format;
		}
		for (NamespaceRef providedNamespaces : module.getProvidedNamespaces()) {
			providedNamespaces.format;
		}
		for (ImportServiceRef usedServices : module.getUsedServices()) {
			usedServices.format;
		}
		for (ModuleRef usedModules : module.getUsedModules()) {
			usedModules.format;
		}
		module.getUsesEndpointProtocol.format;
		for (EndpointProtocol usesAlternativeEndpointProtocols : module.getUsesAlternativeEndpointProtocols()) {
			usesAlternativeEndpointProtocols.format;
		}
		module.getEndpointQualifierRef.format;
	}
	
	// TODO: implement for ProvidingEndpoint, UsingEndpoint, ServiceRef, ImportServiceRef, ServiceModuleRef, ModuleRef, NamespaceRef
}
