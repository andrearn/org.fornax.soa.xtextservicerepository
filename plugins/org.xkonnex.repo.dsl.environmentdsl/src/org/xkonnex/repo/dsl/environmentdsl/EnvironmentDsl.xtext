/*
Copyright (c) 2010-2013 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
*/
grammar org.xkonnex.repo.dsl.environmentdsl.EnvironmentDsl with org.xkonnex.repo.dsl.basedsl.BaseDsl
generate environmentDsl "http://www.xkonnex.org/repo/dsl/environmentdsl/EnvironmentDsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as  baseDsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as  semanticsDsl
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

EnvModel:
	(imports+=EnvImport)*
	(users+=User)*
	(environments+=Environment)*;
	
EnvImport :
	'import' importedNamespace=QualifiedNameWithWildCard ; 
	
EnvFileImport:
	'import' importURI=STRING ;
	
Environment:
	'environment' name=ID 'of type' (type=EnvironmentType) '{'
		(hosts+=Host)*
		(servers+=Server)*
		('default' 'ESB' defaultESB=[ESB|QualifiedName])? 
		('default' 'Registry' defaultRegistry=[Registry|QualifiedName])? 
		('default' 'AppServer' defaultAppServer=[AppServer|QualifiedName])? 
		('default' 'Broker' defaultBroker=[Broker|QualifiedName])? 
	'}';
	
enum EnvironmentType: Prod = "Production-Environment" | Staging="Staging-Environment" | Test="Test-Environment" | Dev="Development-Environment" | Local="Local-Environment" | Other="Other-Environment";

EnvironmentComponent returns baseDsl::Component: Connector|Server;

Server: ESB | Registry | ProcessServer | AppServer | Broker | WebServer | Database | SAP | ExtensibleServer;

ExtensibleServer:
	(isDefault?='default')? 'server' name=ID 'type' type=[jvmTypes::JvmType|QualifiedName] '{'
		('identifier' dslCode=STRING )?
		('admins' admins+=[baseDsl::User|QualifiedName] )? 
		'host' host=[Host|QualifiedName] 
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		(
			'registries' '{'
				(registries+=RegistryService)+
			'}'
		)?
		('configuration' '{'
			(assignment+=Assignment)+ 
		'}')?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}'
;/* An Enterprise Service Bus */
ESB: 
	'esb' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' admins+=[baseDsl::User|QualifiedName] )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING )?
		('adminUrl' adminUrl=STRING )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		(
			'registries' '{'
				(registries+=RegistryService)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';

/* A service registry */
Registry:
	'registry' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' admins+=[baseDsl::User|QualifiedName] )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		('kind' kind=RegistryKind )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';
	
enum RegistryKind : UDDI | HTTP | File | Native;

RegistryService: JNDIRegistry | COSNamingRegistry | RMIRegistry | IOR | UDDIRegistry;

/* A Java JNDI registry */
JNDIRegistry: 
	'jndi' '{'
		'port' port = INT
		('secure-port' securePort = INT)?
		'jndi-url' url=STRING 
		('InitialContextFactory' initialContextFactory = STRING)?
		(clustered?='clustered')?
	'}'
;

/* A CORBA COS naming based registry */
COSNamingRegistry:
	'COS-Naming' '{'
		'port' port = INT
		('secure-port' securePort = INT)?
		(clustered?='clustered')?
	'}'
;

/* A plain Java RMI registry, where RMI capable objects are registered */
RMIRegistry:
	'RMI-Registry' '{'
		'port' port = INT
		('secure-port' securePort = INT)?
	'}'
;

/* A interface object repository, where CORBA objects are registered */
IOR:
	'Corba-IOR' '{'
		'port' port = INT
		('secure-port' securePort = INT)?
	'}'
;

/* A UDDI registry used to retrieve WDSLs of webservices */
UDDIRegistry:
	'UDDI' '{'
		'url' url = STRING
		('secure-url' secureUrl = STRING)?
	'}'
;

/* An application server */	
AppServer: 
	'appserver' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[baseDsl::User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING  )?
		('adminUrl' adminUrl=STRING  )?
		(dataSources+=DataSource)*
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		(
			'registries' '{'
				(registries+=RegistryService)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';

/* A HTTP webserver, e.g. Apache */
WebServer: 
	'webserver' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[baseDsl::User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING  )?
		('baseUrl' baseUrl=STRING  )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';
	
/* A business process server */
ProcessServer:
	'processserver'  name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[baseDsl::User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 
		('dir' home=STRING )?
		('deployDir' deployDir=STRING  )?
		('deployUser' deployUser=[baseDsl::User|QualifiedName] )?
		('adminUrl' adminUrl=STRING  )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		(
			'registries' '{'
				(registries+=RegistryService)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';

/* A message broker */
Broker: 
	'broker' name=ID '{'
		('identifier' dslCode=STRING )? 
		('admins' (admins+=[baseDsl::User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 'dir' home=STRING 
		('deployDir' deployDir=STRING )?
		('adminUrl' adminUrl=STRING )?
		('server-type' serverType=STRING )?
		('server-version' serverVersion=STRING )?
		(
			'connectors' '{'
				(connectors+=Connector)+
			'}'
		)?
		(
			'registries' '{'
				(registries+=RegistryService)+
			'}'
		)?
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}'; 

Database:  
	'database' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[baseDsl::User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName]  
		('dir' home=STRING )? 
		('dataDir' dataDir=STRING )? 
		('adminUrl' adminUrl=STRING  )?
		('jdbcUrl' jdbcUrl=STRING )?
		('database-type' serverType=STRING )?
		('database-version' serverVersion=STRING )?
		('{' (schema+=DatabaseSchema)+ '}')? 
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';

/* A SAP system */
SAP:  
	'sap' name=ID '{'
		('identifier' dslCode=STRING )?
		('admins' (admins+=[baseDsl::User|QualifiedName])+ )? 
		'host' host=[Host|QualifiedName] 
		'system-id' systemId = INT 
		('dir' home=STRING )?
		('dataDir' dataDir=STRING )?
		('adminUrl' adminUrl=STRING )? 
		('{' (client+=SapClient)+ '}')? 
		('tags' (tags+=[semanticsDsl::Tag|QualifiedName])+ )*
	'}';
	
SapClient: 
	'client' name=ID '{'
		'client-ID' client=INT 
		'owner' owner=STRING 
		('accountingArea' accountingArea=STRING)?
	'}';
	
DataSource:
	'data-source' name=ID '{'
		'jndi-name' jndiName=STRING 
		'schema' schema=[DatabaseSchema|QualifiedName] 
	'}';
	
/** @deprecated */	
enum DatabaseKind : Other | Oracle | DB2 | MSSQL | MySQL | Postgres | Sybase | HyperSonic | Ingres | Adabas | Derby | MongoDB | Hadoop | CouchDB | Neo4J;

DatabaseSchema: 
	'schema' name=ID 'owner' owner=STRING;

/*
 * A protocol, connector available on the server that support a specific protocol. E.g. used to expose service endpoints
 */
Connector:
	SOAPHTTP | SOAPJMS | REST | EJB | JMS | AMQP | IIOP | RMI | Tuxedo | RFC | FTP | IMAP | POP3 | SMTP | HTTP | TCP | ExtensibleConnector
;

ExtensibleConnector:
	(isDefault?='default')? 'connector' name=ID 'type' type=[jvmTypes::JvmType|QualifiedName] '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('protocol-versions' (version+=STRING)+)?
		('configuration' '{'
			(assignment+=Assignment)+ 
		'}')?
	'}'
;

enum EndpointVisibility: private | public | external;

/* Connector for SOAP over HTTP */
SOAPHTTP:
	{SOAPHTTP}
	(isDefault?='default')? 'SOAP/HTTP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
		('context-root' contextRoot=STRING)?
		('implementation' implementation=STRING)?
	'}';

/* Connector for SOAP over JMS */
SOAPJMS:
	(isDefault?='default')? 'SOAP/JMS' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		'port' port=INT
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
		connectionSpec=JCAConnectionSpec
		('implementation' implementation=STRING)?
	'}';

/* A HTTP REST connector */
REST:
	{REST}
	(isDefault?='default')? 'REST' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
		('context-root' contextRoot=STRING)?
	'}';

/* An EJB connector. Defines the RMI or IIOP ports */
EJB:
	{EJB}
	(isDefault?='default')? 'EJB' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
	'}'
;

/* A (CORBA) IIOP connector */
IIOP:
	{IIOP}
	(isDefault?='default')? 'IIOP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
		(connectionSpec=JCAConnectionSpec)?
	'}'
;

/* A Java RMI connector */
RMI:
	{RMI}
	(isDefault?='default')? 'RMI' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(connectionSpec=JCAConnectionSpec)?
	'}'
;

/* A Tuxedo RPC connector */
Tuxedo:
	{Tuxedo}
	(isDefault?='default')? 'Tuxedo' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
	'}'
;

/* A JMS connector */
JMS:
	(isDefault?='default')? 'JMS' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('versions' (version+=STRING)+)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
		connectionSpec=JCAConnectionSpec
		('implementation' implementation=STRING)?
	'}';

/* An AMQP based messaging connector */
AMQP:
	{AMQP}
	(isDefault?='default')? 'AMQP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
		(connectionSpec=JCAConnectionSpec)?
		('implementation' implementation=STRING)?
	'}'
;

/* A SAP RFC connector */
RFC: 
	{RFC}
	(isDefault?='default')? 'RFC' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(connectionSpec=JCAConnectionSpec)?
	'}';

/* A FTP file transfer connector */
FTP:
	{FTP}
	(isDefault?='default')? 'FTP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
	'}';

/* An IMAP mail connector */
IMAP:
	{IMAP}
	(isDefault?='default')? 'IMAP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
	'}';

/*
 * A POP3 mail connector
 */
POP3:
	{POP3}
	(isDefault?='default')? 'POP3' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort=INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
	'}';

JCAConnectionSpec:
	(isDefault?='default')? 'JCA-connection-spec' name=ID '{'
		'connection-factory-JNDI-name' connectionFactoryJNDI = STRING
		('connection-factory-class' connectionFactoryClass = STRING)?
	'}';

/*
 * An SMTP mail sender connector
 */
SMTP:
	{SMTP}
	(isDefault?='default')? 'SMTP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort = INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		(requiresAuth ?= 'requires-auth' )?
	'}';

/*
 * A plain HTTP connector
 */
HTTP:
	{HTTP}
	(isDefault?='default')? 'HTTP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		('port' port=INT)?
		('secured-port' securedPort = INT)?
		('security-protocol' securityProtocol=SecurityProtocol)?
		('context-root' contextRoot = STRING)?
		(requiresAuth ?= 'requires-auth' )?
	'}';
	
/*
 * A plain TCP connector
 */
TCP:
	(isDefault?='default')? 'TCP' name=ID '{'
		('endpoint-visibility' endpointVisibility=EndpointVisibility)?
		'port' port = INT
		('security-protocol' securityProtocol=SecurityProtocol)?
	'}';
	
/* A host, i.e. hardware */
Host:
	'host' name=ID '{'
		'full-qualified-name' fqn=STRING 
		('ip-address' ip=STRING)? 
		('identifier' dshCode=STRING )?
		('admins' admins+=[baseDsl::User|QualifiedName])?
	'}';

/* A system user */	
User returns baseDsl::User: 
	'user' name=ID '{'
		('firstname' firstname=STRING 'lastname' lastname=STRING )? 
		'email' email=STRING 
		('phone' phone=STRING )?
	'}';
	
enum SecurityProtocol: NONE | SSLv2 | SSLv3 | TLS | IPSec;
	
//QualifiedNameWithWildcard:
//	QualifiedName '.*'?;
//
//QualifiedName:
//	ID ('.' ID)*;

