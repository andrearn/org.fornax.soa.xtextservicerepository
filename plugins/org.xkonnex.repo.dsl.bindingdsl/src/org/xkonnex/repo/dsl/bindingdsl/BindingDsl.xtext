/*
Copyright (c) 2010-2018 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Vitaly Markin		- reviews
*/
grammar org.xkonnex.repo.dsl.bindingdsl.BindingDsl with org.xkonnex.repo.dsl.basedsl.BaseDsl

generate bindingDsl "http://www.xkonnex.org/repo/dsl/bindingdsl/BindingDsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as  baseDsl
import "http://www.xkonnex.org/repo/dsl/servicedsl/ServiceDsl" as serviceDsl
import "http://www.xkonnex.org/repo/dsl/moduledsl/ModuleDsl" as moduleDsl
import "http://www.xkonnex.org/repo/dsl/environmentdsl/EnvironmentDsl" as environmentDsl
import "http://www.xkonnex.org/repo/dsl/profiledsl/ProfileDsl" as profileDsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as semanticsDsl
import "http://www.xkonnex.org/repo/dsl/sladsl/SLADsl" as slaDsl
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

BindingModel:
	(imports+=Import)*
	(bindings+=Binding)*;


Binding: ModuleBinding | ServiceBinding | ResourceBinding | ChannelBinding;
AnyBinding: Binding | OperationBinding;



/* 
 * Providers are server connetors to outbound endpoints, when using a service
 */	
ConnectorQualifier:
	'on-connector' (connectors+=[environmentDsl::Connector | QualifiedName]) (',' connectors+=[environmentDsl::Connector | QualifiedName])*;

BindingComponent returns baseDsl::Component: BindingProtocol;

/*
 * Binds the referenced module to the given target environment. All services provided by the module become available in the
 * targeted environment
 */	
ModuleBinding:
	'bind-module' module=ModuleRef 'as' name=QualifiedName 'to' 
		(('environment' environment=[environmentDsl::Environment|QualifiedName] '{') | 
		 ('server' provServer = [environmentDsl::Server|QualifiedName]  '{' ) |
		 ('executable' provExecutable = [environmentDsl::Executable|QualifiedName]  '{' )
		)
		(endpointQualifierRef=EndpointQualifierRef)?
		(governanceDecisions+=GovernanceDecision)*
		/* The default endpoint protocols to be used by default. The protocols respective connector on the server is used to expose the service */
		('default-protocols' '{'
			(protocol+=BindingProtocol)+
		'}')?
		('default-resource-protocols' '{'
			(resourceProtocol+=BindingProtocol)+
		'}')?
		
		('default-policies' '{'
			(policies+=Policy)*
		'}')?
		('default-resource-policies' '{'
			(resourcePolicies+=Policy)*
		'}')?
		
		('default-assertions' '{'
			(assertions+=Assertion)+
		'}')?
		('default-resource-assertions' '{'
			(resourceAssertions+=Assertion)+
		'}')?
		
		(serviceBindings+=ServiceBinding)*
		(resourceBindings+=ResourceBinding)*
	'}'
;

ModuleRef: module=[moduleDsl::Module|QualifiedName] versionRef=VersionRef;

/*
 * Overrides the binding of a parent ModuleBinding for the given Service
 */
ServiceBinding:
	'bind-service' service=ServiceRef ('to' 
		(('environment' environment=[environmentDsl::Environment|QualifiedName]) | 
		 ('server' provServer = [environmentDsl::Server|QualifiedName])
		))? '{'
		(endpointQualifierRef=EndpointQualifierRef)?
		(governanceDecisions+=GovernanceDecision)*
		('provided-contract' providedContract=STRING)?
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('assertions' '{'
			(assertions+=Assertion)+
		'}')?
//		('references-module' referencedModule = ModuleRef)?
		(operation+=OperationBinding)*
	'}';

/*
 * References a service by  qualified name and a VersionRef constraint
 */	
ServiceRef:
	service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef;

/*
 * Overrides the binding of a parent ModuleBinding for the given Resource
 */
ResourceBinding:
	'bind-resource' resource=ResourceRef ('to' 
		(('environment' environment=[environmentDsl::Environment|QualifiedName]) | 
		 ('server' provServer = [environmentDsl::Server|QualifiedName])
		))? '{'
		(endpointQualifierRef=EndpointQualifierRef)?
		(governanceDecisions+=GovernanceDecision)*
		('provided-contract' providedContract=STRING)?
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('assertions' '{'
			(assertions+=Assertion)+
		'}')?
//		('references-module' referencedModule = ModuleRef)?
		(operation+=OperationBinding)*
	'}';

/*
 * References a resource by  qualified name and a VersionRef constraint
 */	
ResourceRef:
	resource=[serviceDsl::Resource|QualifiedName] versionRef=VersionRef;
	
/*
 * Overrides the binding of a parent ModuleBinding for the given Channel
 */
ChannelBinding:
	'bind-channel' channel=[serviceDsl::Channel|QualifiedName] ('to' 
		(('environment' environment=[environmentDsl::Environment|QualifiedName]) | 
		 ('server' provServer = [environmentDsl::Server|QualifiedName])
		))? '{'
		(endpointQualifierRef=EndpointQualifierRef)?
		(governanceDecisions+=GovernanceDecision)*
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		('policies' '{'
			(policies+=Policy)*
		'}')?
		('assertions' '{'
			(assertions+=Assertion)+
		'}')?
		('references-module' referencedModule = ModuleRef)?
	'}';


/*
 * The endpoint protocol of the entpoint on which the service is provided
 */																																				
BindingProtocol: SOAP | ExtensibleProtocol;

/*
 * Overrides the binding of a parent ServiceBinding for the given service Operation
 */
OperationBinding: 
	'bind-operation' operation=[serviceDsl::AbstractOperation|QualifiedName] '{' 
		(endpointQualifierRef=EndpointQualifierRef)?
		(governanceDecisions+=GovernanceDecision)*
		//protocol on inbound endpoint 
		'protocols' '{'
			(protocol+=BindingProtocol)+
		'}'
		/** protocol on outbound endpoint of channel on a bus, 
		 * i.e. the protocol of the actual service provider 
		 to which the call is delegated*/ 
		('provider-protocols' '{'
			(providerProtocol+=BindingProtocol)+
		'}')?
		('policies' '{'
			(policies+=Policy)*
		'}')?
		/** policies on the outbound endpoint of a channel on a bus, 
		 * i.e. the protocol of the actual service provider 
		 to which the call is delegated*/ 
		('provider-policies' '{'
			(providerPolicies+=Policy)*
		'}')?
		('assertions' '{'
			(assertions+=Assertion)+
		'}')?
	'}';



//Protocols 
/**
 * Protocol definition as Java class implementing 
 * {@link org.xkonnex.repo.dsl.bindingdsl.ext.protocol.IProtocol}
 */
ExtensibleProtocol: type=[jvmTypes::JvmType|QualifiedName] '{'
		(endpointQualifierRef=EndpointQualifierRef)?
		(endpointConnector=ConnectorQualifier)?
		assignment+=Assignment*
	'}';

/* Use SOAP on the endpoint */
SOAP: 
	'SOAP' '{'
		{SOAP}
		(endpointQualifierRef=EndpointQualifierRef)?
		(endpointConnector=ConnectorQualifier)?
		('style' style=SOAPStyle )?
		('protocol-version' protocolVersion = SOAPProtocolVersion)?
		('transport' transport=SOAPTransport)?
		('http-context-root' contextRoot = STRING )?
		('provided-WSDL-Url' providedWsdlUrl = STRING )?
	'}';
	
enum SOAPStyle: doclitwrap='document/literal-wrapped' | rpclit = 'rpc/literal' | rpcenc='rpc/encoded';
enum SOAPTransport: HTTP | JMS | SMTP;
enum SOAPProtocolVersion: SOAP11='SOAP-v1.1' | SOAP12 = 'SOAP-v1.2';


// Policies

/* Service policies */
Policy: LogPolicy | SecurityPolicy;

/* Logging policy to be applied to the services */
LogPolicy: 'logging-policy' logPolicy=LogPolicyKind ;

/* Security policy to be applied to the services */
SecurityPolicy : AuthenticationPolicy | SigningPolicy | EncryptionPolicy;

/* Policy, that defines how consumer are authenticated */
AuthenticationPolicy : 
	{AuthenticationPolicy}
	'authn-policy' (name=ID)? (optional?='optional')? '{'
		'auth-tokens' '{'
			(authTokens+=AuthToken)+
		'}'
		'hash-algorithms' '{'
			(hashAlgorithms+=HashAlgorithm)*
		'}'
		(useNonce?='use-nonce')?
		('issuer' issuer = STRING)?
	'}';
	
/* How messages are signed, to verify their authenticity */
SigningPolicy : 
	{SigningPolicy} 
	'signing-policy' '{'
		('supported-algorithms' supportedSigningAlgorithms+=SigningAlgorithm+)?
		('requires-algorithm' requiredSigningAlgorithm=SigningAlgorithm)?
		('signed-message-parts' (signedParts+=MessagePartRef)(',' signedParts+=MessagePartRef)*)?
	'}'
;

MessagePartRef: messagePartRef = MessagePartRefKind ('expression' partRefExpression=STRING)?;

enum MessagePartRefKind: header | body | attachments | all | expression;


/* How messages are encrypted */
EncryptionPolicy : 
	{EncryptionPolicy} 
	'encryption-policy' '{'
		('supported-algorithms' supportedCipherAlgorithms+=CipherAlgorithmKind+)?
		('requires-algorithm' requiredCipherAlgorithm=CipherAlgorithmKind)?
		('encrypted-message-parts' (encryptedParts+=MessagePartRef)(',' encryptedParts+=MessagePartRef)*)?
	'}'
;

enum LogPolicyKind: none | header | all;

/** A nonfunctional requirement claimed to be met */
Assertion: AvailabilityAssertion | LatencyAssertion | CapacityAssertion | ReliabilityAssertion | CostAssertion | AccuracyAssertion | PredefinedAssertion;

PredefinedAssertion: 'predefined-assertion' assertion=[slaDsl::Assertion|QualifiedName];

AvailabilityAssertion:
	{AvailabilityAssertion}
	'availability-assertion' '{'
		('availability' availability=STRING)? 
		('mean-time-between-failure' mtbf=STRING)?
		('mean-time-to-repair' mttr=STRING ('percentile' mttrPercentile=Percentile)?)?
		('regular-down-times' regularDownTimes = STRING)?
	'}'
;

LatencyAssertion:
	'latency' latency="STRING" 'percentile' percentile=Percentile
;

CapacityAssertion:
	{CapacityAssertion}
	'capacity-assertion' '{' 
		('num-of-requests' requestNum=STRING 'per' timeUnit=STRING)?
		('message-size' messageSize=STRING)?
	'}'
;

ReliabilityAssertion:
	'reliability-assertion' '{'
		'message-exchange-reliability' reliability=ReliabilityKind
		(inOrderDelivery ?= 'in-order-delivery')?
	'}'
;

enum ReliabilityKind: EXACTLY_ONCE = 'exactly-once' | AT_MOST_ONCE = 'at-most-once' | AT_LEAST_ONCE = 'at-least-once' | BEST_EFFORT = 'best-effort';
CostAssertion:
	'costs-assertion' '{'
		'costs' costsAmount=STRING
		'billed-per-unit' billedUnit=STRING
	'}'
;

AccuracyAssertion:
	'accuracy-assertion' '{'
		'max-error-rate' maxErrorRate=STRING
	'}'
;


Percentile hidden(): percentile=INT('.'INT)?'%';

EndpointQualifierRef:
	'endpoint-qualifier' endpointQualifier=[semanticsDsl::Qualifier|QualifiedName]
;

