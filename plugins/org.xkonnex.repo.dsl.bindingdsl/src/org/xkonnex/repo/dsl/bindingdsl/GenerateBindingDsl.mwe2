module org.xkonnex.repo.dsl.bindingdsl.BindingDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*
import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

var grammarURI = "classpath:/org/xkonnex/repo/dsl/bindingdsl/BindingDsl.xtext"
var baseName = "org.xkonnex.repo.dsl.bindingdsl"
var dslName = "org.xkonnex.repo.dsl.bindingdsl.BindingDsl"
var file.extensions = "binddsl"
var projectName = "org.xkonnex.repo.dsl.bindingdsl"
var runtimeProject = "../${projectName}"
var rootPath = ".."

var baseMetaModel="platform:/resource/org.xkonnex.repo.dsl.basedsl/model/generated/BaseDsl.ecore"
var baseGenModel="platform:/resource/org.xkonnex.repo.dsl.basedsl/model/generated/BaseDsl.genmodel"

var semMetaModel = "platform:/resource/org.xkonnex.repo.dsl.semanticsdsl/model/generated/SemanticsDsl.ecore"
var semGenModel = "platform:/resource/org.xkonnex.repo.dsl.semanticsdsl/model/generated/SemanticsDsl.genmodel"

var svcMetaModel = "platform:/resource/org.xkonnex.repo.dsl.servicedsl/model/generated/ServiceDsl.ecore"
var svcGenModel = "platform:/resource/org.xkonnex.repo.dsl.servicedsl/model/generated/ServiceDsl.genmodel"

var modMetaModel = "platform:/resource/org.xkonnex.repo.dsl.moduledsl/model/generated/ModuleDsl.ecore"
var modGenModel = "platform:/resource/org.xkonnex.repo.dsl.moduledsl/model/generated/ModuleDsl.genmodel"

var envMetaModel = "platform:/resource/org.xkonnex.repo.dsl.environmentdsl/model/generated/EnvironmentDsl.ecore"
var envGenModel = "platform:/resource/org.xkonnex.repo.dsl.environmentdsl/model/generated/EnvironmentDsl.genmodel"

var profMetaModel="platform:/resource/org.xkonnex.repo.dsl.profiledsl/model/generated/ProfileDsl.ecore"
var profGenModel="platform:/resource/org.xkonnex.repo.dsl.profiledsl/model/generated/ProfileDsl.genmodel"

var slaMetaModel="platform:/resource/org.xkonnex.repo.dsl.sladsl/model/generated/SLADsl.ecore"
var slaGenModel="platform:/resource/org.xkonnex.repo.dsl.sladsl/model/generated/SLADsl.genmodel"

Workflow {
    bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
		scanClassPath=true
		uriMap = { to = semMetaModel from = "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" }
		uriMap = { to = svcMetaModel from = "http://www.xkonnex.org/repo/dsl/servicedsl/ServiceDsl" }
		uriMap = { to = modMetaModel from = "http://www.xkonnex.org/repo/dsl/moduledsl/ModuleDsl" }
		uriMap = { to = envMetaModel from = "http://www.xkonnex.org/repo/dsl/environmentdsl/EnvironmentDsl" }
		uriMap = { to = profMetaModel from = "http://www.xkonnex.org/repo/dsl/profiledsl/ProfileDsl" }
		uriMap = { to = slaMetaModel from = "http://www.xkonnex.org/repo/dsl/sladsl/SLADsl" }
		registerEcoreFile = baseMetaModel
		registerEcoreFile = semMetaModel
		registerEcoreFile = svcMetaModel
		registerEcoreFile = modMetaModel
		registerEcoreFile = envMetaModel
		registerEcoreFile = profMetaModel
		registerEcoreFile = slaMetaModel
		registerGenModelFile = baseGenModel
		registerGenModelFile = semGenModel
		registerGenModelFile = svcGenModel
		registerGenModelFile = modGenModel
		registerGenModelFile = envGenModel
		registerGenModelFile = profGenModel
		registerGenModelFile = slaGenModel
		registerGenModelFile = "platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}
	component = DirectoryCleaner {
		directory = "${runtimeProject}/model/generated"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ide/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = XtextGenerator {
		configuration = {
			project = StandardProjectConfig {
				baseName = baseName
				rootPath = rootPath
				runtimeTest = {
					enabled = true
					root = "${runtimeProject}/../../test/${projectName}.test"
				}
				eclipsePlugin = {
					enabled = true
				}
				eclipsePluginTest = {
					enabled = false
				}
				ideaPlugin = {
					enabled = false
				}
				web = {
					enabled = true
				}
				createEclipseMetaData = true
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
			}
		}
		language = XtextGeneratorLanguage {
			name = dslName
			fileExtensions = file.extensions
			grammarUri=grammarURI
			
			referencedResource="platform:/resource/org.eclipse.xtext.common.types/model/JavaVMTypes.genmodel"
			referencedResource=baseGenModel
			referencedResource=envGenModel
			referencedResource=semGenModel
			referencedResource=profGenModel
			referencedResource=svcGenModel
			referencedResource=slaGenModel
			referencedResource=modGenModel
			
		    fragment = grammarAccess.GrammarAccessFragment2 {}
		    fragment = ecore.EMFGeneratorFragment2 {}
		    fragment = serializer.SerializerFragment2 {
		    	generateStub = true
		    	generateXtendStub = false
		    }
		    fragment = resourceFactory.ResourceFactoryFragment2 {}
		    fragment = parser.antlr.XtextAntlrGeneratorFragment2 {
		    	options = {
		    		backtrack = true
					classSplitting = true
				}
				antlrParam = "-Xmaxinlinedfastates"
				antlrParam = "30"
		    }
		    fragment = validation.ValidatorFragment2 {
		    	generateStub = true
		    	generateXtendStub = false
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
		    }
		    fragment = scoping.ImportNamespacesScopingFragment2 {
		    	generateStub = true
		    	generateXtendStub = false
		    }
		    fragment = exporting.QualifiedNamesFragment2 {}
		    fragment = builder.BuilderIntegrationFragment2 {}
//		    fragment = generator.GeneratorFragment2 {}
		    fragment = formatting.Formatter2Fragment2 {}
		    fragment = ui.labeling.LabelProviderFragment2 {
		    	generateStub = true
		    	generateXtendStub = true
		    }
		    fragment = ui.outline.QuickOutlineFragment2 {}
		    fragment = ui.outline.OutlineTreeProviderFragment2 {
		    	generateStub = true
		    	generateXtendStub = true
		    }
		    fragment = ui.quickfix.QuickfixProviderFragment2 {
		    	generateStub = true
		    	generateXtendStub = false
		    }
		    fragment = ui.contentAssist.ContentAssistFragment2 {
		    	generateStub = true
		    	generateXtendStub = false
		    }
		    fragment = junit.Junit4Fragment2 {}
		    fragment = ui.refactoring.RefactorElementNameFragment2 {}
		    fragment = types.TypesGeneratorFragment2 {}
		    fragment = xbase.XtypeGeneratorFragment2 {}
//		    fragment = xbase.XbaseGeneratorFragment2 {}
		    fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
		    fragment = ui.compare.CompareFragment2 {}
		    fragment = idea.parser.antlr.XtextAntlrIDEAGeneratorFragment {
		    	options = {
		    		backtrack = true
					classSplitting = true
				}
				antlrParam = "-Xmaxinlinedfastates"
				antlrParam = "30"
		    }
//		    fragment = idea.IdeaPluginGenerator {}
		    fragment = web.WebIntegrationFragment {
		        framework = "Orion"
		    }			
		}
	}

}
