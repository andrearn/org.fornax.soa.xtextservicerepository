/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.bindingdsl.ui.labeling

import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.common.types.JvmIdentifiableElement
import org.eclipse.xtext.common.types.JvmType
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider
import org.xkonnex.repo.dsl.basedsl.baseDsl.Assignment
import org.xkonnex.repo.dsl.basedsl.ui.labeling.BaseDslLabelHelper
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.BindingProtocol
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.EJB
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ExtensibleProtocol
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ModuleBinding
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.SAP
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.SOAP
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ServiceBinding
import org.xkonnex.repo.dsl.bindingdsl.util.BindingDslHelper
import org.xkonnex.repo.dsl.environmentdsl.environmentDsl.Environment
import org.xkonnex.repo.dsl.environmentdsl.environmentDsl.Server
import org.xkonnex.repo.dsl.bindingdsl.binding.query.environment.EnvironmentBindingResolver
import org.xkonnex.repo.dsl.servicedsl.serviceDsl.DomainNamespace
import org.xkonnex.repo.dsl.servicedsl.serviceDsl.SubNamespace
import com.google.inject.Inject

/** 
 * Provides labels for a EObjects.
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#labelProvider
 */
class BindingDslLabelProvider extends DefaultEObjectLabelProvider {
	@Inject package EnvironmentBindingResolver envBindResolver

	@Inject new(AdapterFactoryLabelProvider delegate) {
		super(delegate)
	}

	def String image(ModuleBinding ele) {
		return "full/obj16/messageexchange.gif"
	}

	def String text(
		ServiceBinding ele) {
		return '''«ele.getService().getService().getName()» «BaseDslLabelHelper.getVersionConstraint(ele.getService().getVersionRef())»'''
	}

	def String text(ModuleBinding m) {
		return '''«m.getModule().getModule().getName()» -> «envBindResolver.resolveEnvironment(m).getName()»'''
	}

	def String text(SOAP ele) {
		var Server server = envBindResolver.resolveServer(ele)
		if(server !== null) return '''SOAP -> «server.getName()»''' else return "SOAP"
	}

	def String text(SAP ele) {
		var String clientText = null
		if (ele.getClient() !== null) {
			var org.xkonnex.repo.dsl.environmentdsl.environmentDsl.SAP sapServer = (ele.getClient().
				eContainer() as org.xkonnex.repo.dsl.environmentdsl.environmentDsl.SAP)
			clientText = sapServer.getName() + ele.getClient().getClient()
		}
		if(clientText !== null) return '''SAP -> «clientText»''' else return "SAP"
	}

	def String text(EJB ele) {
		var Server server = envBindResolver.resolveServer(ele)
		var StringBuffer label = new StringBuffer("EJB")
		var SubNamespace ns = BindingDslHelper.getSubNamespace(ele)
		if (server === null) {
			var Environment env = envBindResolver.resolveEnvironment(ele)
			if(ns instanceof DomainNamespace) server = env.getDefaultESB() else server = env.getDefaultAppServer()
		}
		if(server !== null) label.append(''' -> «server.getName()»''')
		if (ele.getJndiName() !== null) {
			var String[] jndiNameParts = ele.getJndiName().split("/")
			if(jndiNameParts.length > 0) label.
				append('''/«{val _rdIndx_jndiNameParts=jndiNameParts.length - 1 jndiNameParts.get(_rdIndx_jndiNameParts)}»''')
		}
		return label.toString()
	}

	def String text(ExtensibleProtocol ele) {
		var Server server = envBindResolver.resolveServer(ele)
		var JvmType protocolType = ele.getType()
		if(server !== null) return '''«protocolType.getSimpleName()» -> «server.getName()»''' else return protocolType.
			getSimpleName()
	}

	def String text(Assignment ele) {
		var JvmIdentifiableElement feature = ele.getFeature()
		if (feature !== null) {
			var String featureName = feature.getSimpleName()
			if (featureName.startsWith("set") || featureName.startsWith("add")) {
				return featureName.substring(3).toFirstLower
			} else {
				return featureName
			}
		} else {
			return "Unnamed"
		}
	}

	def package String image(ServiceBinding ele) {
		return "full/obj16/invoke.gif"
	}

	def package String image(BindingProtocol ele) {
		return "full/obj16/message_part.gif"
	}

	def package String image(SOAP ele) {
		return "full/obj16/message_part.gif"
	}

	def package String image(SAP ele) {
		return "full/obj16/message_part.gif"
	}
}
