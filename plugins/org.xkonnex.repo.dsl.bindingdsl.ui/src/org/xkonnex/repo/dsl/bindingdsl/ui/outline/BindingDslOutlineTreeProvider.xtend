/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.bindingdsl.ui.outline

import org.eclipse.xtext.ui.editor.outline.IOutlineNode
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.Assertion
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.BindingModel
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ChannelBinding
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ModuleBinding
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.OperationBinding
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.Policy
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ServiceBinding
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.BindingDslPackage
import com.google.inject.Inject
import org.eclipse.xtext.ui.IImageHelper

/** 
 * customization of the default outline structure
 */
class BindingDslOutlineTreeProvider extends DefaultOutlineTreeProvider {
	
	@Inject
	private IImageHelper imageHelper;
	
	def protected _createChildren(DocumentRootNode parentNode, BindingModel model) {
		parentNode.createEStructuralFeatureNode(model, BindingDslPackage.Literals.BINDING_MODEL__IMPORTS,
			imageHelper.getImage("impc_obj.gif"), "import declarations", false);
		for (binding : model.bindings) {
			parentNode.createNode(model)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, ModuleBinding bind) {
		for (prot : bind.protocol) {
			parentNode.createNode(prot)
		}
		for (pol : bind.policies) {
			parentNode.createNode(pol)
		}
		for (assertion : bind.assertions) {
			parentNode.createNode(assertion)
		}
		for (svcBind : bind.serviceBindings) {
			parentNode.createNode(svcBind)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, ServiceBinding bind) {
		for (prot : bind.protocol) {
			parentNode.createNode(prot)
		}
		for (pol : bind.policies) {
			parentNode.createNode(pol)
		}
		for (assertion : bind.assertions) {
			parentNode.createNode(assertion)
		}
		for (opBind : bind.operation) {
			parentNode.createNode(opBind)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, ChannelBinding bind) {
		for (prot : bind.protocol) {
			parentNode.createNode(prot)
		}
		for (pol : bind.policies) {
			parentNode.createNode(pol)
		}
		for (assertion : bind.assertions) {
			parentNode.createNode(assertion)
		}
	}
	
	def protected _createChildren(IOutlineNode parentNode, OperationBinding bind) {
		for (prot : bind.protocol) {
			parentNode.createNode(prot)
		}
		for (pol : bind.policies) {
			parentNode.createNode(pol)
		}
		for (assertion : bind.assertions) {
			parentNode.createNode(assertion)
		}
	}
	
	def protected _isLeaf(Assertion assertion) {
		true
	}
	
	def protected _isLeaf(Policy assertion) {
		true
	}
	
}
