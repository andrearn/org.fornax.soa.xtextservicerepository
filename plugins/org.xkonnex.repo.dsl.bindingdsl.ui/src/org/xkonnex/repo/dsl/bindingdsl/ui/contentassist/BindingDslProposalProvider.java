/*
* generated by Xtext
*/
package org.xkonnex.repo.dsl.bindingdsl.ui.contentassist;

import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.common.types.JvmType;
import org.eclipse.xtext.common.types.access.IJvmTypeProvider;
import org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider;
import org.eclipse.xtext.common.types.xtext.ui.ITypesProposalProvider;
import org.eclipse.xtext.common.types.xtext.ui.TypeMatchFilters;
import org.eclipse.xtext.nodemodel.ICompositeNode;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.nodemodel.util.NodeModelUtils;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;
import org.xkonnex.repo.dsl.basedsl.baseDsl.AuthTokenKind;
import org.xkonnex.repo.dsl.basedsl.baseDsl.BaseDslPackage;
import org.xkonnex.repo.dsl.basedsl.baseDsl.CipherAlgorithmKind;
import org.xkonnex.repo.dsl.basedsl.baseDsl.HashAlgorithmKind;
import org.xkonnex.repo.dsl.basedsl.baseDsl.Import;
import org.xkonnex.repo.dsl.basedsl.baseDsl.MajorVersionRef;
import org.xkonnex.repo.dsl.basedsl.baseDsl.SigningAlgorithm;
import org.xkonnex.repo.dsl.basedsl.ext.crypto.ICipherAlgoritm;
import org.xkonnex.repo.dsl.basedsl.ext.crypto.IHashAlgorithm;
import org.xkonnex.repo.dsl.basedsl.ext.crypto.ISigningAlgorithm;
import org.xkonnex.repo.dsl.basedsl.ext.token.IAuthTokenKind;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.AuthenticationPolicy;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.BindingDslPackage;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.BindingModel;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.EncryptionPolicy;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ExtensibleProtocol;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ModuleRef;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.ServiceRef;
import org.xkonnex.repo.dsl.bindingdsl.bindingDsl.SigningPolicy;
import org.xkonnex.repo.dsl.bindingdsl.ext.protocol.IProtocol;
import org.xkonnex.repo.dsl.moduledsl.moduleDsl.ModuleDslPackage;
import org.xkonnex.repo.dsl.servicedsl.serviceDsl.ServiceDslPackage;

import com.google.common.base.Function;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;
import com.google.inject.Inject;

/**
 * see http://www.eclipse.org/Xtext/documentation/latest/xtext.html#contentAssist on how to customize content assistant
 */
@SuppressWarnings("restriction")
public class BindingDslProposalProvider extends AbstractBindingDslProposalProvider {
	
	@Inject
	private ITypesProposalProvider typeProposalProvider;
	
	@Inject
	private AbstractTypeScopeProvider typeScopeProvider;

	public void complete_VersionId(EObject model, RuleCall ruleCall, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		calculateVersionProposals(model, context, acceptor, false);
	}
	
	public void complete_INT(EObject model, RuleCall ruleCall, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model.eContainer() instanceof MajorVersionRef || model.eContainer() instanceof ModuleRef || model instanceof ServiceRef)  {
			calculateVersionProposals(model, context, acceptor, true);
		} else {
			super.complete_INT (model, ruleCall, context, acceptor);
		}
	}	

	private void calculateVersionProposals(EObject model,
			ContentAssistContext context, ICompletionProposalAcceptor acceptor, boolean isCompleteInt) {
		EObject canditateRoot = model;
		while ( !(canditateRoot instanceof BindingModel) && model.eContainer() != null) {
			canditateRoot = canditateRoot.eContainer();
		}
		if (canditateRoot instanceof BindingModel) {
			BindingModel moduleModel = (BindingModel) canditateRoot;
			EList<Import> imports = moduleModel.getImports();
			final Iterable<String> importedNamespaces = Lists.transform (imports, new Function<Import, String> () {
	
				public String apply (Import from) {
					return from.getImportedNamespace().replaceAll("\\.\\*", "");
				}
				
			});
			Iterable<String> canditateVersions = Sets.newHashSet();
			if (model.eContainer() instanceof ModuleRef) {
				ICompositeNode moduleRefNode = NodeModelUtils.findActualNodeFor(model.eContainer());
				INode xrefNode = moduleRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String moduleName = xrefNode.getText().trim();
					final String className = ModuleDslPackage.Literals.MODULE.getName();
					canditateVersions = getCanditateVersions (moduleName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef || model instanceof MajorVersionRef);
				}
			} else if (model instanceof ModuleRef) {
				ICompositeNode moduleRefNode = NodeModelUtils.findActualNodeFor(model);
				INode xrefNode = moduleRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String moduleName = xrefNode.getText().trim();
					final String className = ModuleDslPackage.Literals.MODULE.getName();
					canditateVersions = getCanditateVersions (moduleName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef);
				}
			} else if (model.eContainer() instanceof ServiceRef) {
				ICompositeNode svcRefNode = NodeModelUtils.findActualNodeFor(model.eContainer());
				INode xrefNode = svcRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String svcName = xrefNode.getText().trim();
					final String className = ServiceDslPackage.Literals.SERVICE.getName();
					canditateVersions = getCanditateVersions (svcName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef);
				}
			} else if (model instanceof ServiceRef) {
				ICompositeNode svcRefNode = NodeModelUtils.findActualNodeFor(model);
				INode xrefNode = svcRefNode.getFirstChild();
				EObject xrefGElem = xrefNode.getGrammarElement();
				if (xrefGElem instanceof CrossReference) {
					final String svcName = xrefNode.getText().trim();
					final String className = ServiceDslPackage.Literals.SERVICE.getName();
					canditateVersions = getCanditateVersions (svcName, className, importedNamespaces, model.eContainer() instanceof MajorVersionRef || isCompleteInt);
				}
			}
			for (String version : canditateVersions) {
				acceptor.accept (createCompletionProposal(version, context));
			}
		}
	}
	
	@Override
	public void completeExtensibleProtocol_Type(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
		JvmType protocolType = typeProvider.findTypeByName(IProtocol.class.getCanonicalName());
		typeProposalProvider.createSubTypeProposals(protocolType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
	}
	
	@Override
	public void completeAuthenticationPolicy_AuthTokens(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof AuthenticationPolicy) {
			IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
			JvmType protocolType = typeProvider.findTypeByName(IAuthTokenKind.class.getCanonicalName());
			typeProposalProvider.createSubTypeProposals(protocolType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
	
	@Override
	public void completeAuthenticationPolicy_HashAlgorithms(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof AuthenticationPolicy) {
			IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
			JvmType hashType = typeProvider.findTypeByName(IHashAlgorithm.class.getCanonicalName());
			typeProposalProvider.createSubTypeProposals(hashType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
	
	@Override
	public void completeEncryptionPolicy_RequiredCipherAlgorithm(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof EncryptionPolicy) {
			IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
			JvmType cipherType = typeProvider.findTypeByName(ICipherAlgoritm.class.getCanonicalName());
			typeProposalProvider.createSubTypeProposals(cipherType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
	
	@Override
	public void completeEncryptionPolicy_SupportedCipherAlgorithms(
			EObject model, Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof EncryptionPolicy) {
			IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
			JvmType cipherType = typeProvider.findTypeByName(ICipherAlgoritm.class.getCanonicalName());
			typeProposalProvider.createSubTypeProposals(cipherType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
	
	@Override
	public void completeSigningPolicy_RequiredSigningAlgorithm(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof SigningPolicy) {
			IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
			JvmType signingType = typeProvider.findTypeByName(ISigningAlgorithm.class.getCanonicalName());
			typeProposalProvider.createSubTypeProposals(signingType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
		
	@Override
	public void completeSigningPolicy_SupportedSigningAlgorithms(EObject model,
			Assignment assignment, ContentAssistContext context,
			ICompletionProposalAcceptor acceptor) {
		if (model instanceof SigningPolicy) {
			IJvmTypeProvider typeProvider = typeScopeProvider.getTypeProvider(model.eResource().getResourceSet());
			JvmType signingType = typeProvider.findTypeByName(ISigningAlgorithm.class.getCanonicalName());
			typeProposalProvider.createSubTypeProposals(signingType, this, context, BaseDslPackage.Literals.COMPONENT__TYPE, TypeMatchFilters.canInstantiate(), acceptor);
		}
	}
		
}
