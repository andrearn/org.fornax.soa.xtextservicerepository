/*
Copyright (c) 2010-2018 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Christian Schneider	- reviews
*/
grammar org.xkonnex.repo.dsl.profiledsl.ProfileDsl with org.xkonnex.repo.dsl.basedsl.BaseDsl

generate profileDsl "http://www.xkonnex.org/repo/dsl/profiledsl/ProfileDsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as basedsl
import "http://www.xkonnex.org/repo/dsl/environmentdsl/EnvironmentDsl" as  environmentDsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as semanticsDsl
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

ProfileModel:
	(imports+=Import)*
	(types+=DataType)+
	(profiles += Profile)*
;


/*
 * Defines architectural constraints that apply. General foundational governance principles, like lifecycle states 
 * are defined as well in the profile. Usually scoped to an organization
 */	
Profile:
	(default?='default')? ('profile') name=QualifiedName '{'
		/* The scope, where the architecture profile applies to */
		('scope' scope = STRING)?
		/* The asset lifecycle states */
		(lifecycle=Lifecycle)?
		/* The available service categories */
		('service-categories' '{'
			serviceCategory+=ServiceCategory+
		'}')?
		designRules=DesignRules?
		(versioningRule = VersioningStrategy)
		/* 
		 * basic message principles, e.g. message headers that have to be set in every service message
		 * if not stated otherwise in the service definition
		 */
		messaging=Messaging?
		namespaces += ProfileNamespace*
		namespaceRules = NamespaceRules?
		scopedBasicTypes+=BasicTypes*
		governanceDecisions+=GovernanceDecision*

		contactInfo=ContactInfo?
		('tags' (tags+=[semanticsDsl::Tag|TagName])*)?
		('subscriptions' '{'
			subscriptions += EmailOrUsername*
		'}')?
	'}';

/*
 * Defines an asset lifecycle and it's possible state transitions
 */
Lifecycle:
	'lifecycle' name = ID '{'
		(states+= LifecycleState)+
	'}';

/*
 * Defines an asset lifecycle state
 */
LifecycleState:
	(isInitial?='initial' | isDeprecating?='deprecating' | isEnd?='end')? 'state' name = ID '{'
		/**
		 * Is governance-approval required for this state?
		 */
		requiresApproval?='requires-approval'?
		/**
		 * An asset in this state is frozen, i.e. changes that change it's semantics are no longer allowed.
		 * This should be set in states, that mark use in a production environment
		 */
		freezesAsset?='freezes-asset'?
		/**
		 * Checks, yielding warnings by default will yield errors instead
		 */
		strictChecks?='strict-checks'?
		//Runtime view
		/*
		 * Assets in this state can be used in environments with one of the given environment-types at runtime
		 */
		('qualifies-for' (qualifiesFor+=EnvironmentType)(',' qualifiesFor+=EnvironmentType)*)?
		/*
		 * Assets in this state can be used in the given environments at runtime
		 */
		('qualifies-for-environment' (qualifiesForEnvironment+=[environmentDsl::Environment])(',' qualifiesForEnvironment+=[environmentDsl::Environment])*)?
		// Development- and built-time view
		/*
		 * Artifacts can be generated from assets in this state for environments with one of the given environment-types at runtime
		 */
		('can-build-for' (canBuildFor+=EnvironmentType)(',' qualifiesBuildFor+=EnvironmentType)*)?
		/*
		 * Artifacts can be generated from assets in this state for the given environments
		 */
		('can-build-for-environment' (canBuildForEnvironment+=[environmentDsl::Environment])(',' qualifiesBuildForEnvironment+=[environmentDsl::Environment])*)?
		transitions+=Transition*
	'}';
	
Transition: '->' targetState = [LifecycleState | QualifiedName] ('by' (roles+=STRING)(',' roles+=STRING)*)?;

/* 
 * Defines a service category
 */	
ServiceCategory:
	name = ID (('parent' p = [ServiceCategory|QualifiedName]) | ('base-category' baseCategory = ServiceBaseCategory))?
;

/**
 * @deprecated
 */
enum ServiceBaseCategory: process | rule | activity | entity | utility | other;

enum EnvironmentType returns environmentDsl::EnvironmentType: Prod = "Production-Environment" | Staging="Staging-Environment" | Integration="Integration-Environment" | Test="Test-Environment" | Dev="Development-Environment" | Local="Local-Environment" | InfrastructureLibrary="Infrastructure-Library" | Other="Environment";

/* 
 * Defines basic messaging principles, e.g. message headers that have to be set in every service message
 * if not stated otherwise in the service definition
 */
Messaging :
	{Messaging} 'messaging' '{'
		messageHeaders+=MessageHeader*
		('default-request-header' defaultRequestHeader=MessageHeaderRef )?
		('default-response-header' defaultResponseHeader=MessageHeaderRef )?
		('default-publish-header' defaultPublishHeader=MessageHeaderRef )?
	'}';

/*
 * General design rules for services and types
 */	
DesignRules:
	{DesignRules} 'design-rules' '{'
		internalNamespaceRules+=InternalNamespaceRule*
		typeDefPolicy=TypeDefPolicy?
		serviceDefPolicy=ServiceDefPolicy?
		designRules+=CustomDesignRule*
	'}';

/*
 * Conventions that apply to namespaces, especially their names
 */	
NamespaceRules:
	{NamespaceRules}
	'namespace-rules' '{'
		(noTrailingSlash?='no-trailing-slash-in-namespace-uri')?
		aliases+=BaseNamespaceAlias*
		namespaceRules+=CustomNamespaceRule*
	'}';
	
CustomNamespaceRule: 
	'namespace-rule' type=[jvmTypes::JvmType|QualifiedName] ('{'
		(assignment+=Assignment)+ 
	'}')?;

/*
 * How technical assets with the same name declare a version
 * <ul>
 * 	<li>by using different namespaces, but the same name</li>
 * 	<li>by using different names, but the same namespace</li>
 * </ul>
 */	
VersioningStrategy: 'versioning-strategy' versioningStrategy=VersioningStrategyDefinition;

VersioningStrategyDefinition: SimpleVersioningStrategy | CustomVersioningStrategy;

SimpleVersioningStrategy: strategyKind = VersioningStrategyKind;

CustomVersioningStrategy: type=[jvmTypes::JvmType|QualifiedName] ('{'
			assignment+=Assignment+ 
	'}')?
;

/*
 * Definies the basic / primitive types
 */	
BasicTypes:
	'basic-types' 'for' scope=ID '{'
		(types+=DataType)+
	'}';

/**
 * Translates namespace name fragments to shorter names
 * 
 */	
BaseNamespaceAlias :
	'shorten' baseNamespaceFragment=QualifiedName 'to' shortenedBaseNamespaceFragment=QualifiedName ;

/*
 * The toplevel namespace of the organization
 */
OrganizationNamespace:
	'org-namespace' name=QualifiedName ('shortname' prefix=STRING)? '{'
		('metadata' '{'
			contactInfo=ContactInfo?
			('tags' (tags+=[semanticsDsl::Tag])+)?
			('subscriptions' '{'
				subscriptions += EmailOrUsername*
			'}')?
		'}')?
		(subNamespaces+=TechnicalNamespace)*
	'}' ;

ProfileNamespace returns basedsl::Namespace: TechnicalNamespace | OrganizationNamespace;

/*
 * A technical namespace, e.g. used to declare message object types
 */	
TechnicalNamespace: 
	'namespace' name=QualifiedName ('shortname' prefix=STRING)? '{'
		('metadata' '{'
			('URI' uri=STRING)?
			/**
			 * @deprecated may be removed in a later release, should be implemented as validation rule
			 */	
			(noTrailingSlash?='no-trailing-slash-in-namespace-uri')?
			contactInfo=ContactInfo?
			('tags' (tags+=[semanticsDsl::Tag|TagName])*)?
			('subscriptions' '{'
				subscriptions += EmailOrUsername*
			'}')?
		'}')?
		(types+=Type)*
	'}';
 
/*
 * Declares a versioned message header for service messages
 */
MessageHeader:
	'message-headers' name=QualifiedName '{'
		'metadata' '{'
			version=Version 
			'lifecycle-state' state=[LifecycleState | QualifiedName]
			(governanceDecisions+=GovernanceDecision)*
			/* For which message exchange patterns / flows the header is being used */
			'for' (exchanges+=MEPMessageKind) (',' exchanges+=MEPMessageKind)*
			(versionEvolution = TypeVersionEvolution)?
		'}'
		/* The parameters of the message header. The parameters are available as operation parameters. 
		 * Parameters should not be stated again in the service operation definition*/
		(parameters+=Property)+
	'}';
	
enum MEPMessageKind: REQUEST = 'request' | RESPONSE = 'response' | PUBLISH = 'publish';

enum VersioningStrategyKind: NAMESPACE = 'namespace-based' | NAME = 'name-based';

AbstractProperty : 
	Property | Attribute;	
	
Property:
	(optional?='optional')? name=ID ':' type=TypeRef ;

Attribute:
	(optional?='optional')? 'attr' name=ID ':' type=AttributeDataTypeRef ;

TypeRef:	DataTypeRef | VersionedTypeRef;

VersionedTypeRef:
	type=[VersionedType|QualifiedName] (many?='[]' ('as' set?='set')? )? versionRef=VersionRef;
	
DataTypeRef: 
	type=[DataType|QualifiedName] (many?='[]' ('as' set?='set')? )?;
	
AttributeDataTypeRef: 
	type=[DataType|QualifiedName];

EnumRef: 
	type=[Enumeration|QualifiedName] versionRef=VersionRef;

ClassRef: 
	type=[Class|QualifiedName] versionRef=VersionRef;
	
MessageHeaderRef:
	header=[MessageHeader|QualifiedName] versionRef=VersionRef;

Type : DataType | VersionedType;

DataType hidden(WS):
	'datatype' name=ID ('extends' base=[DataType] 'scope' scope=STRING)? ;
	
VersionedType:	Enumeration | Class;

Enumeration:
	'enum' name=ID '{'
		'metadata' '{'
			version=Version  
			('replaces' replaces=EnumRef )?
			'lifecycle-state' state=[LifecycleState | QualifiedName]
			(governanceDecisions+=GovernanceDecision)*
		'}'
		(literals+=EnumLiteral )*
	'}';

EnumLiteral: 
	name=ID;
	
Class:
	'class' name=ID ('extends' superClass=ClassRef)? '{'
		'metadata' '{'
			version=Version  
			('replaces' replaces=EnumRef )?
			'lifecycle-state' state=[LifecycleState | QualifiedName]
			(governanceDecisions+=GovernanceDecision)*
		'}'
		(properties+=AbstractProperty)+
	'}';

/* 
 * Design rule that applies to internal namespaces, e.g. naming convention to be checked by validators
 * 
 * @deprecated may be removed in a later release, should be implemented as validation rule
 */
InternalNamespaceRule: 
	'internal-namespace-rule' name=ID '{'
		'internal-qualifier' internalNsQualifierPolicy = InternalNsQualifierPolicy  
		('qualifying-name' qualifyingName = ID )?
		
		(
			/** @deprecated */
			noTrailingSlash?='no-trailing-slash-in-namespace-uri'
		)?
	'}'
;

/**
 * @deprecated may be removed in a later release, should be implemented as validation rule
 */	
enum InternalNsQualifierPolicy:
	MUST_CONTAIN_QUALIFIER = 'must-contain-internal-qualifier' |
	BEFORE_LAST_ID = 'qualifier-before-last-name' |
	USE_IF_DEFINED = 'use-when-defined' |
	NO_QUALIFIER = 'no-qualifier'
; 

/**
 * Design rule for types, such as
 * <ul>
 * 	<li>support for inheritance</li>
 * 	<li>support for polymorphism</li>
 * </ul>
 */	
TypeDefPolicy: 
	{TypeDefPolicy}
	'types' '{'
		(versionEvolution=TypeVersionEvolution)?
		(allowEnums?='allow-enums' )?
		(allowInheritance?='allow-inheritance' )?
		(allowPolymorphism?='allow-polymorphism' )?
		(typeRules+=TypeRule)*
	'}';
/**
 * Custom design rule for types implemented in Java
 */	
TypeRule: 
	'type-rule' type=[jvmTypes::JvmType|QualifiedName] ('{'
		(assignment+=Assignment)+ 
	'}')?;
		
/**
 * Custom design rules for services implemented in Java
 */
ServiceRule: 
	'service-rule' type=[jvmTypes::JvmType|QualifiedName] ('{'
		(assignment+=Assignment)+ 
	'}')?;

/**
 * General custom design rule implemented in Java
 */		
CustomDesignRule: 
	'design-rule' type=[jvmTypes::JvmType|QualifiedName] ('{'
		(assignment+=Assignment)+ 
	'}')?;
	
TypeVersionEvolution:
	{TypeVersionEvolution}
	'version-evolution' '{'
		(extensibleProperties?=('extensible-properties') )?
		(('extensible-XML-clause') extensibleXMLClause = STRING )?
		(extensibleXMLAttributes?=('extensible-XML-attributes') )?
		(('extensible-XML-attribute-clause') extensibleXMLAttributeClause = STRING)?
		(extensibleSubTypes?=('extensible-sub-types'))?
		policies+=VersionEvolutionPolicy*
	'}'
;

/*
 * Defines convention to be met by service definitions
 */	
ServiceDefPolicy:
	{ServiceDefPolicy}
	'services' '{'
		operationRules=OperationDefPolicy?
		serviceRules+=ServiceRule*
	'}';

/**
 * Design policies for service operations, such as
 * <ul>
 * 	<li>version evolution policies/strategies
 * 	<li>support for polymorphic parameters</li>
 * </ul>
 */
OperationDefPolicy:
	{OperationDefPolicy}
	'operations' '{'
		versionEvolution=ServiceVersionEvolution?
		allowPolymorphism?='allow-polymorphism'?
	'}'
;

/**
 * Define how service versions can evolve. Evolution strategies depend on the technology used 
 */	
ServiceVersionEvolution:
	{ServiceVersionEvolution}
	'version-evolution' '{'
		(extensibleParameters?=('extensible-parameters'|'extendible-parameters') )?
		(('extensible-XML-clause'|'extendible-XML-clause') extensibleXMLClause = STRING )?
		(extensibleXMLAttributes?=('extensible-XML-attributes'|'extendible-XML-attributes') )?
		(('extensible-XML-attribute-clause'|'extendible-XML-attribute-clause') extensibleXMLAttributeClause = STRING)?
		policies+=VersionEvolutionPolicy*
	'}'
;

/**
 * Custom version evolution policy implemented in Java
 */
VersionEvolutionPolicy: 
	'version-evolution-policy' type=[jvmTypes::JvmType|QualifiedName] ('{'
			(assignment+=Assignment)+ 
	'}')?
;

ProfileComponent: CustomDesignRule | CustomNamespaceRule | ServiceRule | TypeRule | CustomVersioningStrategy | VersionEvolutionPolicy;
	