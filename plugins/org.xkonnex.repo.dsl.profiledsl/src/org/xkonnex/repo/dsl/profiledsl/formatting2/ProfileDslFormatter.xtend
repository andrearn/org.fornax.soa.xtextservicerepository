/*
 * generated by Xtext 2.9.1
 */
package org.xkonnex.repo.dsl.profiledsl.formatting2

import com.google.inject.Inject
import org.eclipse.xtext.formatting2.IFormattableDocument
import org.xkonnex.repo.dsl.basedsl.baseDsl.GovernanceDecision
import org.xkonnex.repo.dsl.basedsl.baseDsl.Import
import org.xkonnex.repo.dsl.basedsl.baseDsl.Namespace
import org.xkonnex.repo.dsl.basedsl.formatting2.BaseDslFormatter
import org.xkonnex.repo.dsl.profiledsl.profileDsl.BasicTypes
import org.xkonnex.repo.dsl.profiledsl.profileDsl.DataType
import org.xkonnex.repo.dsl.profiledsl.profileDsl.Profile
import org.xkonnex.repo.dsl.profiledsl.profileDsl.ProfileModel
import org.xkonnex.repo.dsl.profiledsl.profileDsl.ServiceCategory
import org.xkonnex.repo.dsl.profiledsl.services.ProfileDslGrammarAccess

class ProfileDslFormatter extends BaseDslFormatter {
	
	@Inject extension ProfileDslGrammarAccess

	def dispatch void format(ProfileModel profileModel, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		for (Import imports : profileModel.getImports()) {
			imports.format;
		}
		for (DataType types : profileModel.getTypes()) {
			types.format;
		}
		for (Profile profiles : profileModel.getProfiles()) {
			profiles.format;
		}
	}

	def dispatch void format(Profile profile, extension IFormattableDocument document) {
		// TODO: format HiddenRegions around keywords, attributes, cross references, etc. 
		profile.getLifecycle.format;
		for (ServiceCategory serviceCategory : profile.getServiceCategory()) {
			serviceCategory.format;
		}
		profile.getDesignRules.format;
		profile.getVersioningRule.format;
		profile.getMessaging.format;
		for (Namespace namespaces : profile.getNamespaces()) {
			namespaces.format;
		}
		profile.getNamespaceRules.format;
		for (BasicTypes scopedBasicTypes : profile.getScopedBasicTypes()) {
			scopedBasicTypes.format;
		}
		for (GovernanceDecision governanceDecisions : profile.getGovernanceDecisions()) {
			governanceDecisions.format;
		}
	}
	
	// TODO: implement for Lifecycle, LifecycleState, Transition, Messaging, DesignRules, NamespaceRules, CustomNamespaceRule, VersioningStrategy, CustomVersioningStrategy, BasicTypes, OrganizationNamespace, TechnicalNamespace, MessageHeader, Property, Attribute, VersionedTypeRef, EnumRef, ClassRef, MessageHeaderRef, Enumeration, Class, TypeDefPolicy, TypeRule, ServiceRule, CustomDesignRule, TypeVersionEvolution, ServiceDefPolicy, OperationDefPolicy, ServiceVersionEvolution, VersionEvolutionPolicy
}
