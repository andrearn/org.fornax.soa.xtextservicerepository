/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.profiledsl

import com.google.inject.Binder
import org.eclipse.xtext.conversion.IValueConverterService
import org.eclipse.xtext.resource.IDefaultResourceDescriptionStrategy
import org.eclipse.xtext.scoping.IGlobalScopeProvider
import org.eclipse.xtext.service.SingletonBinding
import org.xkonnex.repo.dsl.basedsl.converter.BaseDslValueConverterService
import org.xkonnex.repo.dsl.basedsl.resource.VersionedResourceDescriptionStrategy
import org.xkonnex.repo.dsl.basedsl.scoping.versions.VersionedGlobalScopeProvider
import org.xkonnex.repo.dsl.basedsl.validation.IPluggableValidatorProvider
import org.xkonnex.repo.dsl.basedsl.validation.ReflectivePluggableValidatorProvider
import org.xkonnex.repo.dsl.environmentdsl.scoping.IEnvironmentPerspectiveSelector
import org.xkonnex.repo.dsl.environmentdsl.scoping.impl.DefaultEnvironmentPerspectiveSelector
import org.xkonnex.repo.dsl.environmentdsl.util.EnvironmentTypeComparator
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.DefaultStateMatcher
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.ILifecycleStateResolver
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.IStateMatcher
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.LifecycleStateComparator
import org.xkonnex.repo.dsl.profiledsl.scoping.versions.StateAttributeLifecycleStateResolver

/** 
 * Use this class to register components to be used at runtime / without the Equinox extension registry.
 */
class ProfileDslRuntimeModule extends AbstractProfileDslRuntimeModule {
	override Class<? extends IGlobalScopeProvider> bindIGlobalScopeProvider() {
		return VersionedGlobalScopeProvider
	}

	@SingletonBinding(eager=true) def Class<? extends IPluggableValidatorProvider> bindIPluggableValidatorProvider() {
		return ReflectivePluggableValidatorProvider
	}

	def void configureIDefaultResourceDescriptionStrategy(Binder binder) {
		binder.bind(IDefaultResourceDescriptionStrategy).to(
			VersionedResourceDescriptionStrategy)
	}

	def Class<? extends IStateMatcher> bindIStateMatcher() {
		return DefaultStateMatcher
	}

	def Class<? extends EnvironmentTypeComparator> bindEnvironmentTypeComparator() {
		return EnvironmentTypeComparator
	}

	def Class<? extends LifecycleStateComparator> bindLifecycleStateComparator() {
		return LifecycleStateComparator
	}

	@SingletonBinding def Class<? extends IEnvironmentPerspectiveSelector> bindIEnvironmentPerspectiveSelector() {
		return DefaultEnvironmentPerspectiveSelector
	}

	def Class<? extends ILifecycleStateResolver> bindILifecycleStateResolver() {
		return StateAttributeLifecycleStateResolver
	}

	override Class<? extends IValueConverterService> bindIValueConverterService() {
		return BaseDslValueConverterService
	}
}
