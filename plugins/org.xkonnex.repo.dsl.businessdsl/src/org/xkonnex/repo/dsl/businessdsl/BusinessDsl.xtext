/*
Copyright (c) 2010-2019 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Krunoslav Markotic	- reviews
    Liane Lenke			- reviews
*/
grammar org.xkonnex.repo.dsl.businessdsl.BusinessDsl with org.xkonnex.repo.dsl.basedsl.BaseDsl

generate businessDsl "http://www.xkonnex.org/repo/dsl/businessdsl/BusinessDsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as basedsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as  semantics

BusinessModel :
	(imports+=Import)*
	(domains+=Domain)*
	(organizations+=Organization)*;
		
Organization :
	'org' name=QualifiedName '{'
		('competence' competence=(TEXT|STRING))?
		('head' bizLead=EmailOrUsername)?
		(businessFunctions+=BusinessFunction)*
		(subOrganizations+=[Organization|QualifiedName])*
	'}';
	
Domain :
	'domain' name=QualifiedName '{'
		('competence' competence=STRING)?

		(domains+=Domain)*
		(capabilityGroups+=CapabilityGroup)*
		(capabilites+=Capability)*
		
		contactInfo=ContactInfo?
		('tags' (tags+=[semantics::Tag|TagName])*)?
		('subscriptions' '{'
			subscriptions += EmailOrUsername*
		'}')?
	'}';
	
/**
 * A business function operated by an organization.
 */
BusinessFunction :
	'business-function' name=ID '{' 
		'short-description' shortDescription=(TEXT|STRING)
		('description' description=(TEXT|STRING))?
		additionalInfo=AdditionalInformation?

		('uses-capability' '{'
			capabilties+=CapabilityRef+
		'}')?

		contactInfo=ContactInfo?
		('tags' (tags+=[semantics::Tag])+)?
		('subscriptions' '{'
			subscriptions += EmailOrUsername*
		'}')?
	'}' ; 
	
/**
 * A group of business capabilities. Capability Groups are used to build capability hierarchies.
 */
CapabilityGroup :
	'capability-group' name=ID '{'
		'description' description = (TEXT|STRING)
		additionalInfo=AdditionalInformation?
		(capabilities+=Capability)*
		(capabilityGroups+=CapabilityGroup)*
		
		contactInfo=ContactInfo?
		('tags' (tags+=[semantics::Tag])+)?
		('subscriptions' '{'
			subscriptions += EmailOrUsername*
		'}')?
	'}'
;

/**
 * A business capability
 * 
 * A business capability is a particular ability or capacity that a business may possess or exchange 
 * to achieve a specific purpose or outcome. A capability describes what the business 
 * does (outcomes and service levels) that creates value for customers; for example, pay employee or ship product. 
 * A business capability abstracts and encapsulates the people, process/procedures, technology, and information 
 * into the essential building blocks needed to facilitate performance improvement and redesign analysis.
 * 
 * @see http://msdn.microsoft.com/en-us/library/aa479368.aspx
 */
Capability: SimpleCapability | CapabilityVariant;

SimpleCapability :
	(external?='external')? 'capability' name=ID '{'
		version=Version
		'short-description' shortDescription=(TEXT|STRING)
		('description' description=(TEXT|STRING))?
		'automation-level' automationLevel=CapabilityAutomationLevel
		('business-value' businessValue=(TEXT|STRING))
		additionalInfo=AdditionalInformation?
		(	
			'inputs' '{'
				(inputs+=Input)*
			'}'
		)?
		(
			'outcomes' '{'
				(outcomes+=Outcome)*
			'}'
		)?
		('uses' '{'
			(uses+=CapabilityRef)+
		'}'
		)? 
		
		contactInfo=ContactInfo?
		('tags' (tags+=[semantics::Tag|TagName])*)?
		('subscriptions' '{'
			subscriptions += EmailOrUsername*
		'}')?
	'}';

/**
 * A variant of a capability describing what is varied.
 */
CapabilityVariant:
	(external?='external')? 'capability-variant' name=ID 'based-on' basedOnCapabilty=[Capability|QualifiedName] '{'
		version=Version
		'short-description' shortDescription=(TEXT|STRING)
		('description' description=(TEXT|STRING))?
		'automation-level' automationLevel+=CapabilityAutomationLevel
		('business-value' businessValue=(TEXT|STRING))
		additionalInfo=AdditionalInformation?
		('adding' '{'
			(additions += CapabilityVariation)+
		'}')?
		('replacing' '{'
			(replacements += CapabilityReplacement)+
		'}')?
		('removing' '{'
			(removals += CapabilityVariation)+
		'}')?
		(	
			'inputs' '{'
				(inputs+=Input)*
			'}'
		)?
		(
			'outcomes' '{'
				(outcomes+=Outcome)*
			'}'
		)?
		('uses' '{'
			(uses+=CapabilityRef)+
		'}'
		)? 
		
		contactInfo=ContactInfo?
		('tags' (tags+=[semantics::Tag|TagName])*)?
		('subscriptions' '{'
			subscriptions += EmailOrUsername*
		'}')?
	'}';

CapabilityVariation:
 	varying=CapabilityRef ('{'
		'context' context=(TEXT|STRING)
	'}')?
 	;
 	
CapabilityReplacement:
 	varying=CapabilityRef 'with' replacement=CapabilityRef ('{'
		'context' context=(TEXT|STRING)
	'}')?
 	;
 	
CapabilityRef:
	capability=[Capability|QualifiedName] versionRef=VersionRef;
	
enum CapabilityAutomationLevel: automated | semiAutomated = 'semi-automated' | humanAssisted = 'human-assisted' | manual;

/**
 * The input of a capability
 */
Input: 
	'input' description=(TEXT|STRING)
;

/**
 * The outcome of a capability
 */
Outcome:
	'outcome' description=(TEXT|STRING)
;
