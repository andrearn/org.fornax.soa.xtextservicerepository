/*
 * generated by Xtext
 */
package org.xkonnex.repo.dsl.businessdsl.scoping;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.xkonnex.repo.dsl.basedsl.baseDsl.VersionRef;
import org.xkonnex.repo.dsl.basedsl.scoping.versions.filter.AbstractPredicateVersionFilter;
import org.xkonnex.repo.dsl.basedsl.scoping.versions.filter.NullVersionFilter;
import org.xkonnex.repo.dsl.basedsl.scoping.versions.filter.VersionedImportedNamespaceAwareScopeProvider;
import org.xkonnex.repo.dsl.basedsl.search.IEObjectLookup;
import org.xkonnex.repo.dsl.businessdsl.businessDsl.BusinessDslPackage;
import org.xkonnex.repo.dsl.businessdsl.businessDsl.CapabilityRef;

import com.google.inject.Inject;


/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class BusinessDslScopeProvider extends VersionedImportedNamespaceAwareScopeProvider {

	@Inject IEObjectLookup objLookup;
	
	@Override
	protected AbstractPredicateVersionFilter<IEObjectDescription> getVersionFilterFromContext(
			EObject ctx, EReference reference) {
		if (reference==BusinessDslPackage.Literals.CAPABILITY_REF__VERSION_REF && ctx instanceof CapabilityRef) {
			final VersionRef v = ((CapabilityRef) ctx).getVersionRef();
			return createVersionFilter (v, objLookup.getVersionedOwner(ctx));
		}

		return new NullVersionFilter<IEObjectDescription>();
	}

}
