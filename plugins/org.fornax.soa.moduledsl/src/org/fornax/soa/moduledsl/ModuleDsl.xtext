grammar org.fornax.soa.moduledsl.ModuleDsl with org.fornax.soa.basedsl.SOABaseDsl

generate moduleDsl "http://www.fornax.org/soa/moduledsl/ModuleDsl"

import "platform:/resource/org.fornax.soa.servicedsl/src-gen/org/fornax/soa/ServiceDsl.ecore" as serviceDsl
import "platform:/resource/org.fornax.soa.environmentdsl/src-gen/org/fornax/soa/EnvironmentDsl.ecore" as environmentDsl
import "platform:/resource/org.fornax.soa.profiledsl/src-gen/org/fornax/soa/profiledsl/SOAProfileDsl.ecore" as profileDsl

ModuleModel:
	imports+=Import*
	modules+=Module*;
	
Module:
	(ML_COMMENT)?
	(external?='external')? 'module' name = QualifiedName '{'
		version = Version
		'lifecycle-state' state = [profileDsl::LifecycleState | QualifiedName]
		((qualifiers+=Qualifier)(',' qualifiers+=Qualifier)*)?
		('owner' owner = STRING)?
		('assembly-type' assemblyType = AssemblyType)?
		('assembly-type-details' assemblyTypeDetails = STRING)?
		('deployment-module-name' deploymentModuleName = STRING)?
		
		('provides' '{'
			(providedServices += ServiceRef)+
		'}')?
		('uses' '{'
			(usedServices += ImportServiceRef)+
		'}')?
			
		('source-location' source=STRING )? //Where can I get the sources?
		('revision-tag' revisionTag=STRING )? //Tag in VCS
	'}';
	
ServiceRef: 
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef;
	
ImportServiceRef:
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef 'from' module=ModuleRef (qualifier=Qualifier)?
;

ModuleRef:
	module=[Module|QualifiedName] version=VersionRef
;
	
enum AssemblyType:
	OTHER | JAR | WAR | EAR | OSGi | SCAComposite = 'SCA-Composite'| SCA_EAR = 'SCA-EAR' | WebMethods | dotNet = '.Net' | ZIP | DLL
;


/*
module mod.bla  {
	version 1.1
	lifecycle-state development
	provides {
			default-protocols {
				SOAP {
					protocol-version 1.2
				}
			}
			service MyServiceUS majorVersion 1 {
				override dependencies {
					operation myOp requires OtherService majorVersion 1
				}
				default-protocols {
					EJB {
					
					}
				}
			}
	}
}

*/

//BINDING with overrides:
/*
bind module bla.space version 1.1 as bla.space.1.1 to environment DevEnvironment {
	overrides {
		protocols {
			SOAP {
				version 1.2
				doc/literal
				on WESB proxied from Tomcat
				for {
					domain-namespace bla.space
				}
			}
			SOAP {
				version 1.2
				doc/literal
				on Tomcat
				for {
					internal-namespace bla.space.internal
					service OtherService majorVersion 1
				}
			}
		}
		policies {
		}
		SLAs { 
		}
;

	}

}
*/
