grammar org.fornax.soa.moduledsl.ModuleDsl with org.fornax.soa.basedsl.SOABaseDsl

generate moduleDsl "http://www.fornax.org/soa/moduledsl/ModuleDsl"

import "platform:/resource/org.fornax.soa.servicedsl/src-gen/org/fornax/soa/ServiceDsl.ecore" as serviceDsl
import "platform:/resource/org.fornax.soa.environmentdsl/src-gen/org/fornax/soa/EnvironmentDsl.ecore" as environmentDsl
import "platform:/resource/org.fornax.soa.profiledsl/src-gen/org/fornax/soa/profiledsl/SOAProfileDsl.ecore" as profileDsl
import "platform:/resource/org.fornax.soa.semanticsdsl/src-gen/org/fornax/soa/SemanticsDsl.ecore" as semanticsDsl

ModuleModel:
	imports+=Import*
	modules+=Module*;
/*
 * A (deployable) service module. External modules are provided by other organizations.
 */	
Module:
	(external?='external')? (client?='client')? (public?='public')? 'module' name = QualifiedName '{'
		
		version = Version
		'lifecycle-state' state = [profileDsl::LifecycleState | QualifiedName]
		(governanceDecisions+=GovernanceDecision)*
		/* An additional named Qualifier of the module, may referred to by bindings or other modules using this module */
		(qualifiers=QualifierRefs)?
		('owner' owner = STRING)?
		/*
		 * How is the module packaged? SCA, EAR etc.
		 */
		('assembly-type' assemblyType = AssemblyType)?
		('assembly-type-details' assemblyTypeDetails = STRING)?
		/* override the module name used by default for the modules technical name for deployment */
		('deployment-module-name' deploymentModuleName = STRING)?
		('groupId' groupId = STRING)?
		('artifactId' artifactId = STRING)?
		(	
			('release-on' releaseDate = STRING)? &
			('release-tag' releaseTag = STRING)? &		// Tag in VCS
			('source-location' source=STRING )? 		// Where can I get the sources? 
		)
		
		('provides' '{'
			/*
			 * Services that the module provides
			 */
			(providedServices += ServiceRef)*
			/*
			 * A namespace to provide all it's services, that match the modules state
			 */
			(providedNamespaces += NamespaceRef)*
		'}')?
		('uses' '{'
			(usedServices += ImportServiceRef)*
			(usedModules  += ModuleRef)*
			('endpoint-protocol' usesEndpointProtocol=ImportBindingProtocol)?
			('alternative-endpoint-protocols ' (usesAlternativeEndpointProtocols+=ImportBindingProtocol) (',' usesAlternativeEndpointProtocols+=ImportBindingProtocol)*)?
			('binding-qualifier' bindingQualifier=[semanticsDsl::Qualifier|QualifiedName])?
		'}')?
			
	'}';

/* 
 * Refers to a service constrained by the given version constraint
 */
ServiceRef: 
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef (qualifiers=QualifierRefs)?;
	
/* 
 * Refers to a service imported by the module constrained by the given version constraint. 
 * The module to import the service from may be stated explicitely
 */
ImportServiceRef:
	'service' service=[serviceDsl::Service|QualifiedName] versionRef=VersionRef ('{')?
		('from-any-module-of' '{'
			(modules+=ServiceModuleRef)(',' modules+=ServiceModuleRef)*
		'}' 
		)?
		('using-endpoint' '{'
			('endpoint-protocol' endpointProtocol=ImportBindingProtocol)?
			('alternative-endpoint-protocols ' (alternativeEndpointProtocols+=ImportBindingProtocol) (',' alternativeEndpointProtocols+=ImportBindingProtocol)*)?
			('binding-qualifier' bindingQualifier=[semanticsDsl::Qualifier|QualifiedName])?
		'}')?
	('}')?
;

/*
 * References a module matching the name and version constraint. Additional qualifiers, i.e. names 
 * qualifying the other model, may be used to select the referenced module
 */
ServiceModuleRef:
	module=[Module|QualifiedName] version=VersionRef (importQualifier=MultiQualifierRef)?
;

ModuleRef:
	'module' moduleRef=ServiceModuleRef '{'
		('including' '{'
			(includedServices+=ServiceRef)+
		'}')?
		('excluding' '{'
			(excludedServices+=ServiceRef)+
		'}')?
		('endpoint-protocol' endpointProtocol=ImportBindingProtocol)?
		('alternative-endpoint-protocols ' (alternativeEndpointProtocols+=ImportBindingProtocol) (',' alternativeEndpointProtocols+=ImportBindingProtocol)*)?
		('binding-qualifier' bindingQualifier=[semanticsDsl::Qualifier|QualifiedName])?
	'}'
;

/* refer to a whole SubNamespace */
NamespaceRef: 
	'namespace' namespace=[serviceDsl::SubNamespace | QualifiedName] ('{'
		('including' '{'
			(inclSubNamespace?="include-sub-namespaces")?
			(inclDomainSubNamespace?="include-domain-sub-namespaces")?
			(includedServices+=ServiceRef)+
		'}')?
		('excluding' '{'
			(excludedServices+=ServiceRef)+
		'}')?
	'}')?
;

MultiQualifierRef:
	'qualified-by' (isOneOf?='one-of')? '{' (qualifiers+=[semanticsDsl::Qualifier]) (','qualifiers+=[semanticsDsl::Qualifier])* '}'
;

/*
 *	How the module is packaged 
 */

enum AssemblyType:
	OTHER | JAR | WAR | EAR | OSGi | SCAComposite = 'SCA-Composite'| SCA_EAR = 'SCA-EAR' | WebMethods | dotNet = '.Net' | ZIP | DLL
;

enum ImportBindingProtocol: SCA | SOAP | EJB | HTTP | REST | SAP | JMS | FILE | FTP | IIOP | AMQP;

QualifierRefs:
	'qualifier' (qualifiers+=[semanticsDsl::Qualifier|QualifiedName])(','qualifiers+=[semanticsDsl::Qualifier|QualifiedName])*
;

/*
module mod.bla  {
	version 1.1
	lifecycle-state development
	provides {
			default-protocols {
				SOAP {
					protocol-version 1.2
				}
			}
			service MyServiceUS majorVersion 1 {
				override dependencies {
					operation myOp requires OtherService majorVersion 1
				}
				default-protocols {
					EJB {
					
					}
				}
			}
	}
}

*/

