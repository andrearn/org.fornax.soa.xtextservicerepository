/*
Copyright (c) 2010-2018 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
*/
grammar org.xkonnex.repo.dsl.sladsl.SLADsl with org.xkonnex.repo.dsl.basedsl.BaseDsl

generate sLADsl "http://www.xkonnex.org/repo/dsl/sladsl/SLADsl"

import "http://www.xkonnex.org/repo/dsl/basedsl/BaseDsl" as basedsl
import "http://www.xkonnex.org/repo/dsl/semanticsdsl/SemanticsDsl" as semanticsDsl
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/xtext/common/JavaVMTypes" as jvmTypes

SlaModel:
	'sla-namespace' name=QualifiedName '{'
		imports += Import*
		agreements += SLA*
		serviceQualityProperties += ServiceQualityProperty*
	'}';
	
SLA:
	'service-level-agreement' name=ID (version=Version)? '{'
			'effective-date' effectiveDate = (STRING|DATE) 
			('effective-until' effectiveUntil = (STRING|DATE) )?
			parties+=Party*
			('scope' scope = STRING)?
			('preample' preample = STRING )?
			('description' description = STRING )?
			('restrictions' restrictions=STRING )?
			priorities+=PriorityDeclaration*
			('applies-to' '{'
				appliesTo += AssetRef* 
			'}')?
			costs = Costs?
			('service-quality' '{'
				(serviceQualityKPIs += [ServiceQualityKPI|QualifiedName])*
			'}'
			)?
			('data-security' '{'
				('general-terms' dataSecProtClause = STRING)?
				('security-requirements' '{' 
					securityRequirements += [SecurityPolicy|QualifiedName]*
				'}')
			'}'
			)?
			('additional-services' '{'
				additionalServices = STRING
			'}')?
			escalationProcedure=Escalation?
			('cancellation' cancellation = STRING )?
			('extraordinary-cancellation' extraordinaryCancellation = STRING )?
			reports+=Report*
			additionalInfo=AdditionalInformation?
			('tags' (tags+=[semanticsDsl::Tag|TagName])*)?
			('subscriptions' '{'
				subscriptions += EmailOrUsername*
			'}')?
	'}';


PriorityDeclaration: 'priority' name=ID 'description' description=STRING ;

Escalation : 
	'escalation' '{'
		('cause' cause=STRING )?
		'escalate-to' '{'
			escalationTargets+=EmailOrUsername+
		'}'
		('procedure' procedure=STRING )?
	'}';
				
Party: CustomerParty | ProviderParty | ThirdParty;

CustomerParty:
	'customer-party' name=QualifiedName '{'
		representatives+=Representative+
		responsibilities+=Responsibility+
	'}'; 
	
ProviderParty:
	'provider-party' name=QualifiedName '{'
		representatives+=Representative+
		responsibilities+=Responsibility+
	'}';
	
ThirdParty:
	'third-party' name=QualifiedName '{'
		'participation-role' role=STRING 
		representatives+=Representative+
		responsibilities+=Responsibility+
	'}';

Representative: UserRef | InlineRepresentative;

UserRef: representative = EmailOrUsername;

InlineRepresentative:
	{InlineRepresentative}
	'representative' '{'
		('first-name' firstname = STRING)?
		('last-name' lastname = STRING)?
		('org-unit' orgUnit = STRING)?
		('email' email = STRING)?
		('phone' phone = STRING)?
	'}';


Responsibility:
	'responsibility' description=STRING 
;
	

Report:
	'report' name=ID '{'
		'report-to' reportTo=EmailOrUsername
		'contents' content=STRING
	'}';
	
	
ServiceQualityProperty :  ServiceQualityKPI | Policy | Costs;

ServiceQualityKPI : Availability | Throughput | Latency  | MaxDownTime | Capacity | Accuracy ;

Availability : 
	'availability' name=ID '{'
		'percentage' percentage=Percentile
		('mean-time-between-failure' mtbf=TimeSpan)?
		('mean-time-to-repair' mttr=TimeSpan (mttrPercentile=Percentile)?)?
		('regular-down-times' regularDownTimes = STRING)?
		escalation = Escalation?
		('penalty' penalty = STRING )?
	'}';
	
Throughput:
	'throughput' name=ID '{'
		('requests'|'transactions') throughput = INT 'per' timeUnit=TimeUnit
		('score-to-be-kept' score = STRING) 
		escalation = Escalation?
		('penalty' penalty = STRING )?
	'}';

Latency:
	'latency' name=ID '{'
		'max-call-latency' latency = TimeSpan
		'percentile' percentile=Percentile
		(escalation = Escalation)?
		('penalty' penalty = STRING )?
	'}';
	
	
MaxDownTime:
	'max-downtime' name=ID '{'
		'duration' duration = TimeSpan 
		(escalation = Escalation)?
		('penalty' penalty = STRING )?
	'}';
	
Capacity:
	'capacity' name=ID '{'
		('num-of-requests' requestNum=INT 'per' timeUnit=TimeUnit)?
		('message-size' messageSize=INT byteUnit=BytesEnum)?
		escalation = Escalation?
		('penalty' penalty = STRING )?
	'}'
;

Accuracy:
	'accuracy' name=ID '{'
		'max-error-rate' maxErrorRate=INT 'per' maxErrorRateTimeUnit=TimeUnit
		escalation = Escalation?
		('penalty' penalty = STRING )?
	'}'
;

Costs:
	'costs' name=ID '{'
		'amount' costsAmount=STRING
		'billed-per-unit' billedUnit=STRING
		('effort-accounting' effortAccounting = STRING )?
		(escalation = Escalation)?
		('penalty' penalty = STRING )?
	'}'
;

// Policies

/* Service policies */
Policy: LogPolicy | SecurityPolicy | ReliabilityPolicy;

LogPolicy: 'logging-policy' name=ID '{'
	'logged-message-parts' loggedMessageParts+=MessagePartRef+
	('additional-logging-requirements' additionalLoggingRequirement=STRING)?
'}'	
;

/* Security policy to be applied to the services */
SecurityPolicy : AuthenticationPolicy | SigningPolicy | EncryptionPolicy;

/* Policy, that defines how consumer are authenticated */
AuthenticationPolicy : 
	'authn-policy' name=ID (optional?='optional')? '{'
		'auth-tokens' '{'
			authTokens+=AuthToken+
		'}'
		'hash-algorithms' '{'
			hashAlgorithms+=HashAlgorithm*
		'}'
		useNonce?='use-nonce'?
		('issuer' issuer = STRING)?
	'}';
	
/* How messages are signed, to verify their authenticity */
SigningPolicy : 
	'signing-policy' name=ID '{'
		('supported-algorithms' supportedSigningAlgorithms+=SigningAlgorithm+)?
		('requires-algorithm' requiredSigningAlgorithm=SigningAlgorithm)?
		('signed-message-parts' (signedParts+=MessagePartRef)(',' signedParts+=MessagePartRef)*)?
	'}'
;

MessagePartRef: messagePartRef = MessagePartRefKind ('expression' partRefExpression=STRING)?;

enum MessagePartRefKind: none | header | body | attachments | all | expression;

/* How messages are encrypted */
EncryptionPolicy : 
	'encryption-policy' name=ID '{'
		('supported-algorithms' supportedCipherAlgorithms+=CipherAlgorithmKind+)?
		('requires-algorithm' requiredCipherAlgorithm=CipherAlgorithmKind)?
		('encrypted-message-parts' (encryptedParts+=MessagePartRef)(',' encryptedParts+=MessagePartRef)*)?
	'}'
;

ReliabilityPolicy:
	
	'message-exchange-reliability' name=ID '{' 
		reliability=ReliabilityKind
		(inOrderDelivery ?= 'in-order-delivery')?
	'}'
;
enum ReliabilityKind: EXACTLY_ONCE = 'exactly-once' | AT_MOST_ONCE = 'at-most-once' | AT_LEAST_ONCE = 'at-least-once' | BEST_EFFORT = 'best-effort';
	
	
	
