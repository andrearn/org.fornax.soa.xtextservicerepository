/*
 * generated by Xtext
 */
package org.fornax.soa.scoping;

import java.util.List;

import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.naming.QualifiedName;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceServiceProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.util.IResourceScopeCache;
import org.fornax.soa.basedsl.sOABaseDsl.FixedVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.LowerBoundRangeVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.MajorVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.MaxVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.MinVersionRef;
import org.fornax.soa.basedsl.sOABaseDsl.VersionRef;
import org.fornax.soa.basedsl.scoping.VersionedImportedNamespaceAwareScopeProvider;
import org.fornax.soa.basedsl.scoping.versions.AbstractPredicateVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.BaseDslVersionResolver;
import org.fornax.soa.basedsl.scoping.versions.EContainerVersionResolver;
import org.fornax.soa.basedsl.scoping.versions.FixedVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.LatestMajorVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.LatestMaxExclVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.LatestMinInclMaxExclRangeVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.LatestMinInclVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.NullVersionFilter;
import org.fornax.soa.basedsl.scoping.versions.VersionFilter;
import org.fornax.soa.basedsl.scoping.versions.VersionResolver;
import org.fornax.soa.profiledsl.sOAProfileDsl.LifecycleState;
import org.fornax.soa.profiledsl.scoping.versions.LifecycleStateResolver;
import org.fornax.soa.profiledsl.scoping.versions.RelaxedLatestMajorVersionForOwnerStateFilter;
import org.fornax.soa.profiledsl.scoping.versions.StateAttributeLifecycleStateResolver;
import org.fornax.soa.serviceDsl.BusinessObjectRef;
import org.fornax.soa.serviceDsl.CapabilityRef;
import org.fornax.soa.serviceDsl.ComplexFetchPropertyRef;
import org.fornax.soa.serviceDsl.EagerFetch;
import org.fornax.soa.serviceDsl.EnumTypeRef;
import org.fornax.soa.serviceDsl.EventRef;
import org.fornax.soa.serviceDsl.ExceptionRef;
import org.fornax.soa.serviceDsl.FetchParameterRef;
import org.fornax.soa.serviceDsl.GlobalEventRef;
import org.fornax.soa.serviceDsl.MessageHeaderRef;
import org.fornax.soa.serviceDsl.Operation;
import org.fornax.soa.serviceDsl.OperationEventRef;
import org.fornax.soa.serviceDsl.OperationRef;
import org.fornax.soa.serviceDsl.Parameter;
import org.fornax.soa.serviceDsl.RequiredServiceRef;
import org.fornax.soa.serviceDsl.ServiceDslPackage;
import org.fornax.soa.serviceDsl.ServiceRef;
import org.fornax.soa.serviceDsl.SimpleFetchPropertyRef;
import org.fornax.soa.serviceDsl.SimpleOperationRef;
import org.fornax.soa.serviceDsl.TypeRef;
import org.fornax.soa.serviceDsl.VersionedTypeRef;
import org.fornax.soa.util.DslElementAccessor;

import com.google.common.base.Function;
import com.google.common.base.Predicate;
import com.google.common.collect.Iterables;
import com.google.common.collect.Lists;
import com.google.inject.Inject;
import com.google.inject.Injector;
/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class ServiceDslScopeProvider extends VersionedImportedNamespaceAwareScopeProvider {
	private static final Logger logger = Logger.getLogger(ServiceDslScopeProvider.class);

	private VersionFilter filter;

	@Inject
	private IGlobalScopeProvider globalScopeProvider;
	
	@Inject Injector injector;

	public void setGlobalScopeProvider(IGlobalScopeProvider globalScopeProvider) {
		this.globalScopeProvider = globalScopeProvider;
	}

	@Inject 
	private IResourceServiceProvider.Registry resourceServiceProviderRegistry;

	private IResourceDescription.Manager getManager (Resource res) {
		IResourceServiceProvider resourceServiceProvider = resourceServiceProviderRegistry
				.getResourceServiceProvider(res.getURI());
		return resourceServiceProvider.getResourceDescriptionManager();
	}

	@Inject
	private IResourceScopeCache cache = IResourceScopeCache.NullImpl.INSTANCE;

	public void setCache(IResourceScopeCache cache) {
		this.cache = cache;
	}

	@Inject
	private IQualifiedNameProvider nameProvider;

	public void setNameProvider(IQualifiedNameProvider nameProvider) {
		this.nameProvider = nameProvider;
	}

	public IQualifiedNameProvider getNameProvider() {
		return nameProvider;
	}

	@Override
	protected AbstractPredicateVersionFilter<IEObjectDescription> getVersionFilterFromContext (
			EObject ctx, final EReference reference) {
		if (reference==ServiceDslPackage.Literals.VERSIONED_TYPE_REF__TYPE && ctx instanceof VersionedTypeRef) {
			final VersionRef v = ((VersionedTypeRef) ctx).getVersionRef();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference==ServiceDslPackage.Literals.BUSINESS_OBJECT_REF__TYPE && ctx instanceof BusinessObjectRef) {
			final VersionRef v = ((BusinessObjectRef) ctx).getVersionRef();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
			//FIXME verify this ref
		} else if (reference==ServiceDslPackage.Literals.BUSINESS_OBJECT__SUPER_BUSINESS_OBJECT && ctx instanceof BusinessObjectRef) {
			final VersionRef v = ((BusinessObjectRef) ctx).getVersionRef();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference == ServiceDslPackage.Literals.ENUM_TYPE_REF__TYPE && ctx instanceof EnumTypeRef) {
			final VersionRef v = ((EnumTypeRef) ctx).getVersionRef();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference == ServiceDslPackage.Literals.SERVICE_REF__SERVICE && ctx instanceof ServiceRef) {
			final VersionRef v = ((ServiceRef) ctx).getVersionRef();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference == ServiceDslPackage.Literals.EXCEPTION_REF__EXCEPTION && ctx instanceof ExceptionRef) {
			final VersionRef v = ((ExceptionRef) ctx).getVersion();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));

		} else if (reference == ServiceDslPackage.Literals.GLOBAL_EVENT_REF__EVENT && ctx instanceof GlobalEventRef) {
			final VersionRef v = ((EventRef) ctx).getVersionRef();
			return createVersionFilter(v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference == ServiceDslPackage.Literals.OPERATION_EVENT_REF__EVENT && ctx instanceof OperationEventRef) {
			final VersionRef v = ((EventRef) ctx).getVersionRef();
			return createVersionFilter(v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));

		} else if (reference == ServiceDslPackage.Literals.OPERATION_REF__OPERATION && ctx instanceof OperationRef) {
			final VersionRef v = ((OperationRef) ctx).getVersionRef();
			return createEContainerVersionFilter(v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
			
		} else if (reference == ServiceDslPackage.Literals.SIMPLE_OPERATION_REF__OPERATION && ctx instanceof SimpleOperationRef && ctx.eContainer() instanceof RequiredServiceRef) {
			RequiredServiceRef requiredServiceRef =	(RequiredServiceRef) ctx.eContainer();
			final VersionRef v = requiredServiceRef.getVersionRef();
			final QualifiedName serviceName = nameProvider.getFullyQualifiedName(requiredServiceRef.getService());
			AbstractPredicateVersionFilter<IEObjectDescription> versionFilter = createEContainerVersionFilter(v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			versionFilter.setPreFilterPredicate(new Predicate<IEObjectDescription>() {

				public boolean apply(IEObjectDescription input) {
					if (input.getQualifiedName().startsWith(serviceName))
						return true;
					else
						return false;
				}
				
			});
			return versionFilter;
		} else if (reference == ServiceDslPackage.Literals.FETCH_PARAMETER_REF__PARAM && ctx instanceof FetchParameterRef) {
			FetchParameterRef fetchParamRef = (FetchParameterRef)ctx;
			AbstractPredicateVersionFilter<IEObjectDescription> scopeFilter = createFetchParamterScopeFilter(fetchParamRef);
			if (scopeFilter != null)
				return scopeFilter;

		} else if (reference == ServiceDslPackage.Literals.FETCH_PARAMETER_REF__FETCH_PROPERTY_REF && ctx instanceof FetchParameterRef) {
			TypeRef typeRef = ((FetchParameterRef) ctx).getParam().getType();
			AbstractPredicateVersionFilter<IEObjectDescription> f = AbstractPredicateVersionFilter.NULL_VERSION_FILTER;
			if (typeRef instanceof BusinessObjectRef) 
				f = createEContainerVersionFilter (((BusinessObjectRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			else if (typeRef instanceof EnumTypeRef)
				f = createEContainerVersionFilter (((EnumTypeRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			return f;
		} else if (reference == ServiceDslPackage.Literals.SIMPLE_FETCH_PROPERTY_REF && ctx instanceof SimpleFetchPropertyRef) {
			TypeRef typeRef = null;
			if (ctx.eContainer() instanceof ComplexFetchPropertyRef) {
				typeRef = ((ComplexFetchPropertyRef) ctx.eContainer()).getFetchPropertyRef().getProperty().getType();
			} else {
				typeRef = ((SimpleFetchPropertyRef) ctx).getProperty().getType();
			}
			AbstractPredicateVersionFilter<IEObjectDescription> f = new NullVersionFilter<IEObjectDescription>();
			
			if (typeRef instanceof BusinessObjectRef) 
				f = createEContainerVersionFilter (((BusinessObjectRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			else if (typeRef instanceof EnumTypeRef)
				f = createEContainerVersionFilter (((EnumTypeRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			if (typeRef instanceof VersionedTypeRef) {
				VersionedTypeRef verTypeRef = (VersionedTypeRef) typeRef;
				final QualifiedName verTypeName = nameProvider.getFullyQualifiedName (verTypeRef.getType());	
				f.setPreFilterPredicate(new Predicate<IEObjectDescription> () {

					public boolean apply(IEObjectDescription input) {
						if (input.getQualifiedName().startsWith(verTypeName))
							return true;
						else
							return false;
					}
					
				});
			}
			return f;
//		} else if (reference == ServiceDslPackage.Literals.SIMPLE_FETCH_PROPERTY_REF__PROPERTY && ctx instanceof SimpleFetchPropertyRef) {
//			TypeRef typeRef = null;
//			if (ctx.eContainer() instanceof ComplexFetchPropertyRef) {
//				typeRef = ((ComplexFetchPropertyRef) ctx.eContainer()).getFetchPropertyRef().getProperty().getType();
//			} else {
//				typeRef = ((SimpleFetchPropertyRef) ctx).getProperty().getType();
//			}
//			AbstractPredicateVersionFilter<IEObjectDescription> f = new NullVersionFilter<IEObjectDescription>();
//			
//			if (typeRef instanceof BusinessObjectRef) 
//				f = createEContainerVersionFilter (((BusinessObjectRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
//			else if (typeRef instanceof EnumTypeRef)
//				f = createEContainerVersionFilter (((EnumTypeRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
//			if (typeRef instanceof VersionedTypeRef) {
//				VersionedTypeRef verTypeRef = (VersionedTypeRef) typeRef;
//				final QualifiedName verTypeName = nameProvider.getFullyQualifiedName (verTypeRef.getType());	
//				f.setPreFilterPredicate(new Predicate<IEObjectDescription> () {
//
//					public boolean apply(IEObjectDescription input) {
//						if (input.getQualifiedName().startsWith(verTypeName))
//							return true;
//						else
//							return false;
//					}
//					
//				});
//			}
//			return f;
		} else if (reference == ServiceDslPackage.Literals.COMPLEX_FETCH_PROPERTY_REF && ctx instanceof ComplexFetchPropertyRef) {
			TypeRef typeRef = ((ComplexFetchPropertyRef) ctx).getFetchPropertyRef().getProperty().getType();
			AbstractPredicateVersionFilter<IEObjectDescription> f = new NullVersionFilter<IEObjectDescription>();
			if (typeRef instanceof BusinessObjectRef) 
				f = createEContainerVersionFilter (((BusinessObjectRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			else if (typeRef instanceof EnumTypeRef)
				f = createEContainerVersionFilter (((EnumTypeRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			return f;
			
		} else if (reference == ServiceDslPackage.Literals.MESSAGE_HEADER_REF__HEADER && ctx instanceof MessageHeaderRef) {
			final VersionRef v = ((MessageHeaderRef) ctx).getVersionRef();
			return createStateLessVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		} else if (reference==ServiceDslPackage.Literals.CAPABILITY_REF__VERSION_REF && ctx instanceof CapabilityRef) {
			final VersionRef v = ((CapabilityRef) ctx).getVersionRef();
			return createVersionFilter (v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));

		} else if (reference.eContainer() instanceof EClass && "operation".equals(reference.getName()) && ctx instanceof RequiredServiceRef) {
			RequiredServiceRef requiredServiceRef =	(RequiredServiceRef) ctx;
			final VersionRef v = requiredServiceRef.getVersionRef();
			final QualifiedName serviceName = nameProvider.getFullyQualifiedName(requiredServiceRef.getService());
			AbstractPredicateVersionFilter<IEObjectDescription> versionFilter = createEContainerVersionFilter(v, DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			versionFilter.setPreFilterPredicate(new Predicate<IEObjectDescription>() {

				public boolean apply(IEObjectDescription input) {
					if (input.getQualifiedName().startsWith(serviceName))
						return true;
					else
						return false;
				}
				
			});
			return versionFilter;
		} else if ((reference == ServiceDslPackage.Literals.EAGER_FETCH__EAGER_FETCH_ASSOC || "param".equals(reference.getName())) && ctx instanceof EagerFetch) {
			EagerFetch fetchSpec = (EagerFetch)ctx;
			try {
				Operation op = DslElementAccessor.INSTANCE.getOwningOperation(fetchSpec);
				if (op != null) {
					final Iterable<QualifiedName> paramNames = Iterables.transform(op.getReturn(), new Function<Parameter, QualifiedName>() {
		
						public QualifiedName apply(Parameter input) {
							return nameProvider.getFullyQualifiedName(input);
						}
						
					});
					AbstractPredicateVersionFilter<IEObjectDescription> filter = new NullVersionFilter<IEObjectDescription>();
					filter.setPreFilterPredicate (new Predicate<IEObjectDescription>(){
						
						public boolean apply(IEObjectDescription input) {
							try {
								for(QualifiedName paramName : paramNames) {
									if (paramName.equals (input.getQualifiedName()))
										return true;
								}
							} catch (Exception e) {
								logger.error("Error filtering Parameters", e);
							}
							return false;
						}
						
					});
					return filter;
				}
			} catch (Exception ex) {
				logger.error("Error creating scope filter for FetchParameterRefs", ex);
			}
			
		} else if (reference == ServiceDslPackage.Literals.SIMPLE_FETCH_PROPERTY_REF__PROPERTY && ctx instanceof FetchParameterRef) {
			TypeRef typeRef = ((FetchParameterRef) ctx).getParam().getType();
			AbstractPredicateVersionFilter<IEObjectDescription> versionFilter = new NullVersionFilter<IEObjectDescription>();
			if (typeRef instanceof BusinessObjectRef) {
				versionFilter = createEContainerVersionFilter (((BusinessObjectRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
				BusinessObjectRef verTypeRef = (BusinessObjectRef) typeRef;
				final QualifiedName verTypeName = nameProvider.getFullyQualifiedName (verTypeRef.getType());
				versionFilter.setPreFilterPredicate(new Predicate<IEObjectDescription> () {

					public boolean apply(IEObjectDescription input) {
						if (input.getQualifiedName().startsWith(verTypeName))
							return true;
						else
							return false;
					}
					
				});
			} else if (typeRef instanceof EnumTypeRef) {
				versionFilter = createEContainerVersionFilter (((EnumTypeRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			} else if (typeRef instanceof VersionedTypeRef) {
				versionFilter = createVersionFilter (((VersionedTypeRef)typeRef).getVersionRef(), DslElementAccessor.INSTANCE.getVersionedOwner(ctx));
				VersionedTypeRef verTypeRef = (VersionedTypeRef) typeRef;
				final QualifiedName verTypeName = nameProvider.getFullyQualifiedName (verTypeRef.getType());
				versionFilter.setPreFilterPredicate(new Predicate<IEObjectDescription> () {

					public boolean apply(IEObjectDescription input) {
						if (input.getQualifiedName().startsWith(verTypeName))
							return true;
						else
							return false;
					}
					
				});
			}
			return versionFilter;
			
		}

		return new NullVersionFilter<IEObjectDescription>();
	}

	private AbstractPredicateVersionFilter<IEObjectDescription> createFetchParamterScopeFilter(FetchParameterRef fetchParamRef) {
		try {
			Operation op = DslElementAccessor.INSTANCE.getOwningOperation(fetchParamRef);
			if (op != null) {
				final Iterable<QualifiedName> paramNames = Iterables.transform(op.getReturn(), new Function<Parameter, QualifiedName>() {

					public QualifiedName apply(Parameter input) {
						return nameProvider.getFullyQualifiedName(input);
					}
					
				});
				AbstractPredicateVersionFilter<IEObjectDescription> filter = new NullVersionFilter<IEObjectDescription>();
				filter.setPreFilterPredicate (new Predicate<IEObjectDescription>(){
					
					public boolean apply(IEObjectDescription input) {
						try {
							for(QualifiedName paramName : paramNames) {
								if (paramName.equals (input.getQualifiedName()))
									return true;
							}
						} catch (Exception e) {
							logger.error("Error filtering Parameters", e);
						}
						return false;
					}
					
				});
				return filter;
			}
		} catch (Exception ex) {
			logger.error("Error creating scope filter for FetchParameterRefs", ex);
		}
		return null;
	}

	@Override
	protected AbstractPredicateVersionFilter<IEObjectDescription> createVersionFilter(final VersionRef v, EObject owner) {
		AbstractPredicateVersionFilter<IEObjectDescription> filter = new NullVersionFilter<IEObjectDescription>();
		if (v != null) {
			VersionResolver verResolver = new BaseDslVersionResolver (v.eResource().getResourceSet());
			LifecycleStateResolver stateResolver = new StateAttributeLifecycleStateResolver (v.eResource().getResourceSet());
			LifecycleState ownerState = stateResolver.getLifecycleState(owner);
			if (v instanceof MajorVersionRef) {
				RelaxedLatestMajorVersionForOwnerStateFilter<IEObjectDescription> stateFilter = new RelaxedLatestMajorVersionForOwnerStateFilter<IEObjectDescription> (verResolver, new Integer(((MajorVersionRef)v).getMajorVersion()).toString(), stateResolver, ownerState);
				injector.injectMembers (stateFilter);
				return stateFilter;
			}
			if (v instanceof MaxVersionRef)
				return new LatestMaxExclVersionFilter<IEObjectDescription>(verResolver, ((MaxVersionRef)v).getMaxVersion());
			if (v instanceof MinVersionRef)
				return new LatestMinInclVersionFilter<IEObjectDescription>(verResolver, ((MinVersionRef)v).getMinVersion());
			if (v instanceof LowerBoundRangeVersionRef)
				return new LatestMinInclMaxExclRangeVersionFilter<IEObjectDescription>(verResolver, ((LowerBoundRangeVersionRef)v).getMinVersion(), ((LowerBoundRangeVersionRef)v).getMaxVersion());
		}
		return filter;
	}
	
	private AbstractPredicateVersionFilter<IEObjectDescription> createStateLessVersionFilter(final VersionRef v, EObject owner) {
		AbstractPredicateVersionFilter<IEObjectDescription> filter = new NullVersionFilter<IEObjectDescription>();
		if (v != null) {
			VersionResolver verResolver = new BaseDslVersionResolver (v.eResource().getResourceSet());
			if (v instanceof MajorVersionRef)
				return new LatestMajorVersionFilter<IEObjectDescription> (verResolver, new Integer(((MajorVersionRef)v).getMajorVersion()).toString());
			if (v instanceof MaxVersionRef)
				return new LatestMaxExclVersionFilter<IEObjectDescription> (verResolver, ((MaxVersionRef)v).getMaxVersion());
			if (v instanceof MinVersionRef)
				return new LatestMinInclVersionFilter<IEObjectDescription> (verResolver, ((MinVersionRef)v).getMinVersion());
			if (v instanceof LowerBoundRangeVersionRef)
				return new LatestMinInclMaxExclRangeVersionFilter<IEObjectDescription> (verResolver, ((LowerBoundRangeVersionRef)v).getMinVersion(), ((LowerBoundRangeVersionRef)v).getMaxVersion());
			if (v instanceof FixedVersionRef)
				return new FixedVersionFilter<IEObjectDescription>(verResolver, ((FixedVersionRef) v).getFixedVersion());
		}
		return filter;
	}

	private AbstractPredicateVersionFilter<IEObjectDescription> createEContainerVersionFilter(final VersionRef v, EObject owner) {
		AbstractPredicateVersionFilter<IEObjectDescription> filter = new NullVersionFilter<IEObjectDescription>();
		if (v != null) {
			VersionResolver verResolver = new EContainerVersionResolver (v.eResource().getResourceSet());
			LifecycleStateResolver stateResolver = new StateAttributeLifecycleStateResolver (v.eResource().getResourceSet());
			LifecycleState ownerState = stateResolver.getLifecycleState(owner);
			if (v instanceof MajorVersionRef) {
				RelaxedLatestMajorVersionForOwnerStateFilter<IEObjectDescription> stateFilter = new RelaxedLatestMajorVersionForOwnerStateFilter<IEObjectDescription> (verResolver, new Integer(((MajorVersionRef)v).getMajorVersion()).toString(), stateResolver, ownerState);
				injector.injectMembers (stateFilter);
				return stateFilter;
			}
			if (v instanceof MaxVersionRef)
				return new LatestMaxExclVersionFilter<IEObjectDescription> (verResolver, ((MaxVersionRef)v).getMaxVersion());
			if (v instanceof MinVersionRef)
				return new LatestMinInclVersionFilter<IEObjectDescription> (verResolver, ((MinVersionRef)v).getMinVersion());
			if (v instanceof LowerBoundRangeVersionRef)
				return new LatestMinInclMaxExclRangeVersionFilter<IEObjectDescription> (verResolver, ((LowerBoundRangeVersionRef)v).getMinVersion(), ((LowerBoundRangeVersionRef)v).getMaxVersion());
			if (v instanceof FixedVersionRef)
				return new FixedVersionFilter<IEObjectDescription>(verResolver, ((FixedVersionRef) v).getFixedVersion());
		}
		return filter;
	}

}
