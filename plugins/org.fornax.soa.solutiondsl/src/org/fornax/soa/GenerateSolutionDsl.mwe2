module org.fornax.soa.SolutionDsl

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var grammarURI = "classpath:/org/fornax/soa/SolutionDsl.xtext"
var file.extensions = "soldsl"
var projectName = "org.fornax.soa.solutiondsl"
var runtimeProject = "../${projectName}"

var baseMetaModel="platform:/resource/org.fornax.soa.basedsl/model/generated/SOABaseDsl.ecore"
var baseGenModel="platform:/resource/org.fornax.soa.basedsl/model/generated/SOABaseDsl.genmodel"

var semMetaModel = "platform:/resource/org.fornax.soa.semanticsdsl/model/generated/SemanticsDsl.ecore"
var semGenModel = "platform:/resource/org.fornax.soa.semanticsdsl/model/generated/SemanticsDsl.genmodel"

var svcMetaModel = "platform:/resource/org.fornax.soa.servicedsl/model/generated/ServiceDsl.ecore"
var svcGenModel = "platform:/resource/org.fornax.soa.servicedsl/model/generated/ServiceDsl.genmodel"

var bizMetaModel="platform:/resource/org.fornax.soa.businessdsl/model/generated/BusinessDsl.ecore"
var bizGenModel="platform:/resource/org.fornax.soa.businessdsl/model/generated/BusinessDsl.genmodel"

var envMetaModel = "platform:/resource/org.fornax.soa.environmentdsl/model/generated/EnvironmentDsl.ecore"
var envGenModel = "platform:/resource/org.fornax.soa.environmentdsl/model/generated/EnvironmentDsl.genmodel"

var profMetaModel="platform:/resource/org.fornax.soa.profiledsl/model/generated/SOAProfileDsl.ecore"
var profGenModel="platform:/resource/org.fornax.soa.profiledsl/model/generated/SOAProfileDsl.genmodel"

Workflow {
    bean = StandaloneSetup {
		platformUri = "${runtimeProject}/.."
		uriMap = { to = semMetaModel from = "http://www.fornax.org/soa/SemanticsDsl" }
		uriMap = { to = svcMetaModel from = "http://www.fornax.org/soa/ServiceDsl" }
		uriMap = { to = bizMetaModel from = "http://www.fornax.org/soa/BusinessDsl" }
		uriMap = { to = baseMetaModel from = "http://www.fornax.org/soa/basedsl/SOABaseDsl" }
		uriMap = { to = envMetaModel from = "http://www.fornax.org/soa/EnvironmentDsl" }
		uriMap = { to = profMetaModel from = "http://www.fornax.org/soa/profiledsl/SOAProfileDsl" }
		registerEcoreFile = baseMetaModel
		registerEcoreFile = semMetaModel
		registerEcoreFile = svcMetaModel
		registerEcoreFile = bizMetaModel
		registerEcoreFile = envMetaModel
		registerEcoreFile = profMetaModel
		registerGenModelFile = baseGenModel
		registerGenModelFile = semGenModel
		registerGenModelFile = svcGenModel
		registerGenModelFile = bizGenModel
		registerGenModelFile = envGenModel
		registerGenModelFile = profGenModel
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}.ui/src-gen"
	}

	component = Generator {
		pathRtProject = runtimeProject
		pathUiProject = "${runtimeProject}.ui"
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = {
			uri = grammarURI
			fileExtensions = file.extensions

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {
			}

			// generates Java API for the generated EPackages 
			fragment = ecore.EMFGeneratorFragment {
			}

			// the serialization component
			fragment = serializer.SerializerFragment {}

			// a custom ResourceFactory for use with EMF 
			fragment = resourceFactory.ResourceFactoryFragment {
				fileExtensions = file.extensions
			}

			// The antlr parser generator fragment.
			fragment = parser.antlr.XtextAntlrGeneratorFragment {
				options = {
					backtrack = true
					classSplitting = true
				}
			}

			// java-based API for validation 
			fragment = validation.JavaValidatorFragment {
				composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				// composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}

			// scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment {}
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API 
			fragment = scoping.ImportNamespacesScopingFragment {}
			fragment = exporting.QualifiedNamesFragment {}
			fragment = builder.BuilderIntegrationFragment {}

			// formatter API 
			fragment = formatting.FormatterFragment {}

			// labeling API 
			fragment = labeling.LabelProviderFragment {}

			// outline API 
			fragment = outline.OutlineTreeProviderFragment {}
			fragment = outline.QuickOutlineFragment {}

			// quickfix API 
			fragment = quickfix.QuickfixProviderFragment {}
			
			// provides a compare view
			fragment = compare.CompareFragment {
				fileExtensions = file.extensions
			}

			// content assist API  
			fragment = contentAssist.JavaBasedContentAssistFragment {}

			// generates a more lightweight Antlr parser and lexer tailored for content assist  
			fragment = parser.antlr.XtextAntlrUiGeneratorFragment {
				options = {
					backtrack = true
					classSplitting = true
				}
			}

			fragment = refactoring.RefactorElementNameFragment {}

		}
	}
}
