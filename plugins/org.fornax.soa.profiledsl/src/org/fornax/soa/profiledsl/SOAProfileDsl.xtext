/*
Copyright (c) 2010-2011 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Christian Schneider	- reviews
*/
grammar org.fornax.soa.profiledsl.SOAProfileDsl with org.fornax.soa.basedsl.SOABaseDsl

generate sOAProfileDsl "http://www.fornax.org/soa/profiledsl/SOAProfileDsl"

import "platform:/resource/org.fornax.soa.environmentdsl/src-gen/org/fornax/soa/EnvironmentDsl.ecore" as  environmentDsl

SOAProfileModel:
	(types+=DataType)+
	(profiles += SOAProfile)*
	(roles+=Role)*;
	
SOAProfile:
	'soa-profile' name=ID '{'
		'scope' scope = STRING
		lifecycle=Lifecycle
		(messaging=Messaging)?
		(designRules=DesignRules)?
		(versioningRule = VersioningRule)
		(orgNamespaces+=OrganizationNamespace)*
		(namespaceRules = NamespaceRules)?
		(scopedBasicTypes+=BasicTypes)*
	'}';
	
Lifecycle:
	'lifecycle' name = ID '{'
		(states+= LifecycleState)+
	'}';

LifecycleState:
	(isInitial?='initial' | isEnd?='end')? 'state' name = ID '{'
		('qualifies-for' (qualifiesFor+=EnvironmentType)(',' qualifiesFor+=EnvironmentType)*)?
		('qualifies-for-environment' (qualifiesForEnvironment+=[environmentDsl::Environment])(',' qualifiesForEnvironment+=[environmentDsl::Environment])*)?
		(transitions+=Transition)*
	'}';
	
Transition: '->' targetState = [LifecycleState | QualifiedName] ('by' (roles+=[Role | QualifiedName])(',' roles+=[Role | QualifiedName])*)?;

Role: 
	'role' name=ID;

enum EnvironmentType returns environmentDsl::EnvironmentType: Prod = "Production-Environment" | Staging="Staging-Environment" | Test="Test-Environment" | Dev="Development-Environment" | Local="Local-Environment" | Other="Other-Environment";

Messaging :
	{Messaging} 'messaging' '{'
		(messageHeaders+=MessageHeader)*
		('default-header' defaultHeader=MessageHeaderRef )?
	'}';
	
DesignRules:
	{DesignRules} 'design-rules' '{'
		(internalNamespaceRules+=InternalNamespaceRule)*
		(typeDefPolicy=TypeDefPolicy)?
		(serviceDefPolicy=ServiceDefPolicy)?
	'}';
	
NamespaceRules:
	{NamespaceRules}
	'namespace-rules' '{'
		(noTrailingSlash?='no-trailing-slash-in-namespace-uri')?
		(aliases+=BaseNamespaceAlias)*
	'}';
	
VersioningRule: 'versioning-strategy' versioningStrategy = VersioningStrategy;
	
BasicTypes:
	'basic-types' 'for' scope=ID '{'
		(types+=DataType)+
	'}';
	
BaseNamespaceAlias :
	'shorten' baseNamespaceFragment=QualifiedName 'to' shortenedBaseNamespaceFragment=QualifiedName ;

OrganizationNamespace:
	'org-namespace' name=QualifiedName ('shortname' prefix=STRING)? '{'
		(subNamespaces+=TechnicalNamespace)*
	'}' ;
	
TechnicalNamespace: 
	'namespace' name=QualifiedName ('shortname' prefix=STRING)? '{'
		(noTrailingSlash?='no-trailing-slash-in-namespace-uri')?
		(types+=Type)*
	'}';
 

MessageHeader:
	'message-headers' name=QualifiedName '{'
		'meta-data' '{'
			version=Version 
			'for' (exchanges+=MEPMessageKind) (',' exchanges+=MEPMessageKind)* 
			(extendableProperties?='extendable-properties' )?
			(extendableXMLAttributes?='extendable-XML-attributes' )?
		'}'
		
		(parameters+=Property)+
	'}';
	
enum MEPMessageKind: REQUEST = 'request' | RESPONSE = 'response' | PUBLISH = 'publish';

enum VersioningStrategy: NAMESPACE = 'namespace-based' | NAME = 'name-based';

AbstractProperty : 
	Property | Attribute;	
	
Property:
	(optional?='optional')? name=ID ':' type=TypeRef ;

Attribute:
	(optional?='optional')? 'attr' name=ID ':' type=AttributeDataTypeRef ;

TypeRef:	DataTypeRef | VersionedTypeRef;

VersionedTypeRef:
	type=[VersionedType|QualifiedName] (many?='[]' (set?='as set')? )? versionRef=VersionRef;
	
DataTypeRef: 
	type=[DataType|QualifiedName] (many?='[]' (set?='as set')? )?;
	
AttributeDataTypeRef: 
	type=[DataType|QualifiedName];

EnumRef: 
	type=[Enumeration|QualifiedName] versionRef=VersionRef;

ClassRef: 
	type=[Class|QualifiedName] versionRef=VersionRef;
	
MessageHeaderRef:
	header=[MessageHeader|QualifiedName] versionRef=VersionRef;

Type : DataType | VersionedType;

DataType hidden(WS):
	'datatype' name=ID ('extends' base=[DataType] 'scope' scope=STRING)? ;
	
VersionedType:	Enumeration | Class;

Enumeration:
	'enum' name=ID '{'
		'metadata' '{'
			version=Version  
			('replaces' replaces=EnumRef )?
		'}'
		(literals+=EnumLiteral )*
	'}';

EnumLiteral: 
	name=ID;
	
Class:
	'class' name=ID ('extends' superClass=ClassRef)? '{'
		'metadata' '{'
			version=Version  
			('replaces' replaces=EnumRef )?
		'}'
		(properties+=AbstractProperty)+
	'}';

InternalNamespaceRule: 
	'internal-namespace-rule' name=ID '{'
		'internal-qualifier' internalNsQualifierPolicy = InternalNsQualifierPolicy  
		('qualifying-name' qualifyingName = ID )?
	'}';
	
enum InternalNsQualifierPolicy:
	MUST_CONTAIN_QUALIFIER = 'must-contain-internal-qualifier' |
	BEFORE_LAST_ID = 'qualifier-before-last-name' |
	USE_IF_DEFINED = 'use-when-defined' |
	NO_QUALIFIER = 'no-qualifier'
 	; 

TypeDefPolicy: 
	{TypeDefPolicy}
	'types' '{'
		(extendableProperties?='extendable-properties' )?
		(extendableXMLAttributes?='extendable-XML-attributes' )?
		(allowEnums?='allow-enums' )?
		(allowInheritance?='allow-inheritance' )?
		(allowPolymorphism?='allow-polymorphism' )?
	'}';
	
ServiceDefPolicy:
	{ServiceDefPolicy}
	'services' '{'
		'operations' '{'
			(extendableParameters?='extendable-parameters' )?
			(extendableXMLAttributes?='extendable-XML-attributes' )?
			(allowPolymorphism?='allow-polymorphism' )?
		'}'
	'}';