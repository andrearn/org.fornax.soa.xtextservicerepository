/*
Copyright (c) 2010-2011 André Arnold and others.
All rights reserved. This program and the accompanying materials
are made available under the terms of the Eclipse Public License v1.0
which accompanies this distribution, and is available at
http://www.eclipse.org/legal/epl-v10.html

Contributors:
    André Arnold 		- initial API and implementation
    Christian Schneider	- reviews
*/
grammar org.fornax.soa.profiledsl.SOAProfileDsl with org.fornax.soa.basedsl.SOABaseDsl

generate sOAProfileDsl "http://www.fornax.org/soa/profiledsl/SOAProfileDsl"

SOAProfileModel hidden (WS):
	(types+=DataType)+
	(profiles += SOAProfile)*;
	
SOAProfile:
	'soa-profile' name=ID '{'
		'scope' scope = STRING';'
		(messaging=Messaging)?
		(designRules=DesignRules)?
		(orgNamespaces+=OrganizationNamespace)*
		(namespaceRules = NamespaceRules)?
		(scopedBasicTypes+=BasicTypes)*
	'}';
	
	
Messaging :
	{Messaging} 'messaging' '{'
		(messageHeaders+=MessageHeader)*
		('default-header' defaultHeader=MessageHeaderRef ";")?
	'}';
	
DesignRules:
	{DesignRules} 'design-rules' '{'
		(internalNamespaceRules+=InternalNamespaceRule)*
		(typeDefPolicy=TypeDefPolicy)?
		(serviceDefPolicy=ServiceDefPolicy)?
	'}';
	
NamespaceRules:
	{NamespaceRules}
	'namespace-rules' '{'
		(noTrailingSlash?='no-trailing-slash-in-namespace-uri')?
		(aliases+=BaseNamespaceAlias)*
	'}';
	
BasicTypes:
	'basic-types' 'for' scope=ID '{'
		(types+=DataType)+
	'}';
	
BaseNamespaceAlias :
	'shorten' baseNamespaceFragment=QualifiedName 'to' shortenedBaseNamespaceFragment=QualifiedName ';';

OrganizationNamespace:
	'org-namespace' name=QualifiedName ('shortname' prefix=STRING)? '{'
		(subNamespaces+=TechnicalNamespace)*
	'}' ;
	
TechnicalNamespace: 
	'namespace' name=QualifiedName ('shortname' prefix=STRING)? '{'
		(noTrailingSlash?='no-trailing-slash-in-namespace-uri')?
		(types+=Type)*
	'}';
 

MessageHeader:
	'message-headers' name=QualifiedName '{'
		'meta-data' '{'
			version=Version ';'
			'for' (exchanges+=MEPMessageKind) (',' exchanges+=MEPMessageKind)* ';'
			(extendableProperties?='extendable-properties' ';')?
			(extendableXMLAttributes?='extendable-XML-attributes' ';')?
		'}'
		
		(parameters+=Property)+
	'}';
	
enum MEPMessageKind: REQUEST = 'request' | RESPONSE = 'response' | PUBLISH = 'publish';

AbstractProperty : 
	Property | Attribute;	
	
Property:
	(doc=ML_COMMENT)? (optional?='optional')? name=ID ':' type=TypeRef ';';

Attribute:
	(doc=ML_COMMENT)? (optional?='optional')? 'attr' name=ID ':' type=AttributeDataTypeRef ';';

TypeRef:	DataTypeRef | VersionedTypeRef;

VersionedTypeRef:
	type=[VersionedType|QualifiedName] (many?='[]' (set?='as set')? )? versionRef=VersionRef;
	
DataTypeRef: 
	type=[DataType|QualifiedName] (many?='[]' (set?='as set')? )?;
	
AttributeDataTypeRef: 
	type=[DataType|QualifiedName];

EnumRef: 
	type=[Enumeration|QualifiedName] versionRef=VersionRef;

ClassRef: 
	type=[Class|QualifiedName] versionRef=VersionRef;
	
MessageHeaderRef:
	header=[MessageHeader|QualifiedName] versionRef=VersionRef;

Type : DataType | VersionedType;

DataType: 
	(doc=ML_COMMENT)?
	'datatype' name=ID ';';
	
VersionedType:	Enumeration | Class;

Enumeration:
	(doc=ML_COMMENT)?
	'enum' name=ID '{'
		'metadata' '{'
			version=Version ';' 
			('replaces' replaces=EnumRef ';')?
		'}'
		(literals+=EnumLiteral ';')*
	'}';

EnumLiteral: 
	(doc=ML_COMMENT)?
	name=ID;
	
Class:
	(doc=ML_COMMENT)?
	'class' name=ID ('extends' superClass=ClassRef)? '{'
		'metadata' '{'
			version=Version ';' 
			('replaces' replaces=EnumRef ';')?
		'}'
		(properties+=AbstractProperty)+
	'}';

InternalNamespaceRule: 
	'internal-namespace-rule' name=ID '{'
		'internal-qualifier' internalNsQualifierPolicy = InternalNsQualifierPolicy ';' 
		('qualifying-name' qualifyingName = ID ';')?
	'}';
	
enum InternalNsQualifierPolicy:
	MUST_CONTAIN_QUALIFIER = 'must-contain-internal-qualifier' |
	BEFORE_LAST_ID = 'qualifier-before-last-name' |
	USE_IF_DEFINED = 'use-when-defined' |
	NO_QUALIFIER = 'no-qualifier'
 	; 

TypeDefPolicy: 
	{TypeDefPolicy}
	'types' '{'
		(extendableProperties?='extendable-properties' ';')?
		(extendableXMLAttributes?='extendable-XML-attributes' ';')?
		(allowEnums?='allow-enums' ';')?
		(allowInheritance?='allow-inheritance' ';')?
		(allowPolymorphism?='allow-polymorphism' ';')?
	'}';
	
ServiceDefPolicy:
	{ServiceDefPolicy}
	'services' '{'
		'operations' '{'
			(extendableParameters?='extendable-parameters' ';')?
			(extendableXMLAttributes?='extendable-XML-attributes' ';')?
			(allowPolymorphism?='allow-polymorphism' ';')?
		'}'
	'}';