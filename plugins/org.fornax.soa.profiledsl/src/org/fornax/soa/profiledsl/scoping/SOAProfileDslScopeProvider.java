/*
 * generated by Xtext
 */
package org.fornax.soa.profiledsl.scoping;

import org.apache.log4j.Logger;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.naming.IQualifiedNameProvider;
import org.eclipse.xtext.resource.IEObjectDescription;
import org.eclipse.xtext.resource.IResourceDescription;
import org.eclipse.xtext.resource.IResourceServiceProvider;
import org.eclipse.xtext.scoping.IGlobalScopeProvider;
import org.eclipse.xtext.util.IResourceScopeCache;
import org.fornax.soa.basedsl.sOABaseDsl.VersionRef;
import org.fornax.soa.basedsl.scoping.VersionedImportedNamespaceAwareScopeProvider;
import org.fornax.soa.basedsl.scoping.versions.AbstractPredicateVersionFilter;
import org.fornax.soa.profiledsl.sOAProfileDsl.ClassRef;
import org.fornax.soa.profiledsl.sOAProfileDsl.EnumRef;
import org.fornax.soa.profiledsl.sOAProfileDsl.SOAProfileDslPackage;
import org.fornax.soa.profiledsl.sOAProfileDsl.VersionedTypeRef;
import org.fornax.soa.profiledsl.util.ProfileDslElementAccessor;

import com.google.inject.Inject;

/**
 * This class contains custom scoping description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation/latest/xtext.html#scoping
 * on how and when to use it 
 *
 */
public class SOAProfileDslScopeProvider extends VersionedImportedNamespaceAwareScopeProvider {
	private static final Logger logger = Logger.getLogger(SOAProfileDslScopeProvider.class);


	@Inject
	private IGlobalScopeProvider globalScopeProvider;

	public void setGlobalScopeProvider(IGlobalScopeProvider globalScopeProvider) {
		this.globalScopeProvider = globalScopeProvider;
	}

	@Inject 
	private IResourceServiceProvider.Registry resourceServiceProviderRegistry;

	private IResourceDescription.Manager getManager(Resource res) {
		IResourceServiceProvider resourceServiceProvider = resourceServiceProviderRegistry
				.getResourceServiceProvider(res.getURI());
		return resourceServiceProvider.getResourceDescriptionManager();
	}

	@Inject
	private IResourceScopeCache cache = IResourceScopeCache.NullImpl.INSTANCE;

	public void setCache(IResourceScopeCache cache) {
		this.cache = cache;
	}

	@Inject
	private IQualifiedNameProvider nameProvider;

	public void setNameProvider(IQualifiedNameProvider nameProvider) {
		this.nameProvider = nameProvider;
	}

	public IQualifiedNameProvider getNameProvider() {
		return nameProvider;
	}

	@Override
	protected AbstractPredicateVersionFilter<IEObjectDescription> getVersionFilterFromContext (
			EObject ctx, final EReference reference) {
		if (reference==SOAProfileDslPackage.Literals.VERSIONED_TYPE_REF__TYPE && ctx instanceof VersionedTypeRef) {
			final VersionRef v = ((VersionedTypeRef)ctx).getVersionRef();
			return createVersionFilter (v, ProfileDslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference==SOAProfileDslPackage.Literals.CLASS_REF__TYPE && ctx instanceof ClassRef) {
			final VersionRef v = ((ClassRef)ctx).getVersionRef();
			return createVersionFilter (v, ProfileDslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		
		} else if (reference==SOAProfileDslPackage.Literals.CLASS__SUPER_CLASS && ctx instanceof ClassRef) {
			final VersionRef v = ((ClassRef)ctx).getVersionRef();
			return createVersionFilter (v, ProfileDslElementAccessor.INSTANCE.getVersionedOwner(ctx));
			
		} else if (reference == SOAProfileDslPackage.Literals.ENUM_REF__TYPE && ctx instanceof EnumRef) {
			final VersionRef v = ((EnumRef)ctx).getVersionRef();
			return createVersionFilter (v, ProfileDslElementAccessor.INSTANCE.getVersionedOwner(ctx));
		}
		return AbstractPredicateVersionFilter.NULL_VERSION_FILTER;
	}



}
