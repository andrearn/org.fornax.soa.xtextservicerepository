«IMPORT sOABaseDsl»
«IMPORT serviceDsl»

«EXTENSION org::fornax::soa::servicedsl::templates::common»
«EXTENSION org::fornax::soa::servicedsl::templates::domains»
«EXTENSION org::fornax::soa::servicedsl::templates::types»
«EXTENSION org::fornax::soa::servicedsl::query::types»
«EXTENSION org::fornax::soa::servicedsl::query::subdomains»
«EXTENSION org::fornax::soa::servicedsl::query::headers»
«EXTENSION org::eclipse::xtend::util::stdlib::io»

«DEFINE MessageHeaderXSD (String registryBaseUrl) FOR sOAProfileDsl::SOAProfile»
	«EXPAND MessageHeaderXSD (this, registryBaseUrl) FOREACH orgNamespaces.subNamespaces»
«ENDDEFINE»

«DEFINE MessageHeaderXSD (sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR sOAProfileDsl::Namespace»
	«EXPAND MessageHeaderXSD (profile, registryBaseUrl) FOREACH toVersionedDomainNamespaces()»
«ENDDEFINE»

«DEFINE MessageHeaderXSD (sOAProfileDsl::SOAProfile profile, String registryBaseUrl) FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
«FILE getFileNameFragment() + ".xsd"-»<xsd:schema xmlns:tns="«toNamespace()»"
	«EXPAND NamespaceDeclaration FOREACH allImportedVersionedNS ().reject(e|e.subdomain == subdomain && e.version.toMajorVersionNumber() == version.toMajorVersionNumber())-» 
	xmlns:xsd="http://www.w3.org/2001/XMLSchema"
	targetNamespace="«toNamespace()»"
	>
	«EXPAND ImportDeclaration (registryBaseUrl) FOREACH allImportedVersionedNS().reject(e|e.subdomain == subdomain && e.version.toMajorVersionNumber() == version.toMajorVersionNumber())-» 	
	«IF sOAProfileDsl::Namespace.isInstance(subdomain)-»
		«EXPAND ComplexType(this) FOREACH ((sOAProfileDsl::Namespace) subdomain).types.typeSelect(sOAProfileDsl::Class).select (e|e.version.version.toMajorVersionNumber() == version.toMajorVersionNumber())-»
		«EXPAND SimpleType FOREACH ((sOAProfileDsl::Namespace) subdomain).types.typeSelect(sOAProfileDsl::Enumeration).select (e|e.isLatestMatchingType (version.toMajorVersionNumber().asInteger() ))-»
		«REM»«EXPAND FaultType(this) FOREACH ((SubNamespace) subdomain).exceptions.select (e|e.isLatestMatchingException (version.toMajorVersionNumber().asInteger(), minState))-»«ENDREM»
	«ENDIF»
</xsd:schema>

«ENDFILE»
«ENDDEFINE»

«DEFINE NamespaceDeclaration FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
	xmlns:«toPrefix() + version.toMajorVersionNumber()»="«toNamespace()»"
«ENDDEFINE»

«DEFINE ImportDeclaration (String registryBaseUrl) FOR org::fornax::soa::servicedsl::VersionedDomainNamespace»
	<xsd:import schemaLocation="«getRegisteredUrl (registryBaseUrl)».xsd"
		namespace="«toNamespace()»"></xsd:import>
«ENDDEFINE»


«DEFINE ComplexType(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) FOR sOAProfileDsl::Class»
    <xsd:complexType name="«name»">
    	<xsd:annotation>
    		<xsd:documentation>
    			Version:	«version.toVersionNumber()»
				«IF doc != null-»
				
    			«doc.stripCommentBraces().trim()»
				«ENDIF-»    			
    		</xsd:documentation>
    	</xsd:annotation>
    	
    	«IF superClass != null-»
    	<xsd:complexContent>
    		<xsd:extension base="«superClass.getTypeNameRef(currNs)»">
		    	«EXPAND PropertySequence(currNs)»
    		</xsd:extension>
    	</xsd:complexContent>
    	«ELSE-»
	    	«EXPAND PropertySequenceWithAny(currNs)»
			<xsd:anyAttribute namespace="##any"/>
    	«ENDIF-»
    </xsd:complexType>
«ENDDEFINE»

«DEFINE PropertySequenceWithAny(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) FOR sOAProfileDsl::Class»
    	<xsd:sequence>
    		«EXPAND Property (currNs) FOREACH properties-»
			<xsd:any maxOccurs="unbounded" minOccurs="0" namespace="##other"
				processContents="skip"/>
    	</xsd:sequence>
«ENDDEFINE»
«DEFINE PropertySequence(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) FOR sOAProfileDsl::Class»
    	<xsd:sequence>
    		«EXPAND Property (currNs) FOREACH properties-»
    	</xsd:sequence>
«ENDDEFINE»

«DEFINE SimpleType FOR sOAProfileDsl::Enumeration»
    <xsd:simpleType name="«name»">
    	<xsd:annotation>
    		<xsd:documentation>
    			Version:	«version.toVersionNumber()»
    			
       		</xsd:documentation>
    	</xsd:annotation>
    	<xsd:restriction base="xsd:string">
    		«EXPAND EnumLiteral FOREACH literals-»
    	</xsd:restriction>
    </xsd:simpleType>
«ENDDEFINE»


«DEFINE Property(org::fornax::soa::servicedsl::VersionedDomainNamespace currNs) FOR sOAProfileDsl::Property-»
	«IF doc == null-»
			<xsd:element name="«name»" «IF optional»minOccurs="0"«ENDIF» «IF type.isMany()»maxOccurs="unbounded"«ENDIF» type="«type.getTypeNameRef(currNs)»" />
	«ELSE-»		
			<xsd:element name="«name»" «IF optional»minOccurs="0"«ENDIF» «IF type.isMany()»maxOccurs="unbounded"«ENDIF» type="«type.getTypeNameRef(currNs)»" >
		    	<xsd:annotation>
		    		<xsd:documentation>
		    			«doc.stripCommentBraces().trim()»
		    		</xsd:documentation>
		    	</xsd:annotation>
			</xsd:element>
	«ENDIF»
«ENDDEFINE»


«DEFINE EnumLiteral FOR EnumLiteral-»
    		<xsd:enumeration value="«name»"/>
«ENDDEFINE»