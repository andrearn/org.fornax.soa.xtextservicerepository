import sOABaseDsl;
import serviceDsl;

extension org::fornax::soa::servicedsl::templates::common;
extension org::eclipse::xtend::util::stdlib::io;

String fqn (Object o) : null;
String fqn (OrganizationNamespace s) : s.name.stripXtextEscapes();
String fqn (sOAProfileDsl::OrganizationNamespace s) : s.name.stripXtextEscapes();
String fqn (SubNamespace s) : s.getOrgNamespace().name.stripXtextEscapes() + "." + getNamespacePath({s}).name.stripXtextEscapes().toString(".");
String fqn (sOAProfileDsl::Namespace s) : s.getOrgNamespace().name.stripXtextEscapes() + "." + getNamespacePath({s}).name.stripXtextEscapes().toString(".");


String toNamespace (Object o) : null;

String toNamespace (OrganizationNamespace domain) : domain.toUnversionedNamespace() + 
	"/" + domain.getVersionPostfix() + 
	(domain.hasTrailingSlash() ? "/" : "");
	
String toNamespace (sOAProfileDsl::OrganizationNamespace org) : 
	org.toUnversionedNamespace() + 
	"/" + org.getVersionPostfix() + 
	(org.hasTrailingSlash() ? "/" : "");

String toNamespace (SubNamespace leafDomainNamespace) : leafDomainNamespace.toUnversionedNamespace() +  
	"/" + leafDomainNamespace.getVersionPostfix() + 
	(leafDomainNamespace.hasTrailingSlash() ? "/" : "");

String toNamespace (sOAProfileDsl::Namespace leafNamespace) : leafNamespace.toUnversionedNamespace() +  
	"/" + leafNamespace.getVersionPostfix() + 
	(leafNamespace.hasTrailingSlash() ? "/" : "");

String toNamespace (org::fornax::soa::servicedsl::VersionedDomainNamespace s) : 
	s.subdomain.toUnversionedNamespace().stripXtextEscapes() + 
	"/" + s.getVersionPostfix() + 
	(s.subdomain.hasTrailingSlash() ? "/" : "");

boolean hasTrailingSlash (Object o) : true;
boolean hasTrailingSlash (sOAProfileDsl::Namespace ns) : !ns.noTrailingSlash;

String getVersionPostfix (Object o) : null;

String getVersionPostfix (OrganizationNamespace d) :
	toDefaultVersionPostfix();
	
String getVersionPostfix (sOAProfileDsl::OrganizationNamespace d) :
	toDefaultVersionPostfix();

String getVersionPostfix (DomainNamespace s) :
	s.version != null && s.version.version != null ? 
		s.version.toVersionPostfix() 
	: 
		toDefaultVersionPostfix();
		
String getVersionPostfix (sOAProfileDsl::Namespace s) :
	toDefaultVersionPostfix();
	
String getVersionPostfix (org::fornax::soa::servicedsl::VersionedDomainNamespace s) :
	s.version != null ? 
		s.version.toVersionPostfix() 
	: 
		toDefaultVersionPostfix();


String toUnversionedNamespace (Object o) : "unknown";

String toUnversionedNamespace (OrganizationNamespace domain) : "http://" + domain.name.split(".").reverse().toString(".");

String toUnversionedNamespace (sOAProfileDsl::OrganizationNamespace domain) : "http://" + domain.name.split(".").reverse().toString(".");

String toUnversionedNamespace (SubNamespace leafDomainNamespace) : "http://" + 
	leafDomainNamespace.getOrgNamespace().toHostPart() + "/" + 
	{leafDomainNamespace}.getSubNamespacePath().name.replaceAll("\\.","/").toString("/");

String toUnversionedNamespace (sOAProfileDsl::Namespace leafDomainNamespace) : "http://" + 
	leafDomainNamespace.getOrgNamespace().toHostPart() + "/" + 
	{leafDomainNamespace}.getNamespacePath().name.replaceAll("\\.","/").toString("/");

String toUnversionedNamespace (org::fornax::soa::servicedsl::VersionedDomainNamespace s) : 
	s.subdomain.toUnversionedNamespace();

String toHostPart (OrganizationNamespace d) :
	 d.name.split("\\.").reverse().toString(".");

String toHostPart (sOAProfileDsl::OrganizationNamespace d) :
	 d.name.split("\\.").reverse().toString(".");

List[SubNamespace] getSubNamespacePath (List[SubNamespace] domList) : 
	SubNamespace.isInstance(domList.last().eContainer) ? 
		getSubNamespacePath (domList.add ((SubNamespace)domList.last().eContainer) -> domList)
	: 
		domList.typeSelect(SubNamespace).reverse();

List[sOAProfileDsl::Namespace] getNamespacePath (Object o) : {};

List[sOAProfileDsl::Namespace] getNamespacePath (List[sOAProfileDsl::Namespace] nsList) : 
	sOAProfileDsl::Namespace.isInstance(nsList.last().eContainer) ? 
		getNamespacePath (nsList.add ((sOAProfileDsl::Namespace)nsList.last().eContainer) -> nsList)
	: 
		nsList.typeSelect(sOAProfileDsl::Namespace).reverse();
			
OrganizationNamespace getOrgNamespace (Object o) : null;

OrganizationNamespace getOrgNamespace (Service o) : o.eContainer.eContainer;

OrganizationNamespace getOrgNamespace (DomainNamespace o) : 
	OrganizationNamespace.isInstance(o.eContainer) ? 
		o.eContainer
	:
		(o.eContainer == null ? null : getOrgNamespace ((DomainNamespace)o.eContainer));

OrganizationNamespace getOrgNamespace (InternalNamespace o) : 
	OrganizationNamespace.isInstance(o.eContainer) ? 
		o.eContainer
	:
		(o.eContainer == null ? null : getOrgNamespace ((DomainNamespace)o.eContainer));
	
sOAProfileDsl::OrganizationNamespace getOrgNamespace (sOAProfileDsl::Namespace o) : 
	sOAProfileDsl::OrganizationNamespace.isInstance(o.eContainer) ? 
		o.eContainer
	:
		(o.eContainer == null ? null : getOrgNamespace ((sOAProfileDsl::Namespace)o.eContainer));
		
String getShortName(SubNamespace s) : s.prefix == null ? s.toPrefix() : s.prefix;
String getShortName(sOAProfileDsl::Namespace s) : s.prefix == null ? s.toPrefix() : s.prefix;


String getFileNameFragment (Object s) : null;
String getFileNameFragment (Service s) : s.eContainer.getFileNameFragment().replaceAll("\\." , "-") + "-" + s.name.stripXtextEscapes() + "-" + s.version.toVersionPostfix();
String getFileNameFragment (OrganizationNamespace s) : s.getOrgNamespace().shorten().replaceAll("\\." , "-");
String getFileNameFragment (DomainNamespace s) : s.getOrgNamespace().shorten().replaceAll("\\." , "-") + "-" + {s}.getSubNamespacePath().name.stripXtextEscapes().replaceAll("\\." , "-").toString("-");
String getFileNameFragment (InternalNamespace s) : s.getOrgNamespace().shorten().replaceAll("\\." , "-") + "-" + {s}.getSubNamespacePath().name.stripXtextEscapes().replaceAll("\\." , "-").toString("-");
String getFileNameFragment (sOAProfileDsl::Namespace s) : s.getOrgNamespace().shorten().replaceAll("\\." , "-") + "-" + {s}.getNamespacePath().name.stripXtextEscapes().replaceAll("\\." , "-").toString("-");
String getFileNameFragment (org::fornax::soa::servicedsl::VersionedDomainNamespace s) :
	s.subdomain.getFileNameFragment() + "-v" + s.version.toMajorVersionNumber();

String getConcreteWsdlFileNameFragment (Service s, String endPointKind) : s.eContainer.getFileNameFragment().replaceAll("\\." , "-") + "-" + s.name + endPointKind + "Port" + "-" + s.version.toVersionPostfix();
	

String shorten (OrganizationNamespace d) : d.prefix != null ? d.prefix : d.name;

cached String shorten (sOAProfileDsl::OrganizationNamespace d) :
	d.prefix;


cached String shorten (sOAProfileDsl::OrganizationNamespace d, sOAProfileDsl::SOAProfile p) :
	!p.namespaceRules.aliases.select(e|e.baseNamespaceFragment == d.name).isEmpty ?
		p.namespaceRules.aliases.select(e|e.baseNamespaceFragment == d.name).shortenedBaseNamespaceFragment
	:
		d.name;


/*
 *	Namespace splitting into VersionedDomainNamespaces
 */
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] toVersionedDomainNamespaces (Object s) : info("HOW DID I GET HERE? "+ s.metaType) -> {}.toSet();
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] toVersionedDomainNamespaces (SubNamespace s) : s.types.size > 0 ? s.types.createVersionedDomainNamespace().toSet() : {}.toSet();
Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] toVersionedDomainNamespaces (sOAProfileDsl::Namespace s) : s.types.size > 0 ? s.types.createVersionedDomainNamespace().toSet() : {}.toSet();

Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] getAllLatestSubNamespacesByMajorVersion (Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] canditates) : 
	canditates.reject(e|canditates.exists(c|c.version.toMajorVersionNumber() == e.version.toMajorVersionNumber() && c.version > e.version));

org::fornax::soa::servicedsl::VersionedDomainNamespace getLatestSubNamespaceByMajorVersion (Set[org::fornax::soa::servicedsl::VersionedDomainNamespace] canditates, int majorVer) : 
	canditates.select(e|e.version.toMajorVersionNumber() == majorVer).sortBy(e|e.version).reverse().toList().get(0);



org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(serviceDsl::Type t) : null;
org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(sOAProfileDsl::Type t) : null;
	
	
	
create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(BusinessObject c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber());

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(sOAProfileDsl::VersionedType c) :
	sOAProfileDsl::Namespace.isInstance (c.eContainer) ? {
		setName (((sOAProfileDsl::Namespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((sOAProfileDsl::Namespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((sOAProfileDsl::OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((sOAProfileDsl::OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber());
	
create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(Enumeration c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber());

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(Exception c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber());

create org::fornax::soa::servicedsl::VersionedDomainNamespace createVersionedDomainNamespace(Service c) :
	SubNamespace.isInstance (c.eContainer) ? {
		setName (((SubNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((SubNamespace)c.eContainer).prefix.stripXtextEscapes())		
	} 
	: 	
	{
		setName (((OrganizationNamespace)c.eContainer).name.stripXtextEscapes()) ->
		setShortName (((OrganizationNamespace)c.eContainer).prefix.stripXtextEscapes())
	} ->
	setSubdomain (c.eContainer)->
	setFqn (c.eContainer.fqn())->
	setVersion (c.version.toMajorVersionNumber());


/*
 * 	XML Namespace prefixes / aliases
 */
String toPrefix(Object o) : "tns";
String toPrefix(SubNamespace s) : (s.prefix != null ? s.prefix : getSubNamespacePath({s}).name.subString(0,1).toString(""));

String toPrefix(org::fornax::soa::servicedsl::VersionedDomainNamespace s) : s.shortName != null ? s.shortName : getSubNamespacePath({s.subdomain}).name.subString(0,1).toString("");

List[ServiceModel] getAllServiceModels (ServiceModel m) : m.eAllContents.typeSelect(BusinessObjectRef).type.eRootContainer.union(m.eAllContents.typeSelect(EnumTypeRef).type.eRootContainer).add(m).toSet();

boolean hasTypesInMinState (SubNamespace ns, LifecycleState state) : ns.typesWithMinState (state).size > 0;
boolean hasServicesInMinState (SubNamespace ns, LifecycleState state) : ns.servicesWithMinState (state).size > 0;
boolean hasExceptionsInMinState (SubNamespace ns, LifecycleState state) : ns.exceptionsWithMinState (state).size > 0;
boolean hasTypesInMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) : ns.typesWithMinState (state).size > 0;
boolean hasServicesInMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) : ns.servicesWithMinState (state).size > 0;
boolean hasExceptionsInMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) : ns.exceptionsWithMinState (state).size > 0;


List[org::fornax::soa::serviceDsl::Type] typesWithMinState (SubNamespace ns, LifecycleState state) :
	ns.types.typeSelect(BusinessObject).select(e|e.state.matchesMinStateLevel (state)).
	union (ns.types.typeSelect (Enumeration).select(e|e.state.matchesMinStateLevel (state))).
	union (ns.types.typeSelect (DataType));
	
List[org::fornax::soa::serviceDsl::Type] typesWithMinState (sOAProfileDsl::Namespace ns, LifecycleState state) :
	ns.types.typeSelect(sOAProfileDsl::VersionedType).
	union (ns.types.typeSelect (DataType));
	
List servicesWithMinState (SubNamespace ns, LifecycleState state) :
	ns.services.select (e|e.state.matchesMinStateLevel (state));

List exceptionsWithMinState (SubNamespace ns, LifecycleState state) :
	ns.exceptions.select (e|e.state.matchesMinStateLevel (state));

List[org::fornax::soa::serviceDsl::Type] typesWithMinState (Object ns, LifecycleState state) : null;

List servicesWithMinState (Object ns, LifecycleState state) : null;

List exceptionsWithMinState (Object ns, LifecycleState state) : null;

List[org::fornax::soa::serviceDsl::Type] typesWithMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.typesWithMinState (state);

List servicesWithMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.servicesWithMinState (state);

List exceptionsWithMinState (org::fornax::soa::servicedsl::VersionedDomainNamespace ns, LifecycleState state) :
	ns.subdomain.exceptionsWithMinState (state);

	