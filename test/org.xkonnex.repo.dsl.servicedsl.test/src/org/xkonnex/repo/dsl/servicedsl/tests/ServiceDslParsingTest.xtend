/*
 * generated by Xtext 2.9.1
 */
package org.xkonnex.repo.dsl.servicedsl.tests

import com.google.inject.Inject
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.eclipse.xtext.junit4.util.ParseHelper
import org.junit.Assert
import org.junit.Test
import org.junit.runner.RunWith
import org.xkonnex.repo.dsl.servicedsl.serviceDsl.ServiceModel

@RunWith(XtextRunner)
@InjectWith(ServiceDslInjectorProvider)
class ServiceDslParsingTest{

	@Inject
	ParseHelper<ServiceModel> parseHelper;

	@Test 
	def void loadModel() {
		val result = parseHelper.parse('''
			import test.TestLifecycle.*
			import test.*
			import org.xkonnex.other.*
			
			org-namespace org.xkonnex {
				
				domain-namespace samples {
					businessObject AbstractAddress {
						metadata {
							version 1.0
							lifecycle-state productive
							
						}
						city : string
						zipcode : string
					}
					
					businessObject StreetAddress extends AbstractAddress majorVersion 1 {
						metadata {
							version 1.0
							lifecycle-state productive
						}
						street : string
						houseNum : string
					}
					
					businessObject POBoxAddress extends AbstractAddress majorVersion 1 {
						metadata {
							version 1.0
							lifecycle-state productive
						}
						poBoxNum : string
					}
					
					businessObject ExtStreetAddress extends StreetAddress majorVersion 1 {
						metadata {
							version 1.0
							lifecycle-state productive
						}
						building : string
					}
					
					businessObject Person {
						metadata {
							version 1.0
							lifecycle-state productive
							
						}
						address : AbstractAddress majorVersion 1
						other : Other majorVersion 1
					}
					
					businessObject Person {
						metadata {
							version 2.0
							lifecycle-state productive
							
						}
						address : AbstractAddress majorVersion 1
						other : Other majorVersion 1
					}
					
					public service PersonLookupBES {
						metadata {
							version 1.0
							lifecycle-state productive
							governance-approval {
								yes
								decision-date "04.06.2012"
								decision-by "Mike Approver"
							}
							service-category Entity
							statefulness stateful
						}
						sync findByName (firstName : string, lastName : string) returns persons : Person [] majorVersion 1 {
							
						}
					}
				}
			}
		''')
		Assert.assertNotNull(result)
	}

}
