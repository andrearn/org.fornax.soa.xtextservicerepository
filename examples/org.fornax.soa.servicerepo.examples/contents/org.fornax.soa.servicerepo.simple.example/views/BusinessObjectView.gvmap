/*******************************************************************************
 * Copyright (c) 2012 developers of XtextServiceRepository and others.
 * All rights reserved. This style sheet and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * initial contribution:	AndrÃ© Arnold
 *******************************************************************************/
import org.fornax.soa.serviceDsl.*

diagram BusinessObjectDiagram type SubNamespace {
	
	node BusinessObjectNode for each types.filter (typeof (BusinessObject)) {
		label Name for name
		label Version for "[v" + version?.version + {if (state != null) {", " +  state.name} else ""} + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type?.name + " {" +
				{if (p.optional) "0" else "1"} +
				{if (p.^type instanceof DataTypeRef && (p.^type as DataTypeRef)?.many) "..*" else "..1"} + "}"
			) 
		} unless properties.empty
		
		
		edge ReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) && 
				((p.^type as VersionedTypeRef)?.^type as BusinessObject)?.eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> ref BusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
				
		}
		edge EnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration).eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> ref EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
		}
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) && 
				(((p.^type as VersionedTypeRef)?.^type) as BusinessObject)?.eContainer != p?.eContainer.eContainer) {
			=> call HiddenBusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label HiddenEdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}" 
		}
		 
		edge InhertanceEdge for superBusinessObject?.^type {
			=> ref BusinessObjectNode for this
		} unless superBusinessObject == null || superBusinessObject?.^type.eContainer != eContainer
		
		hidden edge HiddenInhertanceEdge for superBusinessObject?.^type {
			=> call HiddenBusinessObjectNode for this
		} unless superBusinessObject == null || superBusinessObject?.^type.eContainer == eContainer
	}
	
	 
	node HiddenBusinessObjectNode for this as BusinessObject {
		label Name for name
		label PackageName for "from " + if (eContainer.eContainer instanceof OrganizationNamespace) {
			if ((eContainer.eContainer as OrganizationNamespace).prefix != null)
				(eContainer.eContainer as OrganizationNamespace).prefix + "." + (eContainer as SubNamespace).name
			else
				(eContainer.eContainer as OrganizationNamespace).name + "." + (eContainer as SubNamespace).name
		} else {
			(eContainer as SubNamespace).name
		}
		label Version for "[v" + version?.version + {if (state != null) {", " +  state.name} else ""} + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type.name + " {" +
				{if (p.optional) "0" else "1"} +
				{if (p.^type instanceof DataTypeRef && (p.^type as DataTypeRef)?.many) "..*" else "..1"} + "}"
			)
		} unless properties.empty
		
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject)) {
			=> call HiddenBusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label HiddenEdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}" 
		}
		hidden edge HiddenEnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)?.eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> call EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
		}
		
		hidden edge HiddenInhertanceEdge for superBusinessObject?.^type {
			=> call BusinessObjectNode for this
		} unless superBusinessObject == null
	} unless !(this instanceof BusinessObject)


	
	node QueryObjectNode for each types.filter (typeof (QueryObject)) {
		label Name for name
		label Version for "[v" + version?.version + {if (state != null) {", " +  state.name} else ""} + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type?.name + " {" +
				{if (p.optional) "0" else "1"} +
				{if (p.^type instanceof DataTypeRef && (p.^type as DataTypeRef)?.many) "..*" else "..1"} + "}"
			) 
		} unless properties.empty
		
		
		edge ReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof QueryObject) && 
				((p.^type as VersionedTypeRef)?.^type as QueryObject)?.eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> ref QueryObjectNode for ((^type as VersionedTypeRef)?.^type as QueryObject)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
				
		}
		edge EnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration).eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> ref EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
		}
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof QueryObject) && 
				(((p.^type as VersionedTypeRef)?.^type) as QueryObject)?.eContainer != p?.eContainer.eContainer) {
			=> call HiddenQueryObjectNode for ((^type as VersionedTypeRef)?.^type as QueryObject)
			label HiddenEdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}" 
		}
		 
		edge InhertanceEdge for superQueryObject?.^type {
			=> ref QueryObjectNode for this
		} unless superQueryObject == null || superQueryObject?.^type.eContainer != eContainer
		
		hidden edge HiddenInhertanceEdge for superQueryObject?.^type {
			=> call HiddenQueryObjectNode for this
		} unless superQueryObject == null || superQueryObject?.^type.eContainer == eContainer
	}
	 
	node HiddenQueryObjectNode for this as QueryObject {
		label Name for name
		label PackageName for "from " + if (eContainer.eContainer instanceof OrganizationNamespace) {
			if ((eContainer.eContainer as OrganizationNamespace).prefix != null)
				(eContainer.eContainer as OrganizationNamespace).prefix + "." + (eContainer as SubNamespace).name
			else
				(eContainer.eContainer as OrganizationNamespace).name + "." + (eContainer as SubNamespace).name
		} else {
			(eContainer as SubNamespace).name
		}
		label Version for "[v" + version?.version + {if (state != null) {", " +  state.name} else ""} + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type.name + " {" +
				{if (p.optional) "0" else "1"} +
				{if (p.^type instanceof DataTypeRef && (p.^type as DataTypeRef)?.many) "..*" else "..1"} + "}"
			)
		} unless properties.empty
		
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof QueryObject)) {
			=> call HiddenQueryObjectNode for ((^type as VersionedTypeRef)?.^type as QueryObject)
			label HiddenEdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}" 
		}
		hidden edge HiddenEnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)?.eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> call EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
		}
		
		hidden edge HiddenInhertanceEdge for superQueryObject?.^type {
			=> call QueryObjectNode for this
		} unless superQueryObject == null
	} unless !(this instanceof QueryObject)


	node ExceptionNode for each exceptions {
		label ExceptionLabel for "<<Exception>>"
		label Name for name	
		label Version for "[v" + version?.version + {if (state != null) {", " +  state.name} else ""} + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type?.name)
		} unless properties.filter (up | up.^type instanceof DataTypeRef).nullOrEmpty
		edge ReferenceEdge for each 
			properties.filter (p | (p?.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) && 
				((p.^type as VersionedTypeRef)?.^type as BusinessObject)?.eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> ref BusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
		}
		edge EnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef).^type as org.fornax.soa.serviceDsl.Enumeration)?.eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> ref EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name + " {" +
				{if (optional) "0" else "1"} +
				{if (^type instanceof VersionedTypeRef && (^type as VersionedTypeRef)?.many) "..*" else "..1"} + "}"
		}
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) && 
				(((p.^type as VersionedTypeRef)?.^type) as BusinessObject)?.eContainer != p.eContainer?.eContainer) {
			=> call HiddenBusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label HiddenEdgeLabel for name
		}
		hidden edge HiddenEnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)?.eContainer != p.eContainer.eContainer && 
				eContainer == p.eContainer.eContainer) {
			=> call EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name
		}
		 
		edge InhertanceEdge for superException?.^exception {
			=> call ExceptionNode for this
		} unless superException == null
	}
	
	
	node EnumNode for each types.filter(typeof (org.fornax.soa.serviceDsl.Enumeration)) {
		label EnumLabel  for "<<Enum>>"
		label Name for name
		label Version for "[v" + version?.version + {if (state != null) {", " +  state.name} else ""} + "]"
		hidden node EnumLiteralNode for literals {
			label Label for each map(lit|lit?.name)
		} unless literals.empty
	}
}