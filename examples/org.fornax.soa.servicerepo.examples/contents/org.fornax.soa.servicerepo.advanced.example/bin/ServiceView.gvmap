/*******************************************************************************
 * Copyright (c) 2012 developers of XtextServiceRepository and others.
 * All rights reserved. This script and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * initial contribution:	Andr√© Arnold
 *******************************************************************************/
import org.fornax.soa.serviceDsl.*

diagram ServiceDiagram type SubNamespace {
	
	node ServiceNode for each services {
		label Name for name
		label Version for "[v" + version?.version + ", " + state?.name + "]"
		
		node OperationNode for operations {
			label Name for each map (op|op.name + "(" + {if (op.parameters?.size < 4) {op.parameters.map(p|p.name).join(",")} else "..."} + ")")
		}
		hidden edge BOEdge for each 
			operations.map(op | op.parameters).flatten.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof BusinessObject)).map (r|(r.^type as VersionedTypeRef).^type).toSet {
			=> call BusinessObjectNode for (this as BusinessObject)
		}
		hidden edge QOEdge for each 
			operations.map(op | op.parameters).flatten.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof QueryObject)).map (r|(r.^type as VersionedTypeRef).^type).toSet {
			=> call QueryObjectNode for (this as QueryObject)
		}
		hidden edge EnumEdge for each 
			operations.map(op | op.parameters).flatten.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof org.fornax.soa.serviceDsl.Enumeration)).map (r|(r.^type as VersionedTypeRef).^type).toSet {
			=> call EnumNode for (this as org.fornax.soa.serviceDsl.Enumeration)
		}
		
		hidden edge BOReturnEdge for each 
			operations.map(op | op.^return).flatten.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof BusinessObject)).map (r|(r.^type as VersionedTypeRef).^type).toSet {
			=> call BusinessObjectNode for (this as BusinessObject)
		}
		hidden edge QOReturnEdge for each 
			operations.map(op | op.^return).flatten.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof QueryObject)).map (r|(r.^type as VersionedTypeRef).^type).toSet {
			=> call QueryObjectNode for (this as QueryObject)
		}
		hidden edge EnumReturnEdge for each 
			operations.map(op | op.^return).flatten.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef).^type instanceof org.fornax.soa.serviceDsl.Enumeration)).map (r|(r.^type as VersionedTypeRef).^type).toSet {
			=> call EnumNode for (this as org.fornax.soa.serviceDsl.Enumeration)
		}
		edge ExceptionEdge for each 
			operations.map(op | op.^throws).flatten.filter(t|t.eContainer.eContainer.eContainer.eContainer == t.exception.eContainer).map(e|e.exception).toSet {
			=> ref HiddenExceptionNode for this
		}
		hidden edge HiddenExceptionEdge for each
			operations.map(op | op.^throws).flatten.filter(t|t.eContainer.eContainer.eContainer.eContainer != t.exception.eContainer).map(e|e.exception).toSet {
			=> call HiddenExceptionNode for this
		}
		
		hidden edge RequiredServiceEdge for each operations.map(op | op.requires).flatten.map(req|req.service) {
			=> call ServiceNode for this
			label RequiresLabel for "requires"
		}
	}

	node BusinessObjectNode for this as BusinessObject {
		label Name for name
		label Version for "[v" + version?.version + ", " + state?.name + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type.name)
		} unless properties.empty
		
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) &&
				eContainer == p.eContainer?.eContainer) {
			=> call BusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label HiddenEdgeLabel for name
		} 
		hidden edge HiddenEnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				eContainer == p.eContainer.eContainer) {
			=> call EnumNode for ((^type as VersionedTypeRef).^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name
		}
		
		hidden edge InhertanceEdge for superBusinessObject?.^type {
			=> call BusinessObjectNode for this
		} unless superBusinessObject == null
		
		
	} unless !(this instanceof BusinessObject)
	
	node QueryObjectNode for this as QueryObject {
		label Name for name
		label Version for "[v" + version?.version + ", " + state?.name + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type.name)
		} unless properties.empty
		
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof QueryObject) &&
				eContainer == p.eContainer?.eContainer) {
			=> call QueryObjectNode for ((^type as VersionedTypeRef)?.^type as QueryObject)
			label HiddenEdgeLabel for name
		} 
		hidden edge HiddenEnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				eContainer == p.eContainer.eContainer) {
			=> call EnumNode for ((^type as VersionedTypeRef).^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name
		}
		
		hidden edge InhertanceEdge for superQueryObject?.^type {
			=> call QueryObjectNode for this
		} unless superQueryObject == null
		
		
	} unless !(this instanceof BusinessObject)


	node EnumNode for this as org.fornax.soa.serviceDsl.Enumeration {
		label EnumLabel  for "<<Enum>>"
		label Name for name
		label Version for "[v" + version?.version + ", " + state?.name + "]"
		hidden node EnumLiteralNode for literals {
			label Label for each map(lit|lit.name)
		} unless literals.empty
	} unless !(this instanceof org.fornax.soa.serviceDsl.Enumeration)
	
	node HiddenExceptionNode for this as org.fornax.soa.serviceDsl.Exception {
		label ExceptionLabel for "<<Exception>>"
		label Name for name	
		label Version for "[v" + version?.version + ", " + state?.name + "]"
		
		hidden node PropertiesNode for properties.filter (p | p.^type instanceof DataTypeRef) {
			label Label for each map(p|p.name + " : " + (p.^type as DataTypeRef)?.^type.name)
		} unless properties.filter (up | up.^type instanceof DataTypeRef).nullOrEmpty
		hidden edge ReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) && 
				((p.^type as VersionedTypeRef)?.^type as BusinessObject).eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> call BusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label EdgeLabel for name
		}
		hidden edge EnumReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof org.fornax.soa.serviceDsl.Enumeration) && 
				((p.^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration).eContainer == p.eContainer?.eContainer && 
				eContainer == p.eContainer?.eContainer) {
			=> call EnumNode for ((^type as VersionedTypeRef)?.^type as org.fornax.soa.serviceDsl.Enumeration)
			label EdgeLabel for name
		}
		
		hidden edge HiddenReferenceEdge for each 
			properties.filter (p | (p.^type instanceof VersionedTypeRef && 
				(p.^type as VersionedTypeRef)?.^type instanceof BusinessObject) && 
				(((p.^type as VersionedTypeRef)?.^type) as BusinessObject).eContainer != p.eContainer?.eContainer) {
			=> call BusinessObjectNode for ((^type as VersionedTypeRef)?.^type as BusinessObject)
			label HiddenEdgeLabel for name
		}
		 
		edge InhertanceEdge for superException?.^exception {
			=> call HiddenExceptionNode for this
		} unless superException == null
	} unless !(this instanceof org.fornax.soa.serviceDsl.Exception)
}