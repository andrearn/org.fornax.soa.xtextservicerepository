import SampleArchitectureProfile.ExSOALifecycle.*
import SampleArchitectureProfile.*

import org.example.common.*

org-namespace org.example shortname "ex" {
	
	domain-namespace sales shortname "sal" {
		
		
		/*
		 * Let's define a customer
		 */
		businessObject Customer {
			metadata {
				version 1.0
				lifecycle-state productive
				governance-approval {
					yes
					decision-date "12.12.2012"
					decision-by "John Doe"
				}
				tags Customer
			}
			/* The ID of the customer, which may be generated by some backend */
			provided-key customerId : string
			customerKind : CustomerKind majorVersion 1
			person : Person majorVersion 1
			address : Address majorVersion 1
			optional alternativeBillingAddress : Address majorVersion 1
		}
		
		/*
		 * A template object for queries
		 */
		queryObject CustomerQueryTemplate {
			metadata {
				version 1.0
				lifecycle-state productive
				governance-approval {
					yes
					decision-date "12.12.2012"
					decision-by "John Doe"
				}
			}
			optional customerId : string
			optional addressTemplate : AddressQueryTemplate majorVersion 1
			/* The XSD generator may e.g. add range parameter to search within a range */
			optional birthDate : date
		}
		
		enum CustomerKind {
			metadata {
				version 1.0
				lifecycle-state productive
				governance-approval {
					yes
					decision-date "12.12.2012"
					decision-by "John Doe"
				}
			}
			UNDEFINED
			PRIVATE
			BUSINESS
		}
		

		/*
		 * A business entity service to find customers. As it is public, it can be used by 
		 * any application or other service consumer 
		 */
		public service CustomerLookupBES {
			metadata {
				version 1.0
				lifecycle-state productive
				governance-approval {
					yes
					decision-date "14.12.2012"
					decision-by "John Doe"
				}
				
				service-category entity
				statefulness idempotent
				additional-information {
					location "file://W:\\Desgin\\CustomerManagementServicesSpec_v1.0.doc" section "3.1.1"
				}
				tags Customer
			}
			
			/*
			 * A synchronous operation, that looks for customers by their name and city. The firstname
			 * may not be known.
			 */
			sync findByQueryTemplate(customerQueryTemplate : CustomerQueryTemplate majorVersion 1) 
				returns optional customers : Customer [] majorVersion 1
			{
				
			}
			
			/*
			 * Get all detail information of the customer
			 */
			sync getCustomerDetails (customerId : string) 
				returns customer : Customer majorVersion 1
				throws NoSuchCustomerException majorVersion 1
			{
				
			}
		}
		
		
		/**
		 * An activity service that stores/manages customers
		 */
		public service CustomerManagerBAS {
			metadata {
				version 1.0
				lifecycle-state productive
				governance-approval {
					yes
					decision-date "15.12.2012"
					decision-by "John Doe"
				}
				service-category activity
				statefulness stateful
				
				tags Acquisition Customer
			}
			
			/**
			 * Create a new customer
			 */
			sync createCustomer (customer : Customer majorVersion 1) {
				
				/*
				 * It can be further specified, which part of the parameters are handled 
				 * by the operation / others  are ignored
				 */
				considers {
					// only all simple typed properties of Customers will be handled / stored by the operation
					parameter customer flat-only
				}
				
				// The operation uses this private service from a backend system
				requires org.example.sales.internal.sap.BAPI_CUSTOMER_CREATE majorVersion 1
				
				// The business capabilities supported/automated by this operation
				supports-capability {
					// the service contributes to the business capability
					Org.Example.Sales.CustomerManagement.AquireCustomer majorVersion 1
				}
			}
		}

		/**
		 * An activity service that stores/manages customers
		 */
		public service CustomerManagerBAS {
			metadata {
				version 1.1
				lifecycle-state development
				governance-approval {
					no
				}
				service-category activity
				statefulness stateful
				persistence write
				
				tags Acquisition Customer
			}
			
			/**
			 * Create a new customer
			 */
			sync createCustomer (customer : Customer majorVersion 1) {
				
				/*
				 * It can be further specified, which part of the parameters are handled 
				 * by the operation / others  are ignored
				 */
				considers {
					// only all simple typed properties of Customers will be handled / stored by the operation
					parameter customer flat-only
				}
				
				// The operation uses this private service from a backend system
				requires org.example.sales.internal.sap.BAPI_CUSTOMER_CREATE majorVersion 1
				
				// The business capabilities supported/automated by this operation
				supports-capability {
					// the service contributes to the business capability
					Org.Example.Sales.CustomerManagement.AquireCustomer majorVersion 1
				}
			}
			
			sync deactivateCustomer (customerId : string) 
				throws NoSuchCustomerException majorVersion 1
			{
				
			}
		}
		

		/*
		 * An exception, if the customer does not exist
		 */
		exception NoSuchCustomerException {
			metadata {
				version 1.0
				lifecycle-state productive
				governance-approval {
					yes
					decision-date "14.12.2012"
					decision-by "John Doe"
				}
			}
		}
		
		
	}
}