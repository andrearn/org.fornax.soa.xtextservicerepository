/*
 * Define simple data types
 */
 
datatype int
datatype string
datatype date
datatype datetime
datatype boolean
datatype char
datatype long
datatype float
datatype double
datatype decimal
datatype base64Binary
datatype anyType 

/* 
 * A SOA architecture profile defines some basic rules
 */
soa-profile SampleArchitectureProfile {
	scope "Example Org"
	
	/* Count+Care Standard-Lebenzyklus verwalteter SOA Assets */
	lifecycle ExSOALifecycle {
		
		/*
		 * The asset is proposal that is only discussed
		 */
		initial state proposed {
			/*
			 * One can play with the proposal only in a local environment (the local PC)
			 */
			qualifies-for Local-Environment
			-> development 
		}
		
		/*
		 * The asset is under development
		 */
		state development {
			/*
			 * It becomes accesible in the development environment as well
			 */
			qualifies-for Local-Environment, Development-Environment
			-> test
			-> proposed
		}
		
		/*
		 * The asset is under test
		 */
		state test {
			qualifies-for Local-Environment, Development-Environment, Test-Environment
			-> productive
			-> proposed
		}
		
		/* 
		 * The is under productive use
		 */
		state productive {
			qualifies-for Local-Environment, Development-Environment, Test-Environment, Staging-Environment, Production-Environment
			-> deprecated
			-> proposed
		}
		
		/*
		 * The asset is deprecated and will be retired soon.
		 */
		state deprecated {
			qualifies-for Local-Environment, Development-Environment, Test-Environment, Staging-Environment, Production-Environment
			-> productive
			-> proposed
		}
	}
	
	/*
	 * Categorize service based on a basic category
	 */
	service-categories {
		/**
		 * This is a <b>Business Activity Service</b> (BAS) <br/><br/>
		 * 
		 * A Service, that can execute an activity or function of the business logic.
		 */
		^activity base-category activity
		
		/* Categorizes a <b>Business Entity Service</b> (BES) <br/><br/>
		 * 
		 * The service accesses persistent data
		 */
		^entity base-category entity
		
		/** 
		 * Categorizes a <b>Business Process Service</b> (BPS) <br/><br/>
		 * 
		 * The service represent a busines process
		 */
		^process base-category process
		
		/**
		 * Kennzeichnet einen <b>Business Rule Service</b> (BRS) <br/><br/>
		 * 
		 * Ein Service, der eine Geschäftsregel implementiert.
		 */
		^rule base-category rule
		
		/**
		 * Categorizes a <b>Utility Service</b> (US)
		 * 
		 * A service that can be used for helper functions
		 */
		^utility base-category utility
	}
	
	
	/**
	 * Define general design rules and naming conventions
	 */
	design-rules {
		
		
		/* Rules for data types */
		types {
			/*
			 * Define how the evolution of backward compatible version is supported
			 */
			version-evolution {
				/* XSDs will need a placeholder element for response messages. By default a list of "any"-elements */
				extendible-properties
				/* 
				 * And placeholder for XSD attributes is defined will be used as well
				 */
				extendible-XML-attributes	
			}
		}
	}
	
	
	/* für jede in einem Namespace vorkommende Majorversion von BOs, Enums, Services oder Exception 
	 * wird ein eigener technischer Namensraum, z.B. XML-Namespace ausgeprägt
	 * 
	 * Es wird immer die neueste zum Status des Referenzierers passende Version selektiert.
	 */
	versioning-strategy namespace-based
	
	
		
}