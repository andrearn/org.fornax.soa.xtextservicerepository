/*
 * Define simple data types
 */
 
datatype int
datatype string
datatype date
datatype datetime
datatype boolean
datatype char
datatype long
datatype float
datatype double
datatype decimal
datatype base64Binary
datatype anyType 

/**
 * A SOA architecture profile defines some basic rules for the whole company
 */
default profile SampleArchitectureProfile {
	scope "Example Org"
	
	/** Example Org default asset lifecycle */
	lifecycle ExSOALifecycle {
		
		/**
		 * The asset is proposal that is only discussed
		 */
		initial state proposed {
			/*
			 * One can play with the proposal only in a local environment (the local PC)
			 */
			qualifies-for Local-Environment
			-> development 
		}
		
		/**
		 * The asset is under development
		 */
		state development {
			/*
			 * It becomes accesible in the development environment as well
			 */
			qualifies-for Local-Environment, Development-Environment
			-> test
			-> proposed
		}
		
		/*
		 * The asset is under test
		 */
		state test {
			requires-approval
			qualifies-for Local-Environment, Development-Environment, Test-Environment
			-> productive
			-> proposed
		}
		
		/* 
		 * The asset is under productive use
		 */
		state productive {
			requires-approval
			qualifies-for Local-Environment, Development-Environment, Test-Environment, Staging-Environment, Production-Environment
			-> deprecated
			-> proposed
		}
		
		/*
		 * The asset is deprecated and will be retired soon.
		 */
		state deprecated {
			requires-approval
			qualifies-for Local-Environment, Development-Environment, Test-Environment, Staging-Environment, Production-Environment
			-> productive
			-> proposed
		}
	}
	
	/**
	 * Categorize services based on a standard category
	 */
	service-categories {
		/**
		 * This is a <b>Business Activity Service</b> (BAS) <br/><br/>
		 * 
		 * A Service, that can execute an activity or function of the business logic.
		 */
		^activity base-category activity
		
		/* Categorizes a <b>Business Entity Service</b> (BES) <br/><br/>
		 * 
		 * The service accesses persistent data
		 */
		Entity base-category entity
		
		/** 
		 * Categorizes a <b>Business Process Service</b> (BPS) <br/><br/>
		 * 
		 * The service represents a business process
		 */
		^process base-category process
		
		/**
		 * Categorizes a <b>Business Rule Service</b> (BRS) <br/><br/>
		 * 
		 * The service represents a business rule
		 */
		^rule base-category rule
		
		/**
		 * Categorizes a <b>Utility Service</b> (US)
		 * 
		 * A service that can be used for helper functions
		 */
		^utility base-category utility
	}
	
	
	/**
	 * Define general design rules and naming conventions
	 */
	design-rules {
		
		
		/* Rules for data types */
		types {
			/*
			 * Define how the evolution of backward compatible version is supported
			 */
			version-evolution {
				/* XSDs will need a placeholder element for response messages. By default a list of "any"-elements */
				extensible-properties
				/* 
				 * And placeholders for XSD attributes is defined will be used as well
				 */
				extensible-XML-attributes	
			}
		}
	}
	
	
	/**
	 * Use a new namespace for every major version of BOs, Enums, Services oder Exception 
	 * e.g. an XSD-namespace 
	 */
	versioning-strategy namespace-based 
	
	
	/**
	 * Define general rules for messaging:
	 * 
	 * Canonical services must use the message header defined below
	 */
	messaging {
		message-headers ExOrgServiceMessageContext {
			metadata {
				version 1.0
				lifecycle-state ExSOALifecycle.productive
				for request , response , publish
				version-evolution {
					extensible-properties
					extensible-XML-attributes
					extensible-sub-types
				}
			}
			msgCtx : org.example.soa.ServiceMessageContext majorVersion 1
		}
		/**
		 * All services define in domain-namespaces use per default the following message header for every request message.
		 */
		default-request-header ExOrgServiceMessageContext majorVersion 1
		/**
		 * All services define in domain-namespaces use per default the following message header for every response message.
		 */
		default-response-header ExOrgServiceMessageContext majorVersion 1
		/**
		 * All services define in domain-namespaces use per default the following message header for every published event.
		 */
		default-publish-header ExOrgServiceMessageContext majorVersion 1
	}
	
	
	
	/**
	 * Define some technical datatypes for messaging
	 */
	org-namespace org.example shortname "ex" {
		namespace soa {
			class ServiceMessageContext {
				metadata {
					version 1.0
					lifecycle-state ExSOALifecycle.productive
					governance-decision {
						subject "approval"
						decision-result accepted
					}
				}
				/** logical endpoint to route the call to */
				^to : string
				/** identify the caller */
				from : string
				/** where should the response be routed to */
				optional replyTo : string
				/** a unique message ID */
				messageId : string
				/** set in a response message - the messageId of the original request */
				optional requestId : string
				/** attributes for message correlation */
				optional correlation : Correlation majorVersion 1
			}
			
			class Correlation {
				metadata {
					version 1.0
					lifecycle-state ExSOALifecycle.productive
					governance-decision {
						subject "approval"
						decision-result accepted
					}
				}
				correlationId : string
				optional sequenceId : string
				optional sequenceNum : long
			}
		}
	}
	
		
}